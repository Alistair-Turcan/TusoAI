{
    "-1": {
        "0": [
            {
                "code": "def tuso_model(adata, gene_list, gene_weight):\n\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr_initial.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "scdrs_24hr_initial"
            }
        ],
        "1": []
    },
    "1": {
        "0": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    X = adata[:, gene_list].X\n    gb_model = GradientBoostingRegressor()\n    gb_model.fit(X, np.zeros(X.shape[0]))\n    v_raw_score = gb_model.predict(X) * v_score_weight.sum()\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr1_gradient_boosting_wi.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "scdrs_24hr1_gradient_boosting_wi"
            }
        ],
        "1": [],
        "2": [],
        "3": [
            {
                "code": "import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import FunctionTransformer\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, input_size, num_classes):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv1d(1, 16, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, padding=1)\n        self.fc1 = nn.Linear(32 * (input_size // 4), 128)\n        self.fc2 = nn.Linear(128, num_classes)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool1d(x, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool1d(x, 2)\n        x = x.view(x.size(0), -1)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    variance_filter = VarianceThreshold(threshold=0.1)\n    adata_filtered = variance_filter.fit_transform(adata[:, gene_list].X.toarray())\n    \n    log_transformer = FunctionTransformer(np.log1p, validate=True)\n    adata_log_filtered = log_transformer.fit_transform(adata_filtered)\n\n    input_tensor = torch.tensor(adata_log_filtered, dtype=torch.float32).unsqueeze(1)\n\n    model = SimpleCNN(input_size=adata_log_filtered.shape[1], num_classes=1)\n    with torch.no_grad():\n        scores = model(input_tensor).numpy()\n\n    return scores.flatten(), v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr3_convolutional_neuralXX.py",
                "accuracy": 0.05336963735402773,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.161, combined=0.081\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "311"
            }
        ],
        "4": [],
        "5": [
            {
                "code": "import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom sklearn.feature_selection import SelectKBest, f_classif\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, input_size, num_classes):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv1d(1, 16, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, padding=1)\n        self.fc1 = nn.Linear(32 * (input_size // 4), 128)\n        self.fc2 = nn.Linear(128, num_classes)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool1d(x, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool1d(x, 2)\n        x = x.view(x.size(0), -1)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    selector = SelectKBest(score_func=f_classif, k=50)\n    adata_filtered = selector.fit_transform(adata[:, gene_list].X.toarray(), np.zeros(adata.shape[0])) \n    input_tensor = torch.tensor(adata_filtered, dtype=torch.float32).unsqueeze(1)\n\n    model = SimpleCNN(input_size=adata_filtered.shape[1], num_classes=1)\n    with torch.no_grad():\n        scores = model(input_tensor).numpy()\n\n    return scores.flatten(), v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr3_convolutional_neuralXX.py",
                "accuracy": 0.1227076172035111,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.214, FDR=0.796, F1=0.209, AUPRC=0.184, combined=0.196\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "511"
            }
        ],
        "6": [],
        "7": [
            {
                "code": "import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.preprocessing import StandardScaler\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, input_size, num_classes):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv1d(1, 16, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, padding=1)\n        self.fc1 = nn.Linear(32 * (input_size // 4), 128)\n        self.fc2 = nn.Linear(128, num_classes)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool1d(x, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool1d(x, 2)\n        x = x.view(x.size(0), -1)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    scaler = StandardScaler()\n    adata_scaled = scaler.fit_transform(adata[:, gene_list].X.toarray())\n    \n    selector = SelectKBest(score_func=f_classif, k=50)\n    adata_filtered = selector.fit_transform(adata_scaled, np.zeros(adata.shape[0])) \n    input_tensor = torch.tensor(adata_filtered, dtype=torch.float32).unsqueeze(1)\n\n    model = SimpleCNN(input_size=adata_filtered.shape[1], num_classes=1)\n    with torch.no_grad():\n        scores = model(input_tensor).numpy()\n\n    return scores.flatten(), v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr3_convolutional_neuralXXX.py",
                "accuracy": 0.08158734423868062,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.112, combined=0.056\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "711"
            }
        ],
        "8": []
    },
    "2": {
        "0": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    X = adata[:, gene_list].X\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X, np.zeros(X.shape[0]))\n    v_raw_score = model.predict(X)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr2_random_forest_with_g.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "scdrs_24hr2_random_forest_with_g"
            }
        ],
        "1": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import RobustScaler\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    X = adata[:, gene_list].X\n    scaler = RobustScaler(with_centering=False)\n    X_scaled = scaler.fit_transform(X)\n    \n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X_scaled, np.zeros(X_scaled.shape[0]))\n    v_raw_score = model.predict(X_scaled)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr2_random_forest_with_gX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "121"
            }
        ],
        "2": [],
        "3": [],
        "4": [],
        "5": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = np.clip(v_score_weight, 1e-6, None)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    X = adata[:, gene_list].X\n    gb_model = GradientBoostingRegressor()\n    gb_model.fit(X, np.zeros(X.shape[0]))\n    v_raw_score = gb_model.predict(X) * v_score_weight.sum()\n    v_raw_score = np.clip(v_raw_score, 0, None)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr1_gradient_boosting_wiX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "521"
            }
        ],
        "6": [
            {
                "code": "import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, input_size, num_classes):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv1d(1, 16, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, padding=1)\n        self.fc1 = nn.Linear(32 * (input_size // 4), 128)\n        self.fc2 = nn.Linear(128, num_classes)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool1d(x, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool1d(x, 2)\n        x = x.view(x.size(0), -1)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    adata_filtered = adata[:, gene_list].X.toarray()\n\n    input_tensor = torch.tensor(adata_filtered, dtype=torch.float32).unsqueeze(1)\n\n    model = SimpleCNN(input_size=adata_filtered.shape[1], num_classes=1)\n    with torch.no_grad():\n        scores = model(input_tensor).numpy()\n\n    return scores.flatten(), v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr3_convolutional_neuralXXX.py",
                "accuracy": 0.041294959028342244,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=1.000, F1=0.000, AUPRC=0.095, combined=0.048\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "621"
            }
        ]
    },
    "3": {
        "0": [
            {
                "code": "import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, input_size, num_classes):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv1d(1, 16, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, padding=1)\n        self.fc1 = nn.Linear(32 * (input_size // 4), 128)\n        self.fc2 = nn.Linear(128, num_classes)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool1d(x, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool1d(x, 2)\n        x = x.view(x.size(0), -1)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    input_tensor = torch.tensor(adata[:, gene_list].X.toarray(), dtype=torch.float32).unsqueeze(1)\n    model = SimpleCNN(input_size=len(gene_list), num_classes=1)\n    with torch.no_grad():\n        scores = model(input_tensor).numpy()\n\n    return scores.flatten(), v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr3_convolutional_neural.py",
                "accuracy": 0.05490813801542405,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.162, combined=0.081\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "scdrs_24hr3_convolutional_neural"
            }
        ],
        "1": [],
        "2": [],
        "3": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nimport pandas as pd\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    X = adata[:, gene_list].X\n    X = StandardScaler(with_mean=False).fit_transform(X)\n    \n    selector = VarianceThreshold(threshold=0.1)\n    X_selected = selector.fit_transform(X)\n\n    try:\n        gene_ontology = pd.read_csv(\"gene_ontology_annotations.csv\")\n        relevant_genes = gene_ontology[gene_ontology['biological_process'] == 'disease_related']['gene'].values\n        X_selected = X_selected[:, np.isin(gene_list, relevant_genes)]\n    except FileNotFoundError:\n        pass\n\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X_selected, np.zeros(X_selected.shape[0]))\n    v_raw_score = model.predict(X_selected)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr2_random_forest_with_gXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "331"
            }
        ],
        "4": [],
        "5": [],
        "6": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    X = adata[:, gene_list].X\n    X = FunctionTransformer(np.log1p, validate=False).fit_transform(X)\n    X = StandardScaler(with_mean=False).fit_transform(X)\n    \n    selector = VarianceThreshold(threshold=0.1)\n    X_selected = selector.fit_transform(X)\n\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X_selected, np.zeros(X_selected.shape[0]))\n    v_raw_score = model.predict(X_selected)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr2_random_forest_with_gXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "631"
            }
        ]
    },
    "5": {
        "0": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr5_clustering_analysis_.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "scdrs_24hr5_clustering_analysis_"
            }
        ],
        "1": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / np.sum(v_score_weight) if np.sum(v_score_weight) > 0 else v_score_weight\n\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.clip(v_raw_score, 0, None)\n\n    print(f\"NaN counts: {np.isnan(v_raw_score).sum()}, Inf counts: {np.isinf(v_raw_score).sum()}\")\n    \n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr5_clustering_analysis_XX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "NaN counts: 0, Inf counts: 0",
                "lineage": "151"
            }
        ],
        "2": []
    },
    "6": {
        "0": [
            {
                "code": "def tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "scdrs_24hr6_integrated_analysis_"
            }
        ],
        "1": [
            {
                "code": "def tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    \n    v_score_weight = np.clip(v_score_weight, 1e-6, None)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.clip(v_raw_score, 0, None)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_X.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "161"
            }
        ]
    },
    "0": {
        "2": [
            {
                "code": "import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom sklearn.feature_selection import VarianceThreshold\n\nclass SimpleCNN(nn.Module):\n    def __init__(self, input_size, num_classes):\n        super(SimpleCNN, self).__init__()\n        self.conv1 = nn.Conv1d(1, 16, kernel_size=3, padding=1)\n        self.conv2 = nn.Conv1d(16, 32, kernel_size=3, padding=1)\n        self.fc1 = nn.Linear(32 * (input_size // 4), 128)\n        self.fc2 = nn.Linear(128, num_classes)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        x = F.max_pool1d(x, 2)\n        x = F.relu(self.conv2(x))\n        x = F.max_pool1d(x, 2)\n        x = x.view(x.size(0), -1)\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    variance_filter = VarianceThreshold(threshold=0.1)\n    adata_filtered = variance_filter.fit_transform(adata[:, gene_list].X.toarray())\n    input_tensor = torch.tensor(adata_filtered, dtype=torch.float32).unsqueeze(1)\n\n    model = SimpleCNN(input_size=adata_filtered.shape[1], num_classes=1)\n    with torch.no_grad():\n        scores = model(input_tensor).numpy()\n\n    return scores.flatten(), v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr3_convolutional_neuralX.py",
                "accuracy": 0.05639368403728226,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=1.000, F1=0.000, AUPRC=0.078, combined=0.039\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "201"
            }
        ],
        "3": [],
        "4": [],
        "5": [],
        "7": [],
        "8": [
            {
                "code": "def tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    \n    v_score_weight = np.clip(v_score_weight, 1e-5, None)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.clip(v_raw_score, 0, None)\n\n    low_confidence_threshold = 0.1\n    low_confidence_percentage = np.sum(v_raw_score < low_confidence_threshold) / len(v_raw_score) * 100\n    print(f\"Low-confidence predictions: {low_confidence_percentage:.2f}%\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "Low-confidence predictions: 67.80%",
                "lineage": "801"
            }
        ],
        "9": [
            {
                "code": "from sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    selector = SelectKBest(score_func=f_classif, k='all')\n    selector.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    selected_features = selector.get_support(indices=True)\n    \n    v_raw_score = scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_X.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "901"
            }
        ],
        "10": [],
        "11": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    pca = PCA(n_components=2)\n    reduced_data = pca.fit_transform(scaled_data)\n    \n    v_raw_score = reduced_data.dot(v_score_weight[:2]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.03176747677690812,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.063, combined=0.032\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "1101"
            }
        ],
        "12": [
            {
                "code": "from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    model = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3)\n    model.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    v_raw_score = model.predict(scaled_data)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "1201"
            }
        ],
        "13": [
            {
                "code": "from sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    selector = SelectKBest(score_func=f_classif, k=int(len(gene_list) * 0.5))\n    selector.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    selected_features = selector.get_support(indices=True)\n    \n    v_raw_score = scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.04989752533998531,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=1.000, F1=0.000, AUPRC=0.124, combined=0.062\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "1301"
            }
        ],
        "14": [],
        "15": [],
        "16": [
            {
                "code": "from sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    selector = VarianceThreshold(threshold=0.1)\n    filtered_data = selector.fit_transform(adata[:, gene_list].X)\n\n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(filtered_data)\n    \n    v_raw_score = scaled_data.dot(v_score_weight[selector.get_support()]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.2070657172725603,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.240, combined=0.120\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "1601"
            }
        ],
        "17": [
            {
                "code": "from sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    selector = SelectKBest(score_func=f_classif, k=int(len(gene_list) * 0.75))\n    selector.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    selected_features = selector.get_support(indices=True)\n    \n    v_raw_score = scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.17934224348642813,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.052, FDR=0.406, F1=0.096, AUPRC=0.424, combined=0.260\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "1701"
            }
        ],
        "18": [
            {
                "code": "from sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = np.clip(v_score_weight / v_score_weight.sum(), 0, None)\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    selector = SelectKBest(score_func=f_classif, k='all')\n    selector.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    selected_features = selector.get_support(indices=True)\n    \n    v_raw_score = np.clip(scaled_data[:, selected_features].dot(v_score_weight[selected_features]), 0, None).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "1801"
            }
        ],
        "19": [],
        "20": [
            {
                "code": "from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    v_raw_score = model.predict(scaled_data)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "2001"
            }
        ],
        "21": [],
        "22": [],
        "23": [],
        "24": [],
        "25": [
            {
                "code": "from sklearn.feature_selection import SelectKBest, f_classif\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    \n    selector = SelectKBest(score_func=f_classif, k='all')\n    selector.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    selected_features = selector.get_support(indices=True)\n    \n    v_raw_score = scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "2501"
            }
        ],
        "26": [
            {
                "code": "from sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    \n    v_score_weight = np.clip(v_score_weight, 1e-5, None)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    selector = SelectKBest(score_func=f_classif, k='all')\n    selector.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    selected_features = selector.get_support(indices=True)\n    \n    v_raw_score = scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n    v_raw_score = np.clip(v_raw_score, 0, None)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "2601"
            }
        ],
        "27": [],
        "28": [
            {
                "code": "from sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    selector = VarianceThreshold(threshold=0.1)\n    selected_features = selector.fit(scaled_data).get_support(indices=True)\n    \n    v_raw_score = scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "2801"
            }
        ],
        "29": [
            {
                "code": "from sklearn.ensemble import VotingRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = np.zeros(scaled_data.shape[0])\n    \n    model1 = GradientBoostingRegressor()\n    model2 = GradientBoostingRegressor()\n    \n    models = VotingRegressor(estimators=[('model1', model1), ('model2', model2)])\n    models.fit(scaled_data, np.zeros(scaled_data.shape[0]))  # Dummy target for fitting\n    \n    v_raw_score = models.predict(scaled_data)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "2901"
            }
        ],
        "30": [
            {
                "code": "from sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    log_transformer = FunctionTransformer(np.log1p, validate=True)\n    transformed_data = log_transformer.fit_transform(adata[:, gene_list].X.toarray())\n    \n    selector = VarianceThreshold(threshold=0.1)\n    selected_features = selector.fit(transformed_data).get_support(indices=True)\n    \n    v_raw_score = transformed_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXX.py",
                "accuracy": 0.11342464853011806,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.060\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "3001"
            }
        ],
        "31": [
            {
                "code": "from sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    selector = VarianceThreshold(threshold=0.1)\n    selected_features = selector.fit(scaled_data).get_support(indices=True)\n    \n    kf = KFold(n_splits=5, shuffle=True, random_state=42)\n    v_raw_score = np.zeros(scaled_data.shape[0])\n    \n    for train_index, test_index in kf.split(scaled_data):\n        X_train, X_test = scaled_data[train_index], scaled_data[test_index]\n        v_raw_score[test_index] += X_test[:, selected_features].dot(v_score_weight[selected_features])\n    \n    v_raw_score /= 5\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "3101"
            }
        ],
        "32": [],
        "33": [],
        "34": [
            {
                "code": "from sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n    \n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    \n    v_score_weight = v_score_weight / np.sum(v_score_weight) if np.sum(v_score_weight) > 0 else v_score_weight\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    selector = VarianceThreshold(threshold=0.1)\n    selected_features = selector.fit(scaled_data).get_support(indices=True)\n    \n    v_raw_score = scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n    \n    v_raw_score = np.clip(v_raw_score, 0, None)\n    \n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "3401"
            }
        ],
        "35": [
            {
                "code": "from sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = np.clip(v_score_weight / v_score_weight.sum(), 0, None)\n\n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    selector = VarianceThreshold(threshold=0.1)\n    selected_features = selector.fit(scaled_data).get_support(indices=True)\n\n    v_raw_score = np.maximum(0, scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1]))\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "3501"
            }
        ],
        "36": [],
        "37": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "3701"
            }
        ],
        "38": [],
        "39": [],
        "40": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "4001"
            }
        ],
        "41": [],
        "42": [],
        "43": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = np.clip(v_score_weight / v_score_weight.sum(), 0, None)\n\n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = np.maximum(0, scaled_data.dot(v_score_weight).reshape([-1]))\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "4301"
            }
        ],
        "44": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = np.maximum(v_score_weight, 1e-6)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(v_raw_score, 0)\n\n    print(f\"Final Evaluation Metrics:\\nScore Range: {v_raw_score.min()} to {v_raw_score.max()}\\nMean Score: {v_raw_score.mean()}\\nScore Weights: {v_score_weight}\")\n    \n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "Final Evaluation Metrics:\nScore Range: 0.007690932507912335 to 0.7876511573898086\nMean Score: 0.24347676899401013\nScore Weights: [0.00026988 0.00131097 0.00078147 0.00045703 0.00147624 0.00082339\n 0.00061313 0.0016012  0.0010479  0.00063299 0.00035939 0.00237759\n 0.0013257  0.00081164 0.00241862 0.00162449 0.00165707 0.00065168\n 0.00038209 0.00118353 0.0007514  0.00097109 0.00055582 0.00144231\n 0.00044076 0.00105146 0.00043403 0.00189347 0.00102325 0.00264497\n 0.0009648  0.00077389 0.00107153 0.0016945  0.00180745 0.00117799\n 0.0018556  0.00097627 0.00168822 0.0017366  0.00117793 0.00133143\n 0.00165179 0.0008577  0.00088482 0.00165662 0.00150766 0.00195987\n 0.00057415 0.00089941 0.00060139 0.00205502 0.00100152 0.00090389\n 0.00041265 0.00151537 0.00101449 0.0007369  0.00199955 0.0015178\n 0.00090186 0.00131923 0.00083345 0.00035311 0.00024461 0.00143899\n 0.00050975 0.0007677  0.00220367 0.00134408 0.00082726 0.0003069\n 0.00030085 0.0023314  0.00067377 0.00044666 0.00216622 0.00095547\n 0.00093105 0.00076328 0.00043228 0.00088254 0.00055654 0.00114777\n 0.00094827 0.00166763 0.00093145 0.00090102 0.00104245 0.0023737\n 0.00119133 0.00048611 0.00215682 0.00018669 0.00024101 0.00018624\n 0.0008174  0.00185798 0.00030289 0.0004745  0.00046758 0.00159527\n 0.00125359 0.00056638 0.00062043 0.00026071 0.00049166 0.00021621\n 0.00032771 0.00024334 0.0008737  0.0003164  0.00121121 0.00158459\n 0.00225199 0.00049942 0.00134856 0.00141152 0.00100955 0.00114711\n 0.00139016 0.00114717 0.00139953 0.00127118 0.00072226 0.00080372\n 0.00048225 0.0004022  0.00068405 0.0004117  0.00067182 0.00047139\n 0.0026683  0.00173287 0.00177265 0.00037689 0.0010033  0.00097836\n 0.00053711 0.00064185 0.00118247 0.0028631  0.00224535 0.00245075\n 0.00038999 0.00094918 0.00085559 0.00116925 0.00095553 0.00134216\n 0.00093741 0.00091299 0.00061848 0.00174122 0.00107886 0.00118078\n 0.00050344 0.00138769 0.00221128 0.00042585 0.00099316 0.00028486\n 0.00074921 0.00096363 0.00080007 0.00116241 0.00104982 0.0006254",
                "lineage": "4401"
            }
        ],
        "45": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    \n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "4501"
            }
        ],
        "46": [],
        "47": [],
        "48": [],
        "49": [],
        "50": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = np.clip(v_score_weight, 1e-5, None)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "5001"
            }
        ],
        "51": [],
        "52": [],
        "53": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(scaled_data, np.ones(scaled_data.shape[0])) \n    selector = SelectFromModel(model, prefit=True)\n    selected_features = selector.transform(scaled_data)\n\n    v_raw_score = selected_features.dot(v_score_weight[:selected_features.shape[1]]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "5301"
            }
        ],
        "54": [
            {
                "code": "from sklearn.preprocessing import RobustScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = RobustScaler(with_centering=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X.toarray())\n    \n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXX.py",
                "accuracy": 0.11285822910199601,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.350, combined=0.175\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "5401"
            }
        ],
        "55": [],
        "56": [],
        "57": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / (np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values) + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight *= np.array(gene_weight)\n    v_score_weight = np.clip(v_score_weight, 1e-5, None)\n    v_score_weight /= v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X.A if hasattr(adata[:, gene_list].X, 'A') else adata[:, gene_list].X\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.33807885469179344,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.520, combined=0.260\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "5701"
            }
        ],
        "58": [],
        "59": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = np.clip(v_score_weight, 1e-5, None)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n    \n    v_raw_score = np.maximum(0, scaled_data.dot(v_score_weight).reshape([-1]))\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXX.py",
                "accuracy": 0.2654839113163631,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.588, combined=0.294\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "5901"
            }
        ],
        "60": [],
        "61": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "6101"
            }
        ],
        "62": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.clip(v_raw_score, 0, None)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "6201"
            }
        ],
        "63": [],
        "64": [
            {
                "code": "from sklearn.preprocessing import RobustScaler\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = RobustScaler(with_centering=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.11285822910199601,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.350, combined=0.175\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "6401"
            }
        ],
        "65": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import VotingRegressor\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "6501"
            }
        ],
        "66": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "6601"
            }
        ],
        "67": [],
        "68": [],
        "69": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import SelectFromModel\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    feature_selector = SelectFromModel(RandomForestRegressor(n_estimators=100))\n    feature_selector.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    selected_features = feature_selector.get_support(indices=True)\n\n    v_raw_score = scaled_data[:, selected_features].dot(v_score_weight[selected_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "6901"
            }
        ],
        "70": [],
        "71": [],
        "72": [],
        "73": [],
        "74": [
            {
                "code": "from sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaler = StandardScaler(with_mean=False)\n    scaled_data = scaler.fit_transform(adata[:, gene_list].X)\n\n    model = RandomForestRegressor()\n    model.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    selector = SelectFromModel(model, prefit=True)\n    selected_features = selector.transform(scaled_data)\n\n    v_raw_score = selected_features.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "7401"
            }
        ],
        "75": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "7501"
            }
        ],
        "76": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "7601"
            }
        ],
        "77": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nimport time\nimport tracemalloc\n\ndef tuso_model(adata, gene_list, gene_weight):\n    start_time = time.time()\n    tracemalloc.start()\n    \n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight *= np.array(gene_weight)\n    v_score_weight = np.maximum(1e-5, v_score_weight)\n    v_score_weight /= v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n    \n    current, peak = tracemalloc.get_traced_memory()\n    tracemalloc.stop()\n    \n    print(f\"Time taken: {time.time() - start_time:.4f} seconds\")\n    print(f\"Memory usage: Current={current / 10**6:.4f}MB; Peak={peak / 10**6:.4f}MB\")\n    \n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "Time taken: 0.0265 seconds\nMemory usage: Current=5.0193MB; Peak=9.8604MB",
                "lineage": "7701"
            }
        ],
        "78": [],
        "79": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nfrom sklearn.feature_selection import SelectKBest, f_regression\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    selector = SelectKBest(score_func=f_regression, k=int(len(gene_list) * 0.75))\n    selected_features = selector.fit_transform(scaled_data, np.zeros(scaled_data.shape[0]))\n\n    v_raw_score = selected_features.dot(v_score_weight[:selected_features.shape[1]]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.32781050537180817,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.536, combined=0.268\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "7901"
            }
        ],
        "80": [],
        "81": [
            {
                "code": "from sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import VotingRegressor\nfrom sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    base_regressor = BaggingRegressor(n_estimators=10, random_state=42)\n    voting_regressor = VotingRegressor(estimators=[('bagging', base_regressor)], weights=[1])\n\n    v_raw_score = voting_regressor.fit(scaled_data, np.zeros(scaled_data.shape[0])).predict(scaled_data)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "8101"
            }
        ],
        "82": [],
        "83": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    pathway_enrichment_scores = np.random.rand(scaled_data.shape[0])\n    if hasattr(scaled_data, \"toarray\"):\n        scaled_data = scaled_data.toarray()\n    scaled_data = scaled_data * pathway_enrichment_scores[:, np.newaxis]\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.10707939732342846,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.199, combined=0.099\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "8301"
            }
        ],
        "84": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = np.maximum(0, scaled_data.dot(v_score_weight).reshape([-1]))\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "8401"
            }
        ],
        "85": [],
        "86": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import SelectFromModel\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    model = RandomForestRegressor()\n    model.fit(scaled_data, np.zeros(scaled_data.shape[0])) \n    selector = SelectFromModel(model, prefit=True)\n    selected_features = selector.transform(scaled_data)\n\n    v_raw_score = selected_features.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "8601"
            }
        ],
        "87": [],
        "88": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "8801"
            }
        ],
        "89": [],
        "90": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "9001"
            }
        ],
        "91": [],
        "92": [],
        "93": [],
        "94": [],
        "95": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return np.log1p(X + 1e-4)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.8067566351057839,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "9501"
            }
        ],
        "96": [],
        "97": [],
        "98": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return np.log1p(X + 1e-4)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.7059029757692827,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "9801"
            }
        ],
        "99": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    if \"PRIOR_KNOWLEDGE_GENES\" in adata.uns[\"SCDRS_PARAM\"]:\n        prior_knowledge_genes = adata.uns[\"SCDRS_PARAM\"][\"PRIOR_KNOWLEDGE_GENES\"]\n        prior_weights = np.where(np.isin(gene_list, prior_knowledge_genes), 1.5, 1)\n        v_raw_score *= prior_weights\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "9901"
            }
        ],
        "100": [],
        "101": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom sklearn.model_selection import KFold\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(variance_stabilizing_transformation, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    kf = KFold(n_splits=5)\n    v_raw_score = np.zeros(scaled_data.shape[0])\n\n    for train_index, test_index in kf.split(scaled_data):\n        X_train, X_test = scaled_data[train_index], scaled_data[test_index]\n        v_raw_score[test_index] = X_test.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "10101"
            }
        ],
        "102": [
            {
                "code": "from sklearn.feature_selection import SelectKBest, f_classif\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def variance_stabilizing_transformation(X):\n        return np.log1p(X)\n\n    scaled_data = variance_stabilizing_transformation(adata[:, gene_list].X)\n\n    selector = SelectKBest(score_func=f_classif, k='all')\n    selected_data = selector.fit_transform(scaled_data, np.zeros(scaled_data.shape[0]))\n\n    v_raw_score = selected_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "10201"
            }
        ],
        "103": [],
        "104": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "10401"
            }
        ],
        "105": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    def custom_scaling(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return np.log1p(X + 1e-4)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.7059029757692827,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "10501"
            }
        ],
        "106": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    threshold = np.percentile(v_raw_score, 95)\n    v_raw_score[v_raw_score < threshold] = 0\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.2442968178991823,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.033, FDR=0.000, F1=0.064, AUPRC=0.356, combined=0.210\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "10601"
            }
        ],
        "107": [],
        "108": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "10801"
            }
        ],
        "109": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom scipy.sparse import issparse\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        if issparse(X):\n            return X.multiply(1 + 1e-4).log1p()\n        else:\n            return np.log1p(X + 1e-4)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.8067638874306025,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "10901"
            }
        ],
        "110": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    min_score = np.min(v_raw_score)\n    v_raw_score = v_raw_score - min_score + 1e-2\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "11001"
            }
        ],
        "111": [],
        "112": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    pathway_enrichment_scores = np.zeros(adata.shape[0])\n    pathways = adata.uns[\"SCDRS_PARAM\"].get(\"pathways\", [])\n    for pathway in pathways:\n        pathway_genes = adata.uns[\"SCDRS_PARAM\"][\"pathway_genes\"][pathway]\n        pathway_weight = np.sum(v_score_weight[np.isin(gene_list, pathway_genes)])\n        pathway_enrichment_scores += pathway_weight * np.sum(adata[:, pathway_genes].X, axis=1)\n\n    scaled_data = np.log1p(pathway_enrichment_scores.reshape(-1, 1))\n\n    v_raw_score = scaled_data.flatten()\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "11201"
            }
        ],
        "113": [],
        "114": [],
        "115": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nfrom sklearn.ensemble import RandomForestRegressor\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    feature_selector = RandomForestRegressor()\n    feature_selector.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    important_features = feature_selector.feature_importances_ > 0\n\n    v_raw_score = scaled_data[:, important_features].dot(v_score_weight[important_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "11501"
            }
        ],
        "116": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    pca = PCA(n_components=2, random_state=42)\n    reduced_data = pca.fit_transform(scaled_data)\n\n    v_raw_score = reduced_data.dot(v_score_weight[:2]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.04420921902161481,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.116, combined=0.058\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "11601"
            }
        ],
        "117": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.ensemble import VotingRegressor\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    bagging_regressor = BaggingRegressor()\n    v_raw_score = bagging_regressor.fit(scaled_data, np.zeros(scaled_data.shape[0])).predict(scaled_data)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "11701"
            }
        ],
        "118": [],
        "119": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    selector = VarianceThreshold(threshold=0.1)\n    high_variance_data = selector.fit_transform(scaled_data)\n\n    if isinstance(high_variance_data, np.ndarray):\n        v_raw_score = high_variance_data.dot(v_score_weight[:high_variance_data.shape[1]]).reshape([-1])\n    else:\n        v_raw_score = high_variance_data.toarray().dot(v_score_weight[:high_variance_data.shape[1]]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.26389915139216025,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.214, FDR=0.759, F1=0.227, AUPRC=0.209, combined=0.218\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "11901"
            }
        ],
        "120": [],
        "121": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score[v_raw_score < np.percentile(v_raw_score, 95)] = 0\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.2442968178991823,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.033, FDR=0.000, F1=0.064, AUPRC=0.356, combined=0.210\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "12101"
            }
        ],
        "122": [],
        "123": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom tqdm import tqdm\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return np.log1p(X + 1e-4)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    for i in tqdm(range(len(v_raw_score)), desc=\"Calculating Scores\"):\n        if i % (len(v_raw_score) // 10) == 0:\n            print(f\"Progress: {i / len(v_raw_score) * 100:.2f}% - Current Score: {v_raw_score[i]:.4f}\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.7059029757692827,
                "model_info": "Progress: 0.00% - Current Score: 0.0286\nProgress: 10.00% - Current Score: 0.0223\nProgress: 20.00% - Current Score: 0.0360\nProgress: 30.00% - Current Score: 0.0520\nProgress: 40.00% - Current Score: 0.0432\nProgress: 50.00% - Current Score: 0.0288\nProgress: 60.00% - Current Score: 0.0359\nProgress: 70.00% - Current Score: 0.0271\nProgress: 80.00% - Current Score: 0.0338\nProgress: 90.00% - Current Score: 0.0261",
                "lineage": "12301"
            }
        ],
        "124": [],
        "125": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return np.log1p(np.maximum(0, X))\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "12501"
            }
        ],
        "126": [],
        "127": [],
        "128": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return np.log1p(X + 1e-4)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = np.maximum(0, scaled_data.dot(v_score_weight).reshape([-1]))\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.7059029757692827,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "12801"
            }
        ],
        "129": [],
        "130": [],
        "131": [],
        "132": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom scipy.sparse import issparse\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        if issparse(X):\n            return np.log1p(X.maximum(0).A + 1e-4)\n        return np.log1p(np.maximum(0, X + 1e-4))\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.7059029757692827,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "13201"
            }
        ],
        "133": [],
        "134": [],
        "135": [],
        "136": [],
        "137": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "13701"
            }
        ],
        "138": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nimport logging\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    logging.info(\"Computed v_score_weight: %s\", v_score_weight)\n\n    def custom_scaling(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return np.log1p(X + 1e-4)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    logging.info(\"Scaled data shape: %s\", scaled_data.shape)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    logging.info(\"Computed raw scores for %d cells\", len(v_raw_score))\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.7059029757692827,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "13801"
            }
        ],
        "139": [],
        "140": [],
        "141": [],
        "142": [],
        "143": [],
        "144": [],
        "145": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom scipy.stats import zscore\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        if X.ndim == 1:\n            X = X.reshape(-1, 1)\n        return zscore(X, axis=0)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X.toarray() if hasattr(adata[:, gene_list].X, 'toarray') else adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.38105236478039145,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "14501"
            }
        ],
        "146": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return X.A / np.sum(X.A, axis=1)[:, np.newaxis]\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.18742649832411784,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.323, combined=0.161\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "14601"
            }
        ],
        "147": [],
        "148": [],
        "149": [],
        "150": [],
        "151": [],
        "152": [
            {
                "code": "import numpy as np\nimport pandas as pd\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    if \"pathway_enrichment\" in adata.uns:\n        pathway_enrichment_scores = adata.uns[\"pathway_enrichment\"][gene_list].sum(axis=1).values\n        v_score_weight = v_score_weight * pathway_enrichment_scores\n        v_score_weight = v_score_weight / v_score_weight.sum()\n\n    v_raw_score = adata[:, gene_list].X.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "15201"
            }
        ],
        "153": [],
        "154": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.power(X.toarray(), 2)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.07615234552238731,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=1.000, F1=0.000, AUPRC=0.105, combined=0.052\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "15401"
            }
        ],
        "155": [],
        "156": [
            {
                "code": "from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    model = RandomForestRegressor(n_estimators=100)\n    model.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    feature_importances = model.feature_importances_\n    \n    selected_features = np.argsort(feature_importances)[-10:]  # Select top 10 features\n    scaled_data_selected = scaled_data[:, selected_features]\n\n    v_raw_score = scaled_data_selected.dot(v_score_weight[selected_features]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.1043092634797087,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.005, FDR=0.980, F1=0.009, AUPRC=0.130, combined=0.069\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "15601"
            }
        ],
        "157": [],
        "158": [],
        "159": [],
        "160": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    def custom_scaling(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return np.log1p(X + 1e-5)\n\n    scaled_data = custom_scaling(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.maximum(0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "16001"
            }
        ],
        "161": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nimport logging\nfrom scipy.sparse import issparse\n\ndef tuso_model(adata, gene_list, gene_weight):\n    logging.basicConfig(level=logging.INFO)\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    def custom_scaling(X):\n        if issparse(X):\n            X = X.toarray()\n        return np.log1p(np.maximum(0, X + 1e-5))\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    logging.info(f\"Gene List: {gene_list}\")\n    logging.info(f\"Gene Weights: {gene_weight}\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067593843059271,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "16101"
            }
        ],
        "162": [],
        "163": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    def custom_scaling(X):\n        if hasattr(X, 'toarray'):\n            X = X.toarray()\n        return X ** 2\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.07615234552238731,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=1.000, F1=0.000, AUPRC=0.105, combined=0.052\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "16301"
            }
        ],
        "164": [],
        "165": [],
        "166": [],
        "167": [],
        "168": [],
        "169": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom sklearn.utils import resample\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    bootstrapped_scores = []\n    for _ in range(100):\n        X_resampled = resample(scaled_data)\n        v_raw_score = X_resampled.dot(v_score_weight).reshape([-1])\n        bootstrapped_scores.append(v_raw_score)\n\n    v_raw_score = np.mean(bootstrapped_scores, axis=0)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.058835683041888624,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=1.000, F1=0.000, AUPRC=0.115, combined=0.058\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "16901"
            }
        ],
        "170": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nimport logging\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    logging.info(f'Trainable vs Frozen Parameters Ratio: {np.sum(v_score_weight > 0)} / {len(v_score_weight)}')\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "17001"
            }
        ],
        "171": [],
        "172": [],
        "173": [],
        "174": [],
        "175": [],
        "176": [],
        "177": [],
        "178": [],
        "179": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    if hasattr(adata, 'raw') and adata.raw is not None:\n        scaled_data = np.log1p(np.maximum(0, adata.raw[:, gene_list].X.A if hasattr(adata.raw[:, gene_list].X, 'A') else adata.raw[:, gene_list].X))\n    else:\n        scaled_data = np.log1p(np.maximum(0, adata[:, gene_list].X.A if hasattr(adata[:, gene_list].X, 'A') else adata[:, gene_list].X))\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    print(f\"Parameter Change Magnitude: {np.abs(np.diff(v_raw_score)).mean()}\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "Parameter Change Magnitude: 0.024980245638896562",
                "lineage": "17901"
            }
        ],
        "180": [],
        "181": [],
        "182": [],
        "183": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return X\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "18301"
            }
        ],
        "184": [],
        "185": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.509, combined=0.255\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "18501"
            }
        ],
        "186": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    if hasattr(adata, 'X') and np.issubdtype(adata.X.dtype, np.number):\n        scaled_data = np.log1p(np.maximum(0, adata[:, gene_list].X.A if hasattr(adata[:, gene_list].X, 'A') else adata[:, gene_list].X))\n    else:\n        scaled_data = np.log1p(np.maximum(0, adata[:, gene_list].X))\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "18601"
            }
        ],
        "187": [],
        "188": [],
        "189": [],
        "190": [],
        "191": [],
        "192": [],
        "193": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    validation_metrics = {\n        \"mean_score\": np.mean(v_raw_score),\n        \"std_score\": np.std(v_raw_score),\n        \"max_score\": np.max(v_raw_score),\n        \"min_score\": np.min(v_raw_score)\n    }\n    print(validation_metrics)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "{'mean_score': 0.05571761431982719, 'std_score': 0.024867747563007508, 'max_score': 0.13102908207175798, 'min_score': 0.00281106539650291}",
                "lineage": "19301"
            }
        ],
        "194": [],
        "195": [],
        "196": [],
        "197": [],
        "198": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\nfrom sklearn.feature_selection import SelectKBest, f_regression\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    selected_features = SelectKBest(score_func=f_regression, k=int(len(gene_list) * 0.75)).fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    scaled_data_selected = selected_features.transform(scaled_data)\n\n    if hasattr(scaled_data_selected, 'toarray'):\n        scaled_data_selected = scaled_data_selected.toarray()\n\n    v_raw_score = scaled_data_selected.dot(v_score_weight[:scaled_data_selected.shape[1]]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.32781050537180817,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.536, combined=0.268\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "19801"
            }
        ],
        "199": [],
        "200": [],
        "201": [],
        "202": [],
        "203": [],
        "204": [],
        "205": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.where(v_raw_score < np.percentile(v_raw_score, 95), 0, v_raw_score)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.2442968178991823,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.033, FDR=0.000, F1=0.064, AUPRC=0.356, combined=0.210\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "20501"
            }
        ],
        "206": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return X\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = (v_raw_score - np.min(v_raw_score)) + 1e-2\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "20601"
            }
        ],
        "207": [
            {
                "code": "from sklearn.ensemble import BaggingRegressor, VotingRegressor\nfrom sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    bagging_model = BaggingRegressor()\n    bagging_model.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    v_raw_score = bagging_model.predict(scaled_data)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "20701"
            }
        ],
        "208": [],
        "209": [],
        "210": [
            {
                "code": "import numpy as np\nimport torch\nimport torch.nn as nn\n\nclass SimpleNN(nn.Module):\n    def __init__(self, input_dim):\n        super(SimpleNN, self).__init__()\n        self.fc1 = nn.Linear(input_dim, 64)\n        self.fc2 = nn.Linear(64, 32)\n        self.fc3 = nn.Linear(32, 1)\n        self.activation = nn.ReLU()\n\n    def forward(self, x):\n        x = self.activation(self.fc1(x))\n        x = self.activation(self.fc2(x))\n        return self.fc3(x)\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    scaled_data = np.log1p(adata[:, gene_list].X.toarray())\n\n    model = SimpleNN(input_dim=scaled_data.shape[1])\n    model.eval()\n    with torch.no_grad():\n        input_tensor = torch.tensor(scaled_data, dtype=torch.float32)\n        v_raw_score = model(input_tensor).numpy().reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.0698814722129072,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.167, combined=0.083\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "21001"
            }
        ],
        "211": [],
        "212": [],
        "213": [],
        "214": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "21401"
            }
        ],
        "215": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    print(\"High-level configuration: Gene list size = {}, Gene weight size = {}\".format(len(gene_list), len(gene_weight) if gene_weight is not None else 0))\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    if hasattr(adata, 'X') and np.any(adata.X.toarray() < 0):\n        scaled_data = np.log1p(np.maximum(0, adata[:, gene_list].X.toarray()))\n    else:\n        scaled_data = adata[:, gene_list].X.toarray()\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return np.maximum(0, v_raw_score), v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "High-level configuration: Gene list size = 1000, Gene weight size = 1000",
                "lineage": "21501"
            }
        ],
        "216": [
            {
                "code": "import numpy as np\nfrom scipy.stats import zscore\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    scaled_data = zscore(adata[:, gene_list].X.toarray(), axis=0, ddof=1)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.38105236478039145,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "21601"
            }
        ],
        "217": [],
        "218": [],
        "219": [],
        "220": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return X\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.clip(v_raw_score, 0, None)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "22001"
            }
        ],
        "221": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    cell_type_specific_patterns = adata.uns.get(\"cell_type_specific_patterns\", {})\n    cell_type_weights = np.array([cell_type_specific_patterns.get(gene, 1) for gene in gene_list])\n    v_score_weight *= cell_type_weights\n    v_score_weight /= v_score_weight.sum()\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "22101"
            }
        ],
        "222": [],
        "223": [],
        "224": [
            {
                "code": "from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return np.log1p(X)\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    rf = RandomForestRegressor(n_estimators=100)\n    rf.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    importances = rf.feature_importances_\n    indices = np.argsort(importances)[-10:]\n\n    selected_features = scaled_data[:, indices]\n    v_raw_score = selected_features.dot(v_score_weight[indices]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.1043092634797087,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.005, FDR=0.980, F1=0.009, AUPRC=0.130, combined=0.069\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "22401"
            }
        ],
        "225": [],
        "226": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "22601"
            }
        ],
        "227": [
            {
                "code": "from sklearn.preprocessing import FunctionTransformer\nimport numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    def custom_scaling(X):\n        return X\n\n    transformer = FunctionTransformer(custom_scaling, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = v_raw_score - v_raw_score.min() + 1e-2\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "22701"
            }
        ],
        "228": [],
        "229": [],
        "230": [],
        "231": [],
        "232": [],
        "233": [],
        "234": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "23401"
            }
        ],
        "235": [
            {
                "code": "import numpy as np\nfrom sklearn.utils import resample\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    threshold = np.percentile(v_raw_score, 95)\n    v_raw_score[v_raw_score < threshold] = 0\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.2442968178991823,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.033, FDR=0.000, F1=0.064, AUPRC=0.356, combined=0.210\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "23501"
            }
        ],
        "236": [],
        "237": [],
        "238": [
            {
                "code": "import numpy as np\nfrom sklearn.utils import resample\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    threshold = np.percentile(v_raw_score, 95)\n    v_raw_score[v_raw_score < threshold] = 0\n\n    v_raw_score = resample(v_raw_score, n_samples=len(v_raw_score), replace=True)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.06095624988440721,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.125, combined=0.062\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "23801"
            }
        ],
        "239": [],
        "240": [],
        "241": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    if hasattr(scaled_data, 'toarray'):\n        scaled_data = scaled_data.toarray()\n    v_raw_score = np.maximum(0, scaled_data).dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.509, combined=0.255\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "24101"
            }
        ],
        "242": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X.toarray())\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "24201"
            }
        ],
        "243": [],
        "244": [],
        "245": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = StandardScaler(with_mean=False).fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.38105218395547014,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "24501"
            }
        ],
        "246": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X.A / adata[:, gene_list].X.A.sum(axis=1)[:, np.newaxis]\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.18742649832411784,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.323, combined=0.161\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "24601"
            }
        ],
        "247": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    print(f\"Gene List: {gene_list}\")\n    print(f\"Gene Weights: {gene_weight}\")\n    print(f\"Variance Weights: {v_score_weight}\")\n    print(f\"Raw Scores: {v_raw_score}\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "Gene List: ['0610007C21Rik', '0610007N19Rik', '0610007P22Rik', '1190002H23Rik', '1600010M07Rik', '1600027N09Rik', '1700017B05Rik', '1700029J07Rik', '1700052N19Rik', '1700123O20Rik', '1810006K21Rik', '1810007I06Rik', '1810032O08Rik', '1810033B17Rik', '1810044D09Rik', '2210404O09Rik', '2210408I21Rik', '2310003C23Rik', '2310016M24Rik', '2310022B05Rik', '2310035K24Rik', '2410089E03Rik', '2510002D24Rik', '2610203C20Rik', '2810422J05Rik', '2810468N07Rik', '2810474O19Rik', '3110007F17Rik', '3110062M04Rik', '4632434I11Rik', '4921531C22Rik', '4930471M23Rik', '4930481A15Rik', '4930549G23Rik', '4932416H05Rik', '4933406I18Rik', '4933407K13Rik', '5330417C22Rik', '5430411K18Rik', '5430421N21Rik', '6330407A03Rik', '6430531B16Rik', '6820431F20Rik', '8430419L09Rik', 'A130040M12Rik', 'A330035P11Rik', 'AI450353', 'AI504432', 'AI837181', 'AU019823', 'Aagab', 'Abca13', 'Abcb7', 'Abcc3', 'Abcf1', 'Acad12', 'Acer2', 'Acot1', 'Acsl6', 'Actg2', 'Actn1', 'Adamts12', 'Adap1', 'Add1', 'Adipor1', 'Adora1', 'Adss', 'Aen', 'Ager', 'Agr2', 'Ahctf1', 'Aip', 'Ak2', 'Akap6', 'Akirin2', 'Akr7a5', 'Aldh1l2', 'Aldh3a1', 'Alg11', 'Alg14', 'Alg5', 'Alg8', 'Amfr', 'Amica1', 'Ampd3', 'Angptl7', 'Ankrd26', 'Ankrd9', 'Ano1', 'Ano9', 'Aoah', 'Apeh', 'Aqp8', 'Arf4', 'Arf6', 'Arhgdib', 'Arhgef10', 'Arhgef19', 'Arl1', 'Arl8a', 'Armc1', 'Asb5', 'Ascl2', 'Asf1a', 'Asns', 'Atf4', 'Atf7ip', 'Atp1b3', 'Atp2b1', 'Atp6ap2', 'Atp6v0a2', 'Atp6v0c', 'Atxn7l3', 'B130006D01Rik', 'B3galt2', 'B3gat3', 'B430010I23Rik', 'B430212C06Rik', 'B430306N03Rik', 'B630005N14Rik', 'BC002230', 'BC022687', 'BC027231', 'BC031353', 'BC035044', 'Batf', 'Baz1b', 'Bcam', 'Bcat2', 'Bckdk', 'Bcl11a', 'Bcl7c', 'Bcmo1', 'Bdh2', 'Bdkrb1', 'Becn1', 'Bloc1s3', 'Bnipl', 'Bola2', 'Btbd9', 'C030034I22Rik', 'C1rb', 'C430049B03Rik', 'Cacna1g', 'Calm3', 'Capn10', 'Card10', 'Card11', 'Card6', 'Card9', 'Carm1', 'Cbr2', 'Ccdc127', 'Ccdc141', 'Ccdc21', 'Ccdc69', 'Ccdc85b', 'Ccdc92', 'Ccl4', 'Ccndbp1', 'Ccrl2', 'Cct8', 'Cd109', 'Cd180', 'Cd248', 'Cd274', 'Cd28', '",
                "lineage": "24701"
            }
        ],
        "248": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    if hasattr(scaled_data, 'toarray'):\n        scaled_data = scaled_data.toarray()\n    scaled_data = np.maximum(0, scaled_data)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.509, combined=0.255\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "24801"
            }
        ],
        "249": [],
        "250": [],
        "251": [],
        "252": [],
        "253": [],
        "254": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.509, combined=0.255\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "25401"
            }
        ],
        "255": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    if hasattr(scaled_data, 'toarray'):\n        scaled_data = scaled_data.toarray()\n\n    model = RandomForestRegressor(n_estimators=100)\n    model.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    feature_importances = model.feature_importances_\n\n    top_features_idx = np.argsort(feature_importances)[-10:]\n    scaled_data = scaled_data[:, top_features_idx]\n\n    v_raw_score = scaled_data.dot(v_score_weight[:scaled_data.shape[1]]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.08551906628382237,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=1.000, F1=0.000, AUPRC=0.137, combined=0.068\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "25501"
            }
        ],
        "256": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score[v_raw_score < np.percentile(v_raw_score, 95)] = 0\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.14761773648358545,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.279, combined=0.139\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "25601"
            }
        ],
        "257": [],
        "258": [],
        "259": [],
        "260": [],
        "261": [],
        "262": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = FunctionTransformer(func=lambda x: np.log1p(x), validate=False).fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "26201"
            }
        ],
        "263": [],
        "264": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.509, combined=0.255\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "26401"
            }
        ],
        "265": [],
        "266": [],
        "267": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    scaled_data = StandardScaler(with_mean=False).fit_transform(np.log1p(adata[:, gene_list].X))\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.6838893198820116,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.431, FDR=0.025, F1=0.598, AUPRC=0.904, combined=0.751\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "26701"
            }
        ],
        "268": [],
        "269": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.558, combined=0.279\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "26901"
            }
        ],
        "270": [
            {
                "code": "import numpy as np\nfrom scipy.stats import zscore\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = zscore(adata[:, gene_list].X.toarray(), axis=0, nan_policy='omit')\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.38105236478039145,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "27001"
            }
        ],
        "271": [],
        "272": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    print(f\"Cross-validation mean score: {np.mean(v_raw_score)}, std: {np.std(v_raw_score)}\")\n    \n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.3734202597006851,
                "model_info": "Cross-validation mean score: 0.0859461746276321, std: 0.03147240992362125",
                "lineage": "27201"
            }
        ],
        "273": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = StandardScaler(with_mean=False).fit_transform(np.log1p(adata[:, gene_list].X))\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.6838893198820116,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.431, FDR=0.025, F1=0.598, AUPRC=0.904, combined=0.751\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "27301"
            }
        ],
        "274": [],
        "275": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = FunctionTransformer(np.log1p).fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "27501"
            }
        ],
        "276": [],
        "277": [],
        "278": [],
        "279": [],
        "280": [],
        "281": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    raw_data = adata[:, gene_list].X\n    if hasattr(raw_data, 'toarray'):\n        raw_data = raw_data.toarray()\n    scaled_data = StandardScaler(with_mean=False).fit_transform(np.log1p(raw_data))\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.6838893198820116,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.431, FDR=0.025, F1=0.598, AUPRC=0.904, combined=0.751\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "28101"
            }
        ],
        "282": [],
        "283": [],
        "284": [
            {
                "code": "import numpy as np\nimport torch\nimport torch.nn as nn\n\nclass SimpleNN(nn.Module):\n    def __init__(self, input_size):\n        super(SimpleNN, self).__init__()\n        self.fc1 = nn.Linear(input_size, 64)\n        self.fc2 = nn.Linear(64, 32)\n        self.fc3 = nn.Linear(32, 1)\n\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = torch.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X.toarray())\n\n    model = SimpleNN(input_size=len(gene_list))\n    model.eval()\n    with torch.no_grad():\n        v_raw_score = model(torch.tensor(scaled_data, dtype=torch.float32)).numpy().reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.05064694319534422,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.107, combined=0.054\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "28401"
            }
        ],
        "285": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    misclassified_instances = np.where(v_raw_score < 0.5)[0]\n    predicted_probabilities = v_raw_score[misclassified_instances]\n    print(\"Misclassified Instances:\", misclassified_instances)\n    print(\"Predicted Probabilities:\", predicted_probabilities)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "Misclassified Instances: [   0    1    2 ... 2997 2998 2999]\nPredicted Probabilities: [0.04995987 0.07096306 0.09743332 ... 0.09066744 0.03599108 0.06103748]",
                "lineage": "28501"
            }
        ],
        "286": [],
        "287": [
            {
                "code": "import numpy as np\nfrom sklearn.metrics import confusion_matrix\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    if not np.all(np.isfinite(v_raw_score)):\n        print(\"Diagnostics: Data does not meet i.i.d. assumptions.\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.509, combined=0.255\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "28701"
            }
        ],
        "288": [],
        "289": [],
        "290": [],
        "291": [],
        "292": [],
        "293": [],
        "294": [],
        "295": [],
        "296": [],
        "297": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    print(\"Feature Importances:\", v_score_weight)\n    \n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "Feature Importances: [0.00026988 0.00131097 0.00078147 0.00045703 0.00147624 0.00082339\n 0.00061313 0.0016012  0.0010479  0.00063299 0.00035939 0.00237759\n 0.0013257  0.00081164 0.00241862 0.00162449 0.00165707 0.00065168\n 0.00038209 0.00118353 0.0007514  0.00097109 0.00055582 0.00144231\n 0.00044076 0.00105146 0.00043403 0.00189347 0.00102325 0.00264497\n 0.0009648  0.00077389 0.00107153 0.0016945  0.00180745 0.00117799\n 0.0018556  0.00097627 0.00168822 0.0017366  0.00117793 0.00133143\n 0.00165179 0.0008577  0.00088482 0.00165662 0.00150766 0.00195987\n 0.00057415 0.00089941 0.00060139 0.00205502 0.00100152 0.00090389\n 0.00041265 0.00151537 0.00101449 0.0007369  0.00199955 0.0015178\n 0.00090186 0.00131923 0.00083345 0.00035311 0.00024461 0.00143899\n 0.00050975 0.0007677  0.00220367 0.00134408 0.00082726 0.0003069\n 0.00030085 0.0023314  0.00067377 0.00044666 0.00216622 0.00095547\n 0.00093105 0.00076328 0.00043228 0.00088254 0.00055654 0.00114777\n 0.00094827 0.00166763 0.00093145 0.00090102 0.00104245 0.0023737\n 0.00119133 0.00048611 0.00215682 0.00018669 0.00024101 0.00018624\n 0.0008174  0.00185798 0.00030289 0.0004745  0.00046758 0.00159527\n 0.00125359 0.00056638 0.00062043 0.00026071 0.00049166 0.00021621\n 0.00032771 0.00024334 0.0008737  0.0003164  0.00121121 0.00158459\n 0.00225199 0.00049942 0.00134856 0.00141152 0.00100955 0.00114711\n 0.00139016 0.00114717 0.00139953 0.00127118 0.00072226 0.00080372\n 0.00048225 0.0004022  0.00068405 0.0004117  0.00067182 0.00047139\n 0.0026683  0.00173287 0.00177265 0.00037689 0.0010033  0.00097836\n 0.00053711 0.00064185 0.00118247 0.0028631  0.00224535 0.00245075\n 0.00038999 0.00094918 0.00085559 0.00116925 0.00095553 0.00134216\n 0.00093741 0.00091299 0.00061848 0.00174122 0.00107886 0.00118078\n 0.00050344 0.00138769 0.00221128 0.00042585 0.00099316 0.00028486\n 0.00074921 0.00096363 0.00080007 0.00116241 0.00104982 0.00062548\n 0.00020355 0.00038995 0.00060192 0.00067023 0.00103789 0.00077371\n 0.00044296 0.00091    0.00027616 0.001",
                "lineage": "29701"
            }
        ],
        "298": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    print(f\"Performance Snapshot: Raw Score Mean: {np.mean(v_raw_score)}, Raw Score Std: {np.std(v_raw_score)}\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "Performance Snapshot: Raw Score Mean: 0.07243644636000476, Raw Score Std: 0.027438909530386742",
                "lineage": "29801"
            }
        ],
        "299": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef variance_stabilizing_transformation(X):\n    return np.log1p(X)\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    transformer = FunctionTransformer(variance_stabilizing_transformation)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "29901"
            }
        ],
        "300": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n    scaled_data = np.log1p(scaled_data)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    top_k_importances = np.argsort(v_score_weight)[-10:]\n    print(\"Top-k feature importances:\", v_score_weight[top_k_importances])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "Top-k feature importances: [0.0026683  0.00267641 0.00268603 0.002691   0.00271557 0.00273891\n 0.00276353 0.00279942 0.0028631  0.00286337]",
                "lineage": "30001"
            }
        ],
        "301": [],
        "302": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    if hasattr(adata, 'raw') and adata.raw is not None:\n        scaled_data = np.log1p(np.clip(adata.raw[:, gene_list].X.toarray(), 0, None))\n    else:\n        scaled_data = np.log1p(np.clip(adata[:, gene_list].X.toarray(), 0, None))\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "30201"
            }
        ],
        "303": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X.toarray() if hasattr(adata[:, gene_list].X, 'toarray') else adata[:, gene_list].X\n    scaled_data = np.clip(scaled_data, a_min=0, a_max=None)\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    print(f\"Final Evaluation Metrics: Raw Score Mean: {np.mean(v_raw_score)}, Raw Score Std: {np.std(v_raw_score)}\")\n    \n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "Final Evaluation Metrics: Raw Score Mean: 0.07243644636000476, Raw Score Std: 0.027438909530386742",
                "lineage": "30301"
            }
        ],
        "304": [
            {
                "code": "import numpy as np\nfrom scipy.stats import zscore\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = zscore(adata[:, gene_list].X.toarray(), axis=0)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.38105236478039145,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.003, FDR=0.000, F1=0.005, AUPRC=0.703, combined=0.354\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "30401"
            }
        ],
        "305": [],
        "306": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X.toarray() if hasattr(adata[:, gene_list].X, 'toarray') else adata[:, gene_list].X\n    scaled_data = np.clip(scaled_data, a_min=0, a_max=None)\n    v_raw_score = np.log1p(scaled_data).dot(v_score_weight).reshape([-1])\n    \n    low_confidence_threshold = 0.1\n    low_confidence_percentage = np.mean(v_raw_score < low_confidence_threshold) * 100\n    print(f\"Low-confidence predictions: {low_confidence_percentage:.2f}%\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "Low-confidence predictions: 98.90%",
                "lineage": "30601"
            }
        ],
        "307": [],
        "308": [],
        "309": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n    scaled_data[scaled_data < 0] = 0\n    scaled_data = np.log1p(scaled_data)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "30901"
            }
        ],
        "310": [],
        "311": [],
        "312": [
            {
                "code": "import numpy as np\nfrom scipy.sparse import issparse\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    if issparse(adata[:, gene_list].X):\n        scaled_data = adata[:, gene_list].X.toarray()\n    else:\n        scaled_data = adata[:, gene_list].X\n\n    if np.any(scaled_data <= 0):\n        scaled_data = np.log1p(scaled_data)\n\n    v_raw_score = np.dot(scaled_data, v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "31201"
            }
        ],
        "313": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X).A if hasattr(adata[:, gene_list].X, 'A') else np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "31301"
            }
        ],
        "314": [],
        "315": [],
        "316": [],
        "317": [],
        "318": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    transformer = FunctionTransformer(np.log1p, validate=False)\n    scaled_data = transformer.fit_transform(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "31801"
            }
        ],
        "319": [],
        "320": [],
        "321": [],
        "322": [
            {
                "code": "import numpy as np\nimport pandas as pd\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    if hasattr(adata, 'raw') and adata.raw is not None:\n        scaled_data = adata.raw[:, gene_list].X\n    else:\n        scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    nan_count = np.isnan(v_raw_score).sum()\n    inf_count = np.isinf(v_raw_score).sum()\n    print(f\"NaN count: {nan_count}, Inf count: {inf_count}\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.33264361051162183,
                "model_info": "NaN count: 0, Inf count: 0",
                "lineage": "32201"
            }
        ],
        "323": [],
        "324": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(np.clip(adata[:, gene_list].X.toarray(), a_min=0, a_max=None))\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    print(f\"Partial dependence estimates for top features: {gene_list}, Weights: {v_score_weight}\")\n    \n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "Partial dependence estimates for top features: ['0610007C21Rik', '0610007N19Rik', '0610007P22Rik', '1190002H23Rik', '1600010M07Rik', '1600027N09Rik', '1700017B05Rik', '1700029J07Rik', '1700052N19Rik', '1700123O20Rik', '1810006K21Rik', '1810007I06Rik', '1810032O08Rik', '1810033B17Rik', '1810044D09Rik', '2210404O09Rik', '2210408I21Rik', '2310003C23Rik', '2310016M24Rik', '2310022B05Rik', '2310035K24Rik', '2410089E03Rik', '2510002D24Rik', '2610203C20Rik', '2810422J05Rik', '2810468N07Rik', '2810474O19Rik', '3110007F17Rik', '3110062M04Rik', '4632434I11Rik', '4921531C22Rik', '4930471M23Rik', '4930481A15Rik', '4930549G23Rik', '4932416H05Rik', '4933406I18Rik', '4933407K13Rik', '5330417C22Rik', '5430411K18Rik', '5430421N21Rik', '6330407A03Rik', '6430531B16Rik', '6820431F20Rik', '8430419L09Rik', 'A130040M12Rik', 'A330035P11Rik', 'AI450353', 'AI504432', 'AI837181', 'AU019823', 'Aagab', 'Abca13', 'Abcb7', 'Abcc3', 'Abcf1', 'Acad12', 'Acer2', 'Acot1', 'Acsl6', 'Actg2', 'Actn1', 'Adamts12', 'Adap1', 'Add1', 'Adipor1', 'Adora1', 'Adss', 'Aen', 'Ager', 'Agr2', 'Ahctf1', 'Aip', 'Ak2', 'Akap6', 'Akirin2', 'Akr7a5', 'Aldh1l2', 'Aldh3a1', 'Alg11', 'Alg14', 'Alg5', 'Alg8', 'Amfr', 'Amica1', 'Ampd3', 'Angptl7', 'Ankrd26', 'Ankrd9', 'Ano1', 'Ano9', 'Aoah', 'Apeh', 'Aqp8', 'Arf4', 'Arf6', 'Arhgdib', 'Arhgef10', 'Arhgef19', 'Arl1', 'Arl8a', 'Armc1', 'Asb5', 'Ascl2', 'Asf1a', 'Asns', 'Atf4', 'Atf7ip', 'Atp1b3', 'Atp2b1', 'Atp6ap2', 'Atp6v0a2', 'Atp6v0c', 'Atxn7l3', 'B130006D01Rik', 'B3galt2', 'B3gat3', 'B430010I23Rik', 'B430212C06Rik', 'B430306N03Rik', 'B630005N14Rik', 'BC002230', 'BC022687', 'BC027231', 'BC031353', 'BC035044', 'Batf', 'Baz1b', 'Bcam', 'Bcat2', 'Bckdk', 'Bcl11a', 'Bcl7c', 'Bcmo1', 'Bdh2', 'Bdkrb1', 'Becn1', 'Bloc1s3', 'Bnipl', 'Bola2', 'Btbd9', 'C030034I22Rik', 'C1rb', 'C430049B03Rik', 'Cacna1g', 'Calm3', 'Capn10', 'Card10', 'Card11', 'Card6', 'Card9', 'Carm1', 'Cbr2', 'Ccdc127', 'Ccdc141', 'Ccdc21', 'Ccdc69', 'Ccdc85b', 'Ccdc92', 'Ccl4', 'Ccndbp1', 'Ccrl2', 'Cct8', 'Cd109', ",
                "lineage": "32401"
            }
        ],
        "325": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import SelectKBest, f_regression\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = StandardScaler(with_mean=False).fit_transform(np.log1p(adata[:, gene_list].X))\n    \n    selector = SelectKBest(score_func=f_regression, k='all')\n    selected_data = selector.fit_transform(scaled_data, np.zeros(scaled_data.shape[0]))\n\n    v_raw_score = selected_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.6838893198820116,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.431, FDR=0.025, F1=0.598, AUPRC=0.904, combined=0.751\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "32501"
            }
        ],
        "326": [],
        "327": [],
        "328": [],
        "329": [],
        "330": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(np.clip(adata[:, gene_list].X.toarray(), a_min=0, a_max=None))\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.7059075468930188,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.332, FDR=0.024, F1=0.496, AUPRC=0.866, combined=0.681\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "33001"
            }
        ],
        "331": [],
        "332": [
            {
                "code": "import numpy as np\nfrom sklearn.utils import resample\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    threshold = np.percentile(v_raw_score, 95)\n    v_raw_score[v_raw_score < threshold] = 0\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.14761773648358545,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.279, combined=0.139\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "33201"
            }
        ],
        "333": [],
        "334": [],
        "335": [],
        "336": [],
        "337": [],
        "338": [
            {
                "code": "import numpy as np\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    selector = VarianceThreshold(threshold=0.1)\n    scaled_data = selector.fit_transform(scaled_data)\n\n    if hasattr(scaled_data, 'A'):\n        scaled_data = scaled_data.A\n\n    v_raw_score = scaled_data.dot(v_score_weight[:scaled_data.shape[1]]).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.26389915139216025,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.214, FDR=0.759, F1=0.227, AUPRC=0.209, combined=0.218\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "33801"
            }
        ],
        "339": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import VotingRegressor, BaggingRegressor\nfrom sklearn.linear_model import LinearRegression\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    base_regressor = LinearRegression()\n    bagging_regressor = BaggingRegressor(estimator=base_regressor, n_estimators=10)\n    bagging_regressor.fit(scaled_data, np.zeros(scaled_data.shape[0]))\n    v_raw_score = bagging_regressor.predict(scaled_data)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "33901"
            }
        ],
        "340": [],
        "341": [],
        "342": [],
        "343": [],
        "344": [],
        "345": [],
        "346": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X.A) if hasattr(adata[:, gene_list].X, 'A') else np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "34601"
            }
        ],
        "347": [],
        "348": [],
        "349": [],
        "350": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X.toarray() if hasattr(adata[:, gene_list].X, 'toarray') else adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    \n    print(f\"Best hyper-parameter configuration: Gene weights - {gene_weight}, Score weights - {v_score_weight}\")\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "Best hyper-parameter configuration: Gene weights - [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0",
                "lineage": "35001"
            }
        ],
        "351": [],
        "352": [],
        "353": [],
        "354": [],
        "355": [],
        "356": [],
        "357": [],
        "358": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    if hasattr(adata[:, gene_list].X, 'toarray'):\n        scaled_data = np.log1p(adata[:, gene_list].X.toarray())\n    else:\n        scaled_data = np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8067594360620646,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.473, FDR=0.028, F1=0.636, AUPRC=0.905, combined=0.770\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "35801"
            }
        ],
        "359": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = np.power(scaled_data.dot(v_score_weight).reshape([-1]), 2)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXX.py",
                "accuracy": 0.8135651674086395,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.456, FDR=0.024, F1=0.622, AUPRC=0.906, combined=0.764\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "35901"
            }
        ],
        "360": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(np.clip(adata[:, gene_list].X.toarray(), 0, None))\n\n    v_raw_score = np.power(scaled_data.dot(v_score_weight).reshape([-1]), 2)\n\n    print(\"Checkpoint: Score computation completed. Gene list processed:\", gene_list)\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXXX.py",
                "accuracy": 0.8135651674086395,
                "model_info": "Checkpoint: Score computation completed. Gene list processed: ['0610007C21Rik', '0610007N19Rik', '0610007P22Rik', '1190002H23Rik', '1600010M07Rik', '1600027N09Rik', '1700017B05Rik', '1700029J07Rik', '1700052N19Rik', '1700123O20Rik', '1810006K21Rik', '1810007I06Rik', '1810032O08Rik', '1810033B17Rik', '1810044D09Rik', '2210404O09Rik', '2210408I21Rik', '2310003C23Rik', '2310016M24Rik', '2310022B05Rik', '2310035K24Rik', '2410089E03Rik', '2510002D24Rik', '2610203C20Rik', '2810422J05Rik', '2810468N07Rik', '2810474O19Rik', '3110007F17Rik', '3110062M04Rik', '4632434I11Rik', '4921531C22Rik', '4930471M23Rik', '4930481A15Rik', '4930549G23Rik', '4932416H05Rik', '4933406I18Rik', '4933407K13Rik', '5330417C22Rik', '5430411K18Rik', '5430421N21Rik', '6330407A03Rik', '6430531B16Rik', '6820431F20Rik', '8430419L09Rik', 'A130040M12Rik', 'A330035P11Rik', 'AI450353', 'AI504432', 'AI837181', 'AU019823', 'Aagab', 'Abca13', 'Abcb7', 'Abcc3', 'Abcf1', 'Acad12', 'Acer2', 'Acot1', 'Acsl6', 'Actg2', 'Actn1', 'Adamts12', 'Adap1', 'Add1', 'Adipor1', 'Adora1', 'Adss', 'Aen', 'Ager', 'Agr2', 'Ahctf1', 'Aip', 'Ak2', 'Akap6', 'Akirin2', 'Akr7a5', 'Aldh1l2', 'Aldh3a1', 'Alg11', 'Alg14', 'Alg5', 'Alg8', 'Amfr', 'Amica1', 'Ampd3', 'Angptl7', 'Ankrd26', 'Ankrd9', 'Ano1', 'Ano9', 'Aoah', 'Apeh', 'Aqp8', 'Arf4', 'Arf6', 'Arhgdib', 'Arhgef10', 'Arhgef19', 'Arl1', 'Arl8a', 'Armc1', 'Asb5', 'Ascl2', 'Asf1a', 'Asns', 'Atf4', 'Atf7ip', 'Atp1b3', 'Atp2b1', 'Atp6ap2', 'Atp6v0a2', 'Atp6v0c', 'Atxn7l3', 'B130006D01Rik', 'B3galt2', 'B3gat3', 'B430010I23Rik', 'B430212C06Rik', 'B430306N03Rik', 'B630005N14Rik', 'BC002230', 'BC022687', 'BC027231', 'BC031353', 'BC035044', 'Batf', 'Baz1b', 'Bcam', 'Bcat2', 'Bckdk', 'Bcl11a', 'Bcl7c', 'Bcmo1', 'Bdh2', 'Bdkrb1', 'Becn1', 'Bloc1s3', 'Bnipl', 'Bola2', 'Btbd9', 'C030034I22Rik', 'C1rb', 'C430049B03Rik', 'Cacna1g', 'Calm3', 'Capn10', 'Card10', 'Card11', 'Card6', 'Card9', 'Carm1', 'Cbr2', 'Ccdc127', 'Ccdc141', 'Ccdc21', 'Ccdc69', 'Ccdc85b', 'Ccdc92', 'Ccl4', 'Ccndbp1', 'Ccrl2', 'C",
                "lineage": "36001"
            }
        ],
        "361": [],
        "362": [],
        "363": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = adata[:, gene_list].X\n\n    v_raw_score = np.power(scaled_data.dot(v_score_weight).reshape([-1]), 2)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.3464935835347182,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.547, combined=0.273\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "36301"
            }
        ],
        "364": [],
        "365": [],
        "366": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X.A) if hasattr(adata[:, gene_list].X, 'A') else np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = np.power(scaled_data.dot(v_score_weight).reshape([-1]), 2)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.7150029988844882,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.316, FDR=0.017, F1=0.478, AUPRC=0.878, combined=0.678\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "36601"
            }
        ],
        "367": [],
        "368": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-4)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X.toarray() if hasattr(adata[:, gene_list].X, 'toarray') else adata[:, gene_list].X)\n\n    v_raw_score = np.power(scaled_data.dot(v_score_weight).reshape([-1]), 2)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.7150029988844882,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.316, FDR=0.017, F1=0.478, AUPRC=0.878, combined=0.678\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "36801"
            }
        ],
        "369": [],
        "370": [],
        "371": [],
        "372": [
            {
                "code": "import numpy as np\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n    \n    scaled_data = np.log1p(adata[:, gene_list].X)\n\n    v_raw_score = scaled_data.dot(v_score_weight).reshape([-1])\n    v_raw_score = np.power(v_raw_score, 2)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr6_integrated_analysis_XXXXXXXXX.py",
                "accuracy": 0.8135651674086395,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.456, FDR=0.024, F1=0.622, AUPRC=0.906, combined=0.764\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "37201"
            }
        ],
        "373": [],
        "374": [],
        "375": [],
        "376": []
    },
    "4": {
        "2": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    X = adata[:, gene_list].X\n    X = StandardScaler(with_mean=False).fit_transform(X)\n    \n    selector = VarianceThreshold(threshold=0.1)\n    X_selected = selector.fit_transform(X)\n\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X_selected, np.zeros(X_selected.shape[0]))\n    v_raw_score = model.predict(X_selected)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr2_random_forest_with_gX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "241"
            }
        ],
        "3": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / v_score_weight.sum()\n\n    X = adata[:, gene_list].X\n    var_thresh = VarianceThreshold(threshold=0.1)\n    X_filtered = var_thresh.fit_transform(X)\n\n    model = RandomForestRegressor(n_estimators=100, random_state=42)\n    model.fit(X_filtered, np.zeros(X_filtered.shape[0]))\n    v_raw_score = model.predict(X_filtered)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr2_random_forest_with_gX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "341"
            }
        ],
        "4": [
            {
                "code": "import numpy as np\nfrom sklearn.ensemble import GradientBoostingRegressor\n\ndef tuso_model(adata, gene_list, gene_weight):\n    gene_list = list(gene_list)\n    gene_weight = list(gene_weight)\n\n    df_gene = adata.uns[\"SCDRS_PARAM\"][\"GENE_STATS\"]\n    v_score_weight = 1 / np.sqrt(df_gene.loc[gene_list, \"var_tech\"].values + 1e-2)\n\n    if gene_weight is not None:\n        v_score_weight = v_score_weight * np.array(gene_weight)\n    v_score_weight = v_score_weight / (v_score_weight.sum() + 1e-10)\n\n    X = adata[:, gene_list].X\n    gb_model = GradientBoostingRegressor()\n    gb_model.fit(X, np.zeros(X.shape[0]))\n    v_raw_score = gb_model.predict(X) * v_score_weight.sum()\n\n    v_raw_score = np.clip(v_raw_score, 0, None)\n\n    return v_raw_score, v_score_weight",
                "file": "/projects/zhanglab/users/alistair/tusoml/scdrs_24hr1_gradient_boosting_wiX.py",
                "accuracy": 0.06066666666666667,
                "model_info": "tuso_model_end\n[es=0.15, overlap=0.25, trait=sim_0_0.25_0.15] power=0.000, FDR=0.000, F1=0.000, AUPRC=0.121, combined=0.061\nsim_1_0.25_0.15\ntuso_model_start",
                "lineage": "441"
            }
        ]
    }
}