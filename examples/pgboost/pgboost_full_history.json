{
    "-1": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initial.py",
                "accuracy": 0.9987913305893907,
                "model_info": "",
                "lineage": "pgboost_24hr_3_initial"
            }
        ],
        "1": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['tss_distance'] = abs(all_data['tss'] - all_data['snp_position'])\n    all_data['tes_distance'] = abs(all_data['tes'] - all_data['snp_position'])\n    all_data['closest_tss_binary'] = all_data['closest_tss'].astype(int)\n\n    predictors += ['snp_gene_distance_squared', 'tss_distance', 'tes_distance', 'closest_tss_binary']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9153829709620378,
                "model_info": "",
                "lineage": "1-11"
            }
        ]
    },
    "0": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = (all_data['snp_position'] - all_data['tss']).abs()\n    all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n    \n    predictors += ['snp_gene_distance', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_30_logistic_regression_.py",
                "accuracy": 0.8509599127616998,
                "model_info": "",
                "lineage": "pgboost_24hr_30_logistic_regression_"
            }
        ],
        "1": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = (all_data['snp_position'] - all_data['tss']).abs()\n    all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_30_logistic_regression_X.py",
                "accuracy": 0.848344377454749,
                "model_info": "",
                "lineage": "101"
            }
        ],
        "2": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.8548693542003865,
                "model_info": "",
                "lineage": "201"
            }
        ],
        "3": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['tss_distance'] = abs(all_data['tss'] - all_data['snp_position'])\n    all_data['tes_distance'] = abs(all_data['tes'] - all_data['snp_position'])\n    all_data['closest_tss_binary'] = all_data['closest_tss'].astype(int)\n    all_data['snp_gene_distance_cubed'] = all_data['snp_gene_distance'] ** 3\n    all_data['tss_distance_squared'] = all_data['tss_distance'] ** 2\n\n    predictors += ['snp_gene_distance_squared', 'tss_distance', 'tes_distance', 'closest_tss_binary', 'snp_gene_distance_cubed', 'tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9153829709620378,
                "model_info": "",
                "lineage": "301"
            }
        ],
        "4": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXXXX.py",
                "accuracy": 0.8309255138522994,
                "model_info": "",
                "lineage": "401"
            }
        ],
        "5": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    distance_features = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = [p for p in predictors if p not in distance_features]\n    predictors += distance_features\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "501"
            }
        ],
        "6": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, classification_report\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'snp_gene_distance_squared', 'snp_gene_distance_log']\n    predictors = predictors + [pred for pred in additional_predictors if pred in all_data.columns]\n\n    missing_value_tolerance = all_data[predictors].isnull().mean().max()\n    print(f\"Missing value tolerance: {missing_value_tolerance:.2f}\")\n\n    predictions_dfs = []\n    all_y_true = []\n    all_y_pred = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n        y_true = all_data.loc[pred_mask, 'positive'].values\n        y_pred = (pred_prob > 0.5).astype(int)\n        all_y_true.extend(y_true)\n        all_y_pred.extend(y_pred)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    print(\"Confusion Matrix:\")\n    print(confusion_matrix(all_y_true, all_y_pred))\n    print(\"Classification Report:\")\n    print(classification_report(all_y_true, all_y_pred))\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXXXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "Missing value tolerance: 1.00\nConfusion Matrix:\n[[      0 6740046  101271]\n [      0   38128    1815]\n [      0    7381    2496]]\nClassification Report:\n              precision    recall  f1-score   support\n\n          -1       0.00      0.00      0.00   6841317\n           0       0.01      0.95      0.01     39943\n           1       0.02      0.25      0.04      9877\n\n    accuracy                           0.01   6891137\n   macro avg       0.01      0.40      0.02   6891137\nweighted avg       0.00      0.01      0.00   6891137",
                "lineage": "601"
            }
        ],
        "7": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    all_data['gene_expression'] = all_data['gene'].apply(lambda x: 0)  # Placeholder for get_gene_expression\n    all_data['gene_expression_normalized'] = (all_data['gene_expression'] - all_data['gene_expression'].mean()) / all_data['gene_expression'].std()\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_abs'] = all_data['snp_gene_distance'].abs()\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance_abs'])\n    all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'].replace(0, np.nan))\n    all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].mean()) / all_data['snp_gene_distance'].std()\n\n    all_data = all_data[all_data['snp_gene_distance'].notnull() & all_data['snp_gene_distance_normalized'].notnull()]\n\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'gene_expression_normalized', 'snp_gene_distance_squared', 'snp_gene_distance_abs', 'snp_gene_distance_log', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXXXXX.py",
                "accuracy": 0.860053406871853,
                "model_info": "",
                "lineage": "701"
            }
        ],
        "8": [],
        "9": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = list(set(predictors) | set(additional_predictors))\n    \n    if 'adaptive_distance' in all_data.columns:\n        predictors.append('adaptive_distance')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_39_3D_chromatin_interacXX.py",
                "accuracy": 0.9884999199048536,
                "model_info": "",
                "lineage": "901"
            }
        ],
        "10": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_abs'] = all_data['snp_gene_distance'].abs()\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance_abs'])\n    all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'].replace(0, np.nan))\n    all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].mean()) / all_data['snp_gene_distance'].std()\n\n    all_data = all_data[all_data['snp_gene_distance'].notnull() & all_data['snp_gene_distance_normalized'].notnull()]\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score', 'snp_gene_distance_squared', 'snp_gene_distance_abs', 'snp_gene_distance_log', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n    \n    nan_count = all_data.isna().sum().sum()\n    inf_count = np.isinf(all_data.select_dtypes(include=[np.number])).sum().sum()\n    print(f\"NaN count: {nan_count}, Inf count: {inf_count}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        low_confidence_threshold = 0.5\n        low_confidence_percentage = np.mean(pred_prob < low_confidence_threshold) * 100\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        chrom_df[\"low_confidence_percentage\"] = low_confidence_percentage\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXXXXXX.py",
                "accuracy": 0.860053406871853,
                "model_info": "NaN count: 156537660, Inf count: 0",
                "lineage": "1001"
            }
        ],
        "11": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_abs' not in all_data.columns:\n        all_data['snp_gene_distance_abs'] = 0\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors + ['snp_gene_distance_abs']].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors + ['snp_gene_distance_abs']].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9987913305893907,
                "model_info": "",
                "lineage": "1101"
            }
        ],
        "12": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    distance_features = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors += distance_features\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "1201"
            }
        ],
        "13": [],
        "14": [
            {
                "code": "import pandas as pd\nimport numpy as np\nfrom typing import List\nimport xgboost as xgb\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    required_predictors = ['closest_tss', 'snp_gene_distance', 'snp_position', 'tss', 'tes']\n    missing_predictors = [pred for pred in required_predictors if pred not in all_data.columns]\n    predictors += missing_predictors\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"lambda\": 1,\n            \"alpha\": 0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9987913305893907,
                "model_info": "",
                "lineage": "1401"
            }
        ],
        "15": [],
        "16": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.8344125900904453,
                "model_info": "",
                "lineage": "1601"
            }
        ],
        "17": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data.apply(lambda row: abs(row['snp_position'] - row['tss']), axis=1)\n    all_data['closest_tss'] = all_data.apply(lambda row: 1 if row['snp_position'] == row['tss'] else 0, axis=1)\n    all_data['tes'] = all_data['tss'] + 1000  # Example placeholder for transcription end site\n    all_data['snp_position'] = all_data['snp_position']\n    all_data['tss'] = all_data['tss']\n\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.8488307478884486,
                "model_info": "",
                "lineage": "1701"
            }
        ],
        "18": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors.append('closest_tss')\n    predictors.append('snp_gene_distance')\n    predictors.append('snp_position')\n    predictors.append('tss')\n    predictors.append('tes')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9884999199048536,
                "model_info": "",
                "lineage": "1801"
            }
        ],
        "19": [],
        "20": [],
        "21": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_linking_score' in all_data.columns:\n        predictors.append('snp_gene_linking_score')\n    if 'snp_gene_distance' in all_data.columns:\n        predictors.append('snp_gene_distance')\n    if 'closest_tss' in all_data.columns:\n        predictors.append('closest_tss')\n    if 'tes' in all_data.columns:\n        predictors.append('tes')\n    if 'snp_position' in all_data.columns:\n        predictors.append('snp_position')\n    if 'tss' in all_data.columns:\n        predictors.append('tss')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "2101"
            }
        ],
        "22": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors = predictors + ['snp_gene_distance', 'closest_tss', 'snp_position', 'tss']\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9883280701402877,
                "model_info": "",
                "lineage": "2201"
            }
        ],
        "23": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = predictors + additional_predictors\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "2301"
            }
        ],
        "24": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "2401"
            }
        ],
        "25": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "2501"
            }
        ],
        "26": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes', 'snp_position', 'tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9888532565674806,
                "model_info": "",
                "lineage": "2601"
            }
        ],
        "27": [],
        "28": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "2801"
            }
        ],
        "29": [],
        "30": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "3001"
            }
        ],
        "31": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_gene_distance_squared', 'snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "3101"
            }
        ],
        "32": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    all_data['euclidean_distance'] = np.sqrt(all_data['snp_gene_distance']**2 + all_data['closest_tss']**2)\n    all_data['cosine_similarity'] = (all_data['snp_gene_distance'] * all_data['closest_tss']) / (np.sqrt(all_data['snp_gene_distance']**2) * np.sqrt(all_data['closest_tss']**2) + 1e-6)\n    all_data['combined_distance'] = all_data['euclidean_distance'] + (1 - all_data['cosine_similarity'])\n\n    predictors += ['euclidean_distance', 'cosine_similarity', 'combined_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9997354787910969,
                "model_info": "",
                "lineage": "3201"
            }
        ],
        "33": [],
        "34": [],
        "35": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    if 'tes_distance' not in all_data.columns:\n        all_data['tes_distance'] = np.abs(all_data['tes'] - all_data['snp_position'])\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes_distance', 'snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.900392484147315,
                "model_info": "",
                "lineage": "3501"
            }
        ],
        "36": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'snp_gene_distance_abs' not in all_data.columns:\n        all_data['snp_gene_distance_abs'] = abs(all_data['snp_gene_distance'])\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance_abs']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "3601"
            }
        ],
        "37": [],
        "38": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    if 'snp_gene_distance_log' not in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance_squared', 'snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "3801"
            }
        ],
        "39": [],
        "40": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    if 'snp_gene_distance_log' not in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance_squared', 'snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "4001"
            }
        ],
        "41": [],
        "42": [],
        "43": [],
        "44": [],
        "45": [],
        "46": [],
        "47": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    \n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "4701"
            }
        ],
        "48": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    all_data['snp_gene_distance_noise'] = all_data['snp_gene_distance'] + np.random.normal(0, 0.1, size=all_data.shape[0])\n    all_data['closest_tss_noise'] = all_data['closest_tss'] + np.random.normal(0, 0.1, size=all_data.shape[0])\n    all_data['tes_noise'] = all_data['tes'] + np.random.normal(0, 0.1, size=all_data.shape[0])\n    all_data['snp_position_noise'] = all_data['snp_position'] + np.random.normal(0, 0.1, size=all_data.shape[0])\n    all_data['tss_noise'] = all_data['tss'] + np.random.normal(0, 0.1, size=all_data.shape[0])\n\n    predictors += ['snp_gene_distance_noise', 'closest_tss_noise', 'tes_noise', 'snp_position_noise', 'tss_noise']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9912552156699991,
                "model_info": "",
                "lineage": "4801"
            }
        ],
        "49": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes', 'tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9843768689895742,
                "model_info": "",
                "lineage": "4901"
            }
        ],
        "50": [],
        "51": [],
        "52": [],
        "53": [],
        "54": [],
        "55": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    if 'tes' not in all_data.columns:\n        all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes', 'snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9860082363903389,
                "model_info": "",
                "lineage": "5501"
            }
        ],
        "56": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = ((all_data['snp_position'] - all_data['tss']).abs() <= (all_data['snp_position'] - all_data['tes']).abs()).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "5601"
            }
        ],
        "57": [],
        "58": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_gene_distance', 'snp_position', 'tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"lambda\": 1,\n            \"alpha\": 0.1\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9919837621943228,
                "model_info": "",
                "lineage": "5801"
            }
        ],
        "59": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    all_data = all_data[all_data['snp_gene_distance'].notnull() & all_data['snp_gene_distance_normalized'].notnull()]\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "5901"
            }
        ],
        "60": [],
        "61": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "6101"
            }
        ],
        "62": [],
        "63": [],
        "64": [],
        "65": [],
        "66": [],
        "67": [],
        "68": [],
        "69": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data = all_data[~all_data['snp_gene_distance'].isnull()]\n\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "6901"
            }
        ],
        "70": [],
        "71": [],
        "72": [],
        "73": [],
        "74": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = all_data['snp_gene_distance'].apply(lambda x: 1 if x == 0 else 0)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "7401"
            }
        ],
        "75": [],
        "76": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    if 'tes' not in all_data.columns:\n        all_data['tes'] = all_data['snp_position'] - all_data['tss']\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9860082363903389,
                "model_info": "",
                "lineage": "7601"
            }
        ],
        "77": [],
        "78": [],
        "79": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "7901"
            }
        ],
        "80": [],
        "81": [],
        "82": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "8201"
            }
        ],
        "83": [],
        "84": [],
        "85": [],
        "86": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'chromatin_accessibility_data' in all_data.columns:\n        all_data['chromatin_accessibility'] = all_data['chromatin_accessibility_data']\n        predictors += ['chromatin_accessibility']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "8601"
            }
        ],
        "87": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9888532565674806,
                "model_info": "",
                "lineage": "8701"
            }
        ],
        "88": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nimport time\nimport resource\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    all_data['class_balance_before'] = all_data['positive'].value_counts(normalize=True).get(1, 0)\n    \n    predictions_dfs = []\n    start_time = time.time()\n    mem_usage_start = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        all_data.loc[pred_mask, 'class_balance_after'] = all_data.loc[pred_mask, 'positive'].value_counts(normalize=True).get(1, 0)\n        \n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    end_time = time.time()\n    mem_usage_end = resource.getrusage(resource.RUSAGE_SELF).ru_maxrss\n\n    print(f\"Total execution time: {end_time - start_time:.2f} seconds\")\n    print(f\"Memory usage: {mem_usage_end - mem_usage_start} KB\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "Total execution time: 34.25 seconds\nMemory usage: 0 KB",
                "lineage": "8801"
            }
        ],
        "89": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_position', 'tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.989793152478307,
                "model_info": "",
                "lineage": "8901"
            }
        ],
        "90": [],
        "91": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        misclassified = all_data.loc[pred_mask].copy()\n        misclassified['predicted_prob'] = pred_prob\n        misclassified['misclassified'] = ((pred_prob > 0.5) != misclassified['positive']).astype(int)\n        misclassified = misclassified[misclassified['misclassified'] == 1][index_cols + ['predicted_prob']]\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "9101"
            }
        ],
        "92": [],
        "93": [],
        "94": [],
        "95": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data[['snp_gene_distance', 'tss']].min(axis=1)).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9935532921643084,
                "model_info": "",
                "lineage": "9501"
            }
        ],
        "96": [],
        "97": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_position', 'tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9866242864656487,
                "model_info": "",
                "lineage": "9701"
            }
        ],
        "98": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    all_data['gene_expression'] = all_data['gene'].apply(lambda x: 0)  \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'gene_expression']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "9801"
            }
        ],
        "99": [],
        "100": [],
        "101": [],
        "102": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "10201"
            }
        ],
        "103": [],
        "104": [],
        "105": [],
        "106": [],
        "107": [],
        "108": [],
        "109": [],
        "110": [],
        "111": [],
        "112": [],
        "113": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n    all_data['snp_position_normalized'] = (all_data['snp_position'] - all_data['snp_position'].min()) / (all_data['snp_position'].max() - all_data['snp_position'].min())\n    all_data['tss_normalized'] = (all_data['tss'] - all_data['tss'].min()) / (all_data['tss'].max() - all_data['tss'].min())\n    all_data['tes_normalized'] = (all_data['tes'] - all_data['tes'].min()) / (all_data['tes'].max() - all_data['tes'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_position_normalized', 'tss_normalized', 'tes_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9897256811878733,
                "model_info": "",
                "lineage": "11301"
            }
        ],
        "114": [],
        "115": [],
        "116": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9860082363903389,
                "model_info": "",
                "lineage": "11601"
            }
        ],
        "117": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    if 'tes' not in all_data.columns:\n        all_data['tes'] = all_data['tss'] + (all_data['snp_gene_distance'] / 2)\n    \n    missing_values_count = all_data.isnull().sum()\n    all_data = all_data.fillna(0)\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9774774235366647,
                "model_info": "",
                "lineage": "11701"
            }
        ],
        "118": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'chromatin_accessibility_data' in all_data.columns:\n        predictors += ['chromatin_accessibility_data']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "11801"
            }
        ],
        "119": [],
        "120": [],
        "121": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'snp_gene_distance_abs' not in all_data.columns:\n        all_data['snp_gene_distance_abs'] = np.abs(all_data['snp_gene_distance'])\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    if 'snp_gene_distance_log' not in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance_abs', 'snp_gene_distance_squared', 'snp_gene_distance_log', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "12101"
            }
        ],
        "122": [],
        "123": [],
        "124": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    all_data['tss_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['tes_distance'] = all_data['tes'] - all_data['snp_position']\n    all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n\n    predictors += ['tss_distance', 'tes_distance', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9472975192001606,
                "model_info": "",
                "lineage": "12401"
            }
        ],
        "125": [],
        "126": [],
        "127": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nimport time\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    start_time = time.time()\n\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n        elapsed_time = time.time() - start_time\n        print(f\"Chromosome: {chrom}, Time elapsed: {elapsed_time:.2f}s\")\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "Chromosome: chr1, Time elapsed: 4.79s\nChromosome: chr10, Time elapsed: 6.00s\nChromosome: chr11, Time elapsed: 7.32s\nChromosome: chr12, Time elapsed: 8.48s\nChromosome: chr13, Time elapsed: 9.45s\nChromosome: chr14, Time elapsed: 10.49s\nChromosome: chr15, Time elapsed: 11.51s\nChromosome: chr16, Time elapsed: 12.72s\nChromosome: chr17, Time elapsed: 14.00s\nChromosome: chr18, Time elapsed: 14.92s\nChromosome: chr19, Time elapsed: 16.37s\nChromosome: chr2, Time elapsed: 17.57s\nChromosome: chr20, Time elapsed: 18.60s\nChromosome: chr21, Time elapsed: 19.53s\nChromosome: chr22, Time elapsed: 20.56s\nChromosome: chr3, Time elapsed: 21.72s\nChromosome: chr4, Time elapsed: 22.77s\nChromosome: chr5, Time elapsed: 23.85s\nChromosome: chr6, Time elapsed: 25.27s\nChromosome: chr7, Time elapsed: 26.43s\nChromosome: chr8, Time elapsed: 27.46s\nChromosome: chr9, Time elapsed: 28.55s",
                "lineage": "12701"
            }
        ],
        "128": [],
        "129": [],
        "130": [],
        "131": [],
        "132": [],
        "133": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "13301"
            }
        ],
        "134": [],
        "135": [],
        "136": [],
        "137": [],
        "138": [],
        "139": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9935532921643084,
                "model_info": "",
                "lineage": "13901"
            }
        ],
        "140": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'enhancer_promoter_interaction' in all_data.columns:\n        predictors.append('enhancer_promoter_interaction')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "14001"
            }
        ],
        "141": [],
        "142": [],
        "143": [],
        "144": [],
        "145": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.metrics import confusion_matrix\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    all_data['snp_position_gene_distance'] = all_data['snp_position'] - all_data['snp_gene_distance']\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance_squared', 'snp_gene_distance_log', 'snp_position_gene_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n        \n        pred_bin = (pred_prob > 0.5).astype(int)\n        cm = confusion_matrix(all_data.loc[pred_mask, 'positive'], pred_bin)\n        \n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    print(\"Confusion Matrix:\\n\", cm)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.990214945796523,
                "model_info": "Confusion Matrix:\n [[     0 271782   3912]\n [     0   1689     95]\n [     0    352    115]]",
                "lineage": "14501"
            }
        ],
        "146": [],
        "147": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n    all_data['snp_tss_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['snp_tes_distance'] = abs(all_data['snp_position'] - all_data['tes'])\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_tss_distance', 'snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9160455520884643,
                "model_info": "",
                "lineage": "14701"
            }
        ],
        "148": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n    all_data['tss_tes_distance'] = all_data['tes'] - all_data['tss']\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9681259208053429,
                "model_info": "",
                "lineage": "14801"
            }
        ],
        "149": [],
        "150": [],
        "151": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    skewness = all_data[predictors].apply(skew)\n    kurt = all_data[predictors].apply(kurtosis)\n    \n    all_data['skewness'] = skewness\n    all_data['kurtosis'] = kurt\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "15101"
            }
        ],
        "152": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_gene_distance', 'snp_position', 'tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"lambda\": 0.1,\n            \"alpha\": 0.1\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9834034501298602,
                "model_info": "",
                "lineage": "15201"
            }
        ],
        "153": [],
        "154": [],
        "155": [],
        "156": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'pgBoost' in all_data.columns:\n        all_data['low_confidence'] = (all_data['pgBoost'] < 0.5).astype(int)\n        low_confidence_percentage = all_data['low_confidence'].mean() * 100\n        print(f\"Percentage of low-confidence predictions: {low_confidence_percentage:.2f}%\")\n    else:\n        print(\"Warning: 'pgBoost' column not found in all_data. Skipping low confidence calculation.\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "Warning: 'pgBoost' column not found in all_data. Skipping low confidence calculation.",
                "lineage": "15601"
            }
        ],
        "157": [],
        "158": [],
        "159": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    \n    all_data['snp_position_normalized'] = (all_data['snp_position'] - all_data['snp_position'].min()) / (all_data['snp_position'].max() - all_data['snp_position'].min())\n    all_data['tss_normalized'] = (all_data['tss'] - all_data['tss'].min()) / (all_data['tss'].max() - all_data['tss'].min())\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_position_normalized', 'tss_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9806492831709284,
                "model_info": "",
                "lineage": "15901"
            }
        ],
        "160": [],
        "161": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    all_data['snp_gene_distance_mean'] = all_data['snp_gene_distance'].mean()\n    all_data['snp_gene_distance_std'] = all_data['snp_gene_distance'].std()\n    all_data['snp_gene_distance_min'] = all_data['snp_gene_distance'].min()\n    all_data['snp_gene_distance_max'] = all_data['snp_gene_distance'].max()\n\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9935532921643084,
                "model_info": "",
                "lineage": "16101"
            }
        ],
        "162": [],
        "163": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "16301"
            }
        ],
        "164": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    if 'label_distribution' not in all_data.columns:\n        all_data['label_distribution'] = all_data['positive'].value_counts(normalize=True).to_dict()\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'label_distribution']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=True)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "16401"
            }
        ],
        "165": [],
        "166": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data[['snp_gene_distance', 'tes']].min(axis=1)).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9935532921643084,
                "model_info": "",
                "lineage": "16601"
            }
        ],
        "167": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "16701"
            }
        ],
        "168": [],
        "169": [],
        "170": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "17001"
            }
        ],
        "171": [],
        "172": [],
        "173": [],
        "174": [],
        "175": [],
        "176": [],
        "177": [],
        "178": [],
        "179": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'model_assumption_warning' not in all_data.columns:\n        all_data['model_assumption_warning'] = np.where(all_data['snp_gene_distance'].count() < 100, 'Warning: Insufficient training data volume', 'Sufficient training data volume')\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    all_data['snp_gene_distance'] = all_data['snp_gene_distance'].clip(lower=0)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "17901"
            }
        ],
        "180": [],
        "181": [],
        "182": [],
        "183": [],
        "184": [],
        "185": [],
        "186": [],
        "187": [],
        "188": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_normalized'] = all_data['closest_tss'] / all_data['closest_tss'].max()\n        predictors += ['closest_tss_normalized']\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "18801"
            }
        ],
        "189": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data[['snp_gene_distance']].min(axis=1)).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance_squared', 'snp_gene_distance_log', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9935532921643084,
                "model_info": "",
                "lineage": "18901"
            }
        ],
        "190": [],
        "191": [],
        "192": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    all_data['interaction_score'] = all_data['snp_gene_distance'] * all_data['snp_gene_distance_inverse']\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'interaction_score']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "19201"
            }
        ],
        "193": [],
        "194": [],
        "195": [],
        "196": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes', 'snp_position', 'tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9888532565674806,
                "model_info": "",
                "lineage": "19601"
            }
        ],
        "197": [],
        "198": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'snp_position' not in all_data.columns:\n        all_data['snp_position'] = all_data['snp'].apply(lambda x: int(x.split('_')[1]))  # Assuming SNP format is 'snp_12345'\n    if 'tss' not in all_data.columns:\n        all_data['tss'] = all_data['gene'].apply(lambda x: int(x.split('_')[1]))  # Assuming gene format is 'gene_12345'\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_position', 'tss', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.989793152478307,
                "model_info": "",
                "lineage": "19801"
            }
        ],
        "199": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n    predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9935532921643084,
                "model_info": "",
                "lineage": "19901"
            }
        ],
        "200": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.900392484147315,
                "model_info": "",
                "lineage": "20001"
            }
        ],
        "201": [],
        "202": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance', 'closest_tss', 'snp_position', 'tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9866242864656487,
                "model_info": "",
                "lineage": "20201"
            }
        ],
        "203": [],
        "204": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_position', 'tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9866242864656487,
                "model_info": "",
                "lineage": "20401"
            }
        ],
        "205": [],
        "206": [],
        "207": [],
        "208": [],
        "209": [],
        "210": [],
        "211": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    if 'low_confidence_prediction' not in all_data.columns:\n        all_data['low_confidence_prediction'] = (all_data['snp_gene_distance'] > 1000).astype(int)\n    \n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    if 'tes' not in all_data.columns:\n        all_data['tes'] = all_data['snp_position'] + all_data['snp_gene_distance']\n    if 'tss' not in all_data.columns:\n        all_data['tss'] = all_data['snp_position'] - all_data['snp_gene_distance']\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'low_confidence_prediction', 'closest_tss', 'tes', 'tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9843768689895742,
                "model_info": "",
                "lineage": "21101"
            }
        ],
        "212": [],
        "213": [],
        "214": [],
        "215": [],
        "216": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nimport shap\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n    shap_values_list = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        explainer = shap.Explainer(bst)\n        shap_values = explainer(X_train)\n        shap_values_list.append(shap_values.values)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    shap.summary_plot(np.concatenate(shap_values_list), feature_names=predictors)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "21601"
            }
        ],
        "217": [],
        "218": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "21801"
            }
        ],
        "219": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tss', 'tes', 'snp_position']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9874517259615521,
                "model_info": "",
                "lineage": "21901"
            }
        ],
        "220": [],
        "221": [],
        "222": [],
        "223": [],
        "224": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'biological_relevance' not in all_data.columns:\n        all_data['biological_relevance'] = np.exp(-all_data['snp_gene_distance'] / 1000000)\n\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "22401"
            }
        ],
        "225": [],
        "226": [],
        "227": [],
        "228": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_gene_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "22801"
            }
        ],
        "229": [],
        "230": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    all_data['skewness'] = all_data[predictors].apply(skew, axis=0)\n    all_data['kurtosis'] = all_data[predictors].apply(kurtosis, axis=0)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "23001"
            }
        ],
        "231": [],
        "232": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_position', 'tss', 'tes', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9866242864656487,
                "model_info": "",
                "lineage": "23201"
            }
        ],
        "233": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'snp_position', 'tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.989793152478307,
                "model_info": "",
                "lineage": "23301"
            }
        ],
        "234": [],
        "235": [],
        "236": [],
        "237": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'closest_tss', 'tes', 'snp_position', 'tss']\n\n    interaction_features = all_data['snp_gene_distance'] * all_data['snp_gene_distance_inverse']\n    all_data['interaction_feature'] = interaction_features\n\n    predictors += ['interaction_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9888532565674806,
                "model_info": "",
                "lineage": "23701"
            }
        ],
        "238": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'snp_position', 'tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9866242864656487,
                "model_info": "",
                "lineage": "23801"
            }
        ],
        "239": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_normalized'] = (all_data['closest_tss'] - all_data['closest_tss'].min()) / (all_data['closest_tss'].max() - all_data['closest_tss'].min())\n        predictors += ['closest_tss_normalized']\n    \n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "23901"
            }
        ],
        "240": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'gene_expression' not in all_data.columns:\n        all_data['gene_expression'] = 0  # Placeholder for gene expression retrieval\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'gene_expression']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.0007806323392179,
                "model_info": "",
                "lineage": "24001"
            }
        ],
        "241": [],
        "242": [],
        "243": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "24301"
            }
        ],
        "244": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n        predictors += ['snp_gene_distance_squared', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "24401"
            }
        ],
        "245": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n        predictors += ['closest_tss']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 0.9160455520884643,
                "model_info": "",
                "lineage": "24501"
            }
        ],
        "246": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == all_data.groupby('gene')['snp_tss_distance'].transform('min')).astype(int)\n        predictors += ['closest_tss']\n\n    all_data['z_score'] = (all_data['positive'] - all_data['positive'].mean()) / all_data['positive'].std()\n    all_data['outlier'] = (np.abs(all_data['z_score']) > 3).astype(int)\n    predictors += ['outlier']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "24601"
            }
        ],
        "247": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns and 'tes' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['closest_tss', 'tes', 'tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9466348685898969,
                "model_info": "",
                "lineage": "24701"
            }
        ],
        "248": [],
        "249": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_normalized'] = (all_data['closest_tss'] - all_data['closest_tss'].min()) / (all_data['closest_tss'].max() - all_data['closest_tss'].min())\n        predictors += ['closest_tss_normalized']\n\n    if 'tes' in all_data.columns:\n        all_data['tes_normalized'] = (all_data['tes'] - all_data['tes'].min()) / (all_data['tes'].max() - all_data['tes'].min())\n        predictors += ['tes_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.005386457720319,
                "model_info": "",
                "lineage": "24901"
            }
        ],
        "250": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == 0).astype(int)\n        predictors += ['closest_tss']\n\n    if 'gradient_norm' not in all_data.columns:\n        all_data['gradient_norm'] = np.linalg.norm(all_data[predictors].values, axis=1)\n        predictors += ['gradient_norm']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "25001"
            }
        ],
        "251": [],
        "252": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'interaction_score' not in all_data.columns:\n        all_data['interaction_score'] = all_data['snp_gene_distance'] * all_data['snp_gene_distance_inverse']\n    predictors += ['interaction_score']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "25201"
            }
        ],
        "253": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "25301"
            }
        ],
        "254": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n    predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0005641967357364,
                "model_info": "",
                "lineage": "25401"
            }
        ],
        "255": [],
        "256": [],
        "257": [],
        "258": [],
        "259": [],
        "260": [],
        "261": [],
        "262": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    skewness = all_data[predictors].apply(skew)\n    kurt = all_data[predictors].apply(kurtosis)\n    diagnostic_info = pd.DataFrame({'skewness': skewness, 'kurtosis': kurt})\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "26201"
            }
        ],
        "263": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9160455520884643,
                "model_info": "",
                "lineage": "26301"
            }
        ],
        "264": [],
        "265": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "26501"
            }
        ],
        "266": [],
        "267": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['NaN_count'] = all_data[predictors].isna().sum(axis=1)\n    all_data['Inf_count'] = np.isinf(all_data[predictors]).sum(axis=1)\n    predictors += ['NaN_count', 'Inf_count']\n\n    all_data['label_distribution'] = all_data['positive'].value_counts(normalize=True).reindex(all_data['positive'].unique()).fillna(0)\n    predictors += ['label_distribution']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.0050183515036615,
                "model_info": "",
                "lineage": "26701"
            }
        ],
        "268": [],
        "269": [],
        "270": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'biological_relevance' not in all_data.columns:\n        all_data['biological_relevance'] = all_data['snp_gene_distance']  # Example of a biological relevance feature\n        predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "27001"
            }
        ],
        "271": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'chromatin_accessibility_data' in all_data.columns:\n        all_data['chromatin_accessibility'] = all_data['chromatin_accessibility_data']\n        predictors += ['chromatin_accessibility']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "27101"
            }
        ],
        "272": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        predictors += ['snp_gene_distance', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "27201"
            }
        ],
        "273": [],
        "274": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n    if 'tss_tes_distance' in all_data.columns:\n        predictors += ['tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "27401"
            }
        ],
        "275": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "27501"
            }
        ],
        "276": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    missing_value_tolerance = all_data.isnull().mean()\n    all_data['missing_value_tolerance'] = missing_value_tolerance\n    predictors += ['missing_value_tolerance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "27601"
            }
        ],
        "277": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_normalized'] = (all_data['closest_tss'] - all_data['closest_tss'].min()) / (all_data['closest_tss'].max() - all_data['closest_tss'].min())\n        predictors += ['closest_tss_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "27701"
            }
        ],
        "278": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictors = [p for p in predictors if p not in ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']]\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.001388451736865,
                "model_info": "",
                "lineage": "27801"
            }
        ],
        "279": [],
        "280": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "28001"
            }
        ],
        "281": [],
        "282": [],
        "283": [],
        "284": [],
        "285": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['missing_values_count'] = all_data[predictors].isnull().sum(axis=1)\n    predictors += ['missing_values_count']\n\n    all_data['latency'] = np.random.exponential(scale=0.5, size=len(all_data))\n    predictors += ['latency']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.0027667980070418,
                "model_info": "",
                "lineage": "28501"
            }
        ],
        "286": [],
        "287": [],
        "288": [],
        "289": [],
        "290": [],
        "291": [],
        "292": [],
        "293": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'enhancer_promoter_interaction' in all_data.columns:\n        predictors += ['enhancer_promoter_interaction']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "29301"
            }
        ],
        "294": [],
        "295": [],
        "296": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'tss_tes_distance' in all_data.columns:\n        predictors += ['tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "29601"
            }
        ],
        "297": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n    \n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == 0).astype(int)\n        predictors += ['closest_tss']\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "29701"
            }
        ],
        "298": [],
        "299": [],
        "300": [],
        "301": [],
        "302": [],
        "303": [],
        "304": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['tss'] == all_data['tss'].min()).astype(int)\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "30401"
            }
        ],
        "305": [],
        "306": [],
        "307": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['label_distribution'] = all_data['positive'].value_counts(normalize=True).to_dict()\n    predictors += ['label_distribution']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "30701"
            }
        ],
        "308": [],
        "309": [],
        "310": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = all_data['snp_gene_distance'] * (1 + all_data['closest_tss'])\n        predictors += ['weighted_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0048679228667565,
                "model_info": "",
                "lineage": "31001"
            }
        ],
        "311": [],
        "312": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression'] = all_data['gene_expression'].fillna(0)\n        predictors += ['gene_expression']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "31201"
            }
        ],
        "313": [],
        "314": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_normalized'] = all_data['closest_tss'] / all_data['closest_tss'].max()\n        predictors += ['closest_tss_normalized']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9160455520884643,
                "model_info": "",
                "lineage": "31401"
            }
        ],
        "315": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    correlation_matrix = all_data[predictors].corr()\n    highly_correlated_pairs = correlation_matrix[correlation_matrix.abs() > 0.8].stack().reset_index()\n    highly_correlated_pairs.columns = ['Feature 1', 'Feature 2', 'Correlation']\n    all_data['highly_correlated_features'] = highly_correlated_pairs.to_string(index=False)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "31501"
            }
        ],
        "316": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == 0).astype(int)\n    predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "31601"
            }
        ],
        "317": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n    \n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0.1,\n            \"lambda\": 1.0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.008820366064679,
                "model_info": "",
                "lineage": "31701"
            }
        ],
        "318": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n    predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "31801"
            }
        ],
        "319": [],
        "320": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "32001"
            }
        ],
        "321": [],
        "322": [],
        "323": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['adaptive_distance'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n    predictors += ['adaptive_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.005951076195332,
                "model_info": "",
                "lineage": "32301"
            }
        ],
        "324": [],
        "325": [],
        "326": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if all_data['snp_gene_distance'].isnull().any():\n        print(\"Warning: Missing values detected in 'snp_gene_distance'.\")\n    \n    missing_value_tolerance = all_data['snp_gene_distance'].isnull().sum() / len(all_data) * 100\n    print(f\"Missing value tolerance for 'snp_gene_distance': {missing_value_tolerance:.2f}%\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "Missing value tolerance for 'snp_gene_distance': 0.00%",
                "lineage": "32601"
            }
        ],
        "327": [],
        "328": [],
        "329": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "32901"
            }
        ],
        "330": [],
        "331": [],
        "332": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['NaN_count'] = all_data[predictors].isna().sum(axis=1)\n    all_data['Inf_count'] = np.isinf(all_data[predictors]).sum(axis=1)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "33201"
            }
        ],
        "333": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0.1,\n            \"lambda\": 1\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.008820366064679,
                "model_info": "",
                "lineage": "33301"
            }
        ],
        "334": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"lambda\": 0,  # L2 regularization\n            \"alpha\": 0,   # L1 regularization\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.010023846885499,
                "model_info": "",
                "lineage": "33401"
            }
        ],
        "335": [],
        "336": [],
        "337": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = all_data['snp_tss_distance'] * all_data['closest_tss']\n        predictors += ['weighted_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0034513627226604,
                "model_info": "",
                "lineage": "33701"
            }
        ],
        "338": [],
        "339": [],
        "340": [],
        "341": [],
        "342": [],
        "343": [],
        "344": [],
        "345": [],
        "346": [],
        "347": [],
        "348": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "34801"
            }
        ],
        "349": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.where(all_data['closest_tss'] == 1, all_data['snp_tss_distance'], np.nan)\n        predictors += ['adaptive_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0125382538233842,
                "model_info": "",
                "lineage": "34901"
            }
        ],
        "350": [],
        "351": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    for col in all_data[predictors].select_dtypes(include=[np.number]).columns:\n        all_data[f'{col}_skew'] = skew(all_data[col].dropna())\n        all_data[f'{col}_kurtosis'] = kurtosis(all_data[col].dropna())\n        predictors += [f'{col}_skew', f'{col}_kurtosis']\n\n    params = {\n        \"max_depth\": 10,\n        \"eta\": 0.05,\n        \"gamma\": 10,\n        \"min_child_weight\": 6,\n        \"subsample\": 0.6,\n        \"scale_pos_weight\": 1,\n        \"objective\": \"binary:logistic\",\n        \"eval_metric\": \"auc\",\n        \"nthread\": 24,\n        \"seed\": seed,\n    }\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    ece = ...  # Calculate ECE here\n    print(f\"Calibration Error Metrics (ECE): {ece}\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "Calibration Error Metrics (ECE): Ellipsis",
                "lineage": "35101"
            }
        ],
        "352": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = 0\n\n    predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "35201"
            }
        ],
        "353": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns and 'tss_tes_distance' in all_data.columns:\n        predictors += ['closest_tss', 'tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "35301"
            }
        ],
        "354": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance', 'closest_tss', 'snp_gene_distance', 'tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0037396224559088,
                "model_info": "",
                "lineage": "35401"
            }
        ],
        "355": [],
        "356": [],
        "357": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'gene_ontology_terms' not in all_data.columns:\n        all_data['gene_ontology_terms'] = all_data['gene'].apply(lambda x: None)  \n    predictors += ['gene_ontology_terms']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "35701"
            }
        ],
        "358": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"lambda\": 1,\n            \"alpha\": 0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "35801"
            }
        ],
        "359": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == all_data.groupby('gene')['snp_tss_distance'].transform('min')).astype(int)\n        predictors += ['snp_tss_distance', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 0.9990102321333567,
                "model_info": "",
                "lineage": "35901"
            }
        ],
        "360": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictors += ['closest_tss', 'tes']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.005386457720319,
                "model_info": "",
                "lineage": "36001"
            }
        ],
        "361": [],
        "362": [],
        "363": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.metrics import confusion_matrix\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['tss'] == all_data.groupby('gene')['tss'].transform('min')).astype(int)\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n    all_predictions = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        all_predictions.extend(pred_prob)\n        \n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    y_true = all_data.loc[all_data[LOO_colname].isin(chromosomes), 'positive'].values\n    y_pred = [1 if prob > 0.5 else 0 for prob in all_predictions]\n    cm = confusion_matrix(y_true, y_pred)\n    print(\"Confusion Matrix:\\n\", cm)\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "Confusion Matrix:\n [[      0 6739138  102179]\n [      0   38068    1875]\n [      0    7320    2557]]",
                "lineage": "36301"
            }
        ],
        "364": [],
        "365": [],
        "366": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression'].fillna(0, inplace=True)\n        predictors += ['gene_expression']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        all_data['gene_ontology_terms'] = all_data['gene_ontology_terms'].apply(lambda x: x if x is not None else [])\n        predictors += ['gene_ontology_terms']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "36601"
            }
        ],
        "367": [],
        "368": [],
        "369": [],
        "370": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression'].fillna(0, inplace=True)\n        predictors += ['gene_expression']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        all_data['gene_ontology_terms'].fillna(value=None, inplace=True)\n        predictors += ['gene_ontology_terms']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "37001"
            }
        ],
        "371": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictors = list(set(predictors))\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0116958797078572,
                "model_info": "",
                "lineage": "37101"
            }
        ],
        "372": [],
        "373": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == all_data.groupby('gene')['snp_tss_distance'].transform('min')).astype(int)\n    predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "37301"
            }
        ],
        "374": [],
        "375": [],
        "376": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = all_data['snp_tss_distance'] * all_data['closest_tss']\n        predictors += ['adaptive_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0034513627226604,
                "model_info": "",
                "lineage": "37601"
            }
        ],
        "377": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.metrics import confusion_matrix\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n        \n        pred_classes = (pred_prob > 0.5).astype(int)\n        cm = confusion_matrix(all_data.loc[pred_mask, 'positive'], pred_classes)\n        print(f\"Confusion Matrix for chromosome {chrom}:\\n{cm}\")\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "Confusion Matrix for chromosome chr1:\n[[     0 692434  11190]\n [     0   3846    203]\n [     0    753    261]]\nConfusion Matrix for chromosome chr10:\n[[     0 249315   3949]\n [     0   1917     94]\n [     0    337     86]]\nConfusion Matrix for chromosome chr11:\n[[     0 404918   5970]\n [     0   1975     99]\n [     0    381    165]]\nConfusion Matrix for chromosome chr12:\n[[     0 326421   4774]\n [     0   1784     88]\n [     0    370    120]]\nConfusion Matrix for chromosome chr13:\n[[     0 111376   1546]\n [     0    663     19]\n [     0    137     41]]\nConfusion Matrix for chromosome chr14:\n[[     0 208616   3043]\n [     0   1028     49]\n [     0    207     90]]\nConfusion Matrix for chromosome chr15:\n[[     0 188812   2752]\n [     0   1686     70]\n [     0    287     82]]\nConfusion Matrix for chromosome chr16:\n[[     0 337773   4716]\n [     0   1829     97]\n [     0    390    127]]\nConfusion Matrix for chromosome chr17:\n[[     0 466213   7388]\n [     0   2893    150]\n [     0    455    205]]\nConfusion Matrix for chromosome chr18:\n[[    0 83575  1353]\n [    0   534    34]\n [    0   134    35]]\nConfusion Matrix for chromosome chr19:\n[[     0 647610   9740]\n [     0   2334    158]\n [     0    479    295]]\nConfusion Matrix for chromosome chr2:\n[[     0 396188   6162]\n [     0   2803    107]\n [     0    561    116]]\nConfusion Matrix for chromosome chr20:\n[[     0 204192   3176]\n [     0   1075     76]\n [     0    218     87]]\nConfusion Matrix for chromosome chr21:\n[[     0 102828   1634]\n [     0    766     43]\n [     0    133     58]]\nConfusion Matrix for chromosome chr22:\n[[     0 209583   3283]\n [     0   1516     68]\n [     0    267    107]]\nConfusion Matrix for chromosome chr3:\n[[     0 323038   4976]\n [     0   2047     82]\n [     0    367     98]]\nConfusion Matrix for chromosome chr4:\n[[     0 196553   3289]\n [     0   1125     50]\n [     0    237     64]]\nConfusion Matrix for chromosome chr5:\n[[     0 257970   4167]\n [     0   1510     84]\n [     0    317    100]",
                "lineage": "37701"
            }
        ],
        "378": [],
        "379": [],
        "380": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n    \n    all_data['tss_snp_distance'] = np.abs(all_data['tss'] - all_data['snp_position'])\n    predictors += ['tss_snp_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "38001"
            }
        ],
        "381": [],
        "382": [],
        "383": [],
        "384": [],
        "385": [],
        "386": [],
        "387": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    skewness = all_data[predictors].apply(skew)\n    kurt = all_data[predictors].apply(kurtosis)\n    all_data['skewness'] = skewness\n    all_data['kurtosis'] = kurt\n\n    missing_counts = all_data[predictors].isnull().sum()\n    all_data['missing_counts'] = missing_counts\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "38701"
            }
        ],
        "388": [],
        "389": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"early_stopping_rounds\": 50,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "38901"
            }
        ],
        "390": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if len(all_data) < 1000:\n        print(\"Warning: Insufficient training data volume.\")\n    \n    print(f\"Dataset Statistics: {len(all_data)} samples, {len(predictors)} predictors\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "Dataset Statistics: 6891137 samples, 35 predictors",
                "lineage": "39001"
            }
        ],
        "391": [],
        "392": [],
        "393": [],
        "394": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['missing_value_tolerance'] = all_data[predictors].isnull().mean(axis=1)\n    predictors += ['missing_value_tolerance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.0050183515036615,
                "model_info": "",
                "lineage": "39401"
            }
        ],
        "395": [],
        "396": [],
        "397": [],
        "398": [],
        "399": [],
        "400": [],
        "401": [],
        "402": [],
        "403": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression'].fillna(0, inplace=True)\n        predictors += ['gene_expression']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        predictors += ['gene_ontology_terms']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "40301"
            }
        ],
        "404": [],
        "405": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n        predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "40501"
            }
        ],
        "406": [],
        "407": [],
        "408": [],
        "409": [],
        "410": [],
        "411": [],
        "412": [],
        "413": [],
        "414": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    correlation_matrix = all_data[predictors].corr().abs()\n    correlated_features = np.where((correlation_matrix > 0.8) & (correlation_matrix < 1.0))\n    for i, j in zip(*correlated_features):\n        if i < j:\n            all_data[f'correlation_{predictors[i]}_{predictors[j]}'] = correlation_matrix.iloc[i, j]\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "41401"
            }
        ],
        "415": [],
        "416": [],
        "417": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in predictors:\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "41701"
            }
        ],
        "418": [],
        "419": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == 0).astype(int)\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0,\n            \"lambda\": 1\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "41901"
            }
        ],
        "420": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'pgBoost' in all_data.columns:\n        all_data['pred_low_confidence'] = (all_data['pgBoost'] < 0.5).astype(int)\n    else:\n        all_data['pred_low_confidence'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    low_confidence_percentage = (all_data['pred_low_confidence'].sum() / len(all_data)) * 100\n    print(f\"Percentage of low-confidence predictions: {low_confidence_percentage:.2f}%\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "Percentage of low-confidence predictions: 0.00%",
                "lineage": "42001"
            }
        ],
        "421": [],
        "422": [],
        "423": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "42301"
            }
        ],
        "424": [],
        "425": [],
        "426": [],
        "427": [],
        "428": [],
        "429": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    all_data['label_distribution'] = all_data.groupby('gene')['positive'].transform(lambda x: x.value_counts(normalize=True))\n    print(\"Label distribution (class balance):\", all_data['label_distribution'].unique())\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "Label distribution (class balance): [       nan 0.00347222]",
                "lineage": "42901"
            }
        ],
        "430": [],
        "431": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['tss_distance_valid'] = np.where(all_data['tss'].notna(), 1, 0)\n    predictors += ['tss_distance_valid']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = np.where(all_data['tss_distance_valid'] == 1, 1, 0)\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "43101"
            }
        ],
        "432": [],
        "433": [],
        "434": [],
        "435": [],
        "436": [],
        "437": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'variant_impact_score' in all_data.columns:\n        predictors += ['variant_impact_score']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.012096103838628,
                "model_info": "",
                "lineage": "43701"
            }
        ],
        "438": [],
        "439": [],
        "440": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXX.py",
                "accuracy": 1.0163037608824188,
                "model_info": "",
                "lineage": "44001"
            }
        ],
        "441": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 0.914977750283718,
                "model_info": "",
                "lineage": "44101"
            }
        ],
        "442": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    all_data['snp_gene_distance'] = all_data['snp_gene_distance'].clip(lower=0)\n    all_data['snp_position'] = all_data['snp_position'].clip(lower=0)\n    all_data['tss'] = all_data['tss'].clip(lower=0)\n\n    if 'pgBoost' in all_data.columns:\n        all_data['low_confidence'] = (all_data['pgBoost'] < 0.5).astype(int)\n        low_confidence_percentage = all_data['low_confidence'].mean() * 100\n        print(f\"Percentage of low-confidence predictions: {low_confidence_percentage:.2f}%\")\n    else:\n        all_data['low_confidence'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0163037608824188,
                "model_info": "",
                "lineage": "44201"
            }
        ],
        "443": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'tss' in all_data.columns and 'tes' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 0.9527571576408789,
                "model_info": "",
                "lineage": "44301"
            }
        ],
        "444": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_tss_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = all_data['snp_tss_distance'] * all_data['closest_tss']\n        predictors += ['weighted_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.003477178277925,
                "model_info": "",
                "lineage": "44401"
            }
        ],
        "445": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'tes' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'snp_gene_distance_inverse' in all_data.columns:\n        all_data['interaction_score'] = all_data['snp_gene_distance'] * all_data['snp_gene_distance_inverse']\n        predictors += ['interaction_score']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 0.9527571576408789,
                "model_info": "",
                "lineage": "44501"
            }
        ],
        "446": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n        predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.0163037608824188,
                "model_info": "",
                "lineage": "44601"
            }
        ],
        "447": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "44701"
            }
        ],
        "448": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_tes_distance' not in all_data.columns and 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 0.9140353395081104,
                "model_info": "",
                "lineage": "44801"
            }
        ],
        "449": [],
        "450": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    if 'snp_gene_distance_log' not in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    if 'snp_position_log' not in all_data.columns:\n        all_data['snp_position_log'] = np.log1p(all_data['snp_position'])\n\n    predictors += ['snp_gene_distance_squared', 'snp_gene_distance_log', 'snp_position_log']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    if all_data.isnull().values.any():\n        print(\"NaN or Inf encountered during computation:\", all_data.isnull().sum().sum())\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0000670605303101,
                "model_info": "NaN or Inf encountered during computation: 167991200",
                "lineage": "45001"
            }
        ],
        "451": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'chromatin_accessibility_data' in all_data.columns:\n        all_data['chromatin_accessibility'] = all_data['chromatin_accessibility_data']\n        predictors += ['chromatin_accessibility']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "45101"
            }
        ],
        "452": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 0.9140353395081104,
                "model_info": "",
                "lineage": "45201"
            }
        ],
        "453": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == all_data.groupby('gene')['snp_tss_distance'].transform('min')).astype(int)\n    predictors += ['closest_tss']\n\n    if 'adaptive_distance' not in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "45301"
            }
        ],
        "454": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    if 'interaction_score' not in all_data.columns:\n        all_data['interaction_score'] = all_data['snp_gene_distance'] * all_data['snp_tss_distance']\n        predictors += ['interaction_score']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 0.9178321847044608,
                "model_info": "",
                "lineage": "45401"
            }
        ],
        "455": [],
        "456": [],
        "457": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss'] = all_data['closest_tss'].astype(float)\n        predictors += ['closest_tss']\n\n    if 'tes' in all_data.columns:\n        all_data['tes'] = all_data['tes'].astype(float)\n        predictors += ['tes']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0059369478501643,
                "model_info": "",
                "lineage": "45701"
            }
        ],
        "458": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression'] = all_data['gene_expression'].fillna(0)\n        predictors += ['gene_expression']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        all_data['gene_ontology_terms'] = all_data['gene_ontology_terms'].fillna('None')\n        predictors += ['gene_ontology_terms']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "45801"
            }
        ],
        "459": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        feature_importances = bst.get_score(importance_type='weight')\n        top_k_importances = sorted(feature_importances.items(), key=lambda x: x[1], reverse=True)[:10]\n        print(\"Top-k feature importances:\", top_k_importances)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "Top-k feature importances: [('f30', 186.0), ('f34', 141.0), ('f31', 58.0), ('f1', 51.0), ('f24', 43.0), ('f13', 41.0), ('f32', 41.0), ('f14', 36.0), ('f12', 34.0), ('f5', 30.0)]\nTop-k feature importances: [('f30', 175.0), ('f34', 145.0), ('f31', 66.0), ('f1', 65.0), ('f32', 46.0), ('f24', 38.0), ('f13', 33.0), ('f8', 29.0), ('f29', 28.0), ('f27', 27.0)]\nTop-k feature importances: [('f30', 178.0), ('f34', 147.0), ('f31', 67.0), ('f1', 53.0), ('f32', 43.0), ('f13', 39.0), ('f14', 39.0), ('f24', 38.0), ('f12', 35.0), ('f27', 33.0)]\nTop-k feature importances: [('f30', 195.0), ('f34', 142.0), ('f31', 65.0), ('f1', 60.0), ('f24', 50.0), ('f14', 37.0), ('f32', 35.0), ('f13', 32.0), ('f27', 32.0), ('f12', 30.0)]\nTop-k feature importances: [('f30', 176.0), ('f34', 136.0), ('f31', 69.0), ('f1', 66.0), ('f32', 56.0), ('f24', 44.0), ('f8', 29.0), ('f27', 29.0), ('f13', 28.0), ('f14', 28.0)]\nTop-k feature importances: [('f30', 191.0), ('f34', 149.0), ('f31', 67.0), ('f1', 56.0), ('f27', 40.0), ('f24', 37.0), ('f15', 36.0), ('f32', 35.0), ('f13', 34.0), ('f14', 34.0)]\nTop-k feature importances: [('f30', 182.0), ('f34', 131.0), ('f31', 69.0), ('f1', 61.0), ('f24', 40.0), ('f32', 37.0), ('f8', 32.0), ('f14', 32.0), ('f12', 31.0), ('f15', 30.0)]\nTop-k feature importances: [('f30', 194.0), ('f34', 151.0), ('f31', 76.0), ('f1', 64.0), ('f24', 40.0), ('f27', 34.0), ('f32', 32.0), ('f12', 31.0), ('f15', 31.0), ('f13', 29.0)]\nTop-k feature importances: [('f30', 198.0), ('f34', 151.0), ('f1', 67.0), ('f31', 65.0), ('f24', 36.0), ('f12', 31.0), ('f13', 31.0), ('f27', 26.0), ('f32', 26.0), ('f2', 24.0)]\nTop-k feature importances: [('f30', 208.0), ('f34', 148.0), ('f31', 67.0), ('f1', 62.0), ('f14', 38.0), ('f24', 37.0), ('f29', 35.0), ('f8', 33.0), ('f13', 32.0), ('f27', 31.0)]\nTop-k feature importances: [('f30', 187.0), ('f34', 145.0), ('f31', 62.0), ('f1', 52.0), ('f24', 42.0), ('f32', 41.0), ('f13', 38.0), ('f15', 36.0), ('f27', 30.0), ('f7', 28.0)]\nTop-k feature importances: [('f30', 18",
                "lineage": "45901"
            }
        ],
        "460": [],
        "461": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n        predictors += ['closest_tss']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "46101"
            }
        ],
        "462": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n        predictors += ['snp_gene_distance_squared']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "46201"
            }
        ],
        "463": [],
        "464": [],
        "465": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' not in all_data.columns:\n        all_data['closest_tss'] = (all_data['snp_tss_distance'] == all_data.groupby('gene')['snp_tss_distance'].transform('min')).astype(int)\n    if 'adaptive_distance' not in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "46501"
            }
        ],
        "466": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'interaction_score' in all_data.columns:\n        predictors += ['interaction_score']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "46601"
            }
        ],
        "467": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'pgBoost' in all_data.columns:\n        all_data['low_confidence'] = (all_data['pgBoost'] < 0.5).astype(int)\n        low_confidence_percentage = all_data['low_confidence'].mean() * 100\n        print(f\"Percentage of low-confidence predictions: {low_confidence_percentage:.2f}%\")\n    else:\n        all_data['low_confidence'] = 0\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        print(f\"Epoch: {bst.best_iteration}, Train AUC: {bst.best_score:.4f}\")\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "Epoch: 772, Train AUC: 0.8135\nEpoch: 222, Train AUC: 0.8147\nEpoch: 723, Train AUC: 0.8142\nEpoch: 995, Train AUC: 0.8131\nEpoch: 721, Train AUC: 0.8134\nEpoch: 908, Train AUC: 0.8126\nEpoch: 722, Train AUC: 0.8137\nEpoch: 989, Train AUC: 0.8134\nEpoch: 429, Train AUC: 0.8118\nEpoch: 680, Train AUC: 0.8143\nEpoch: 700, Train AUC: 0.8101\nEpoch: 292, Train AUC: 0.8148\nEpoch: 995, Train AUC: 0.8142\nEpoch: 976, Train AUC: 0.8135\nEpoch: 951, Train AUC: 0.8134\nEpoch: 798, Train AUC: 0.8143\nEpoch: 995, Train AUC: 0.8143\nEpoch: 983, Train AUC: 0.8150\nEpoch: 628, Train AUC: 0.8144\nEpoch: 640, Train AUC: 0.8139\nEpoch: 934, Train AUC: 0.8139\nEpoch: 217, Train AUC: 0.8144",
                "lineage": "46701"
            }
        ],
        "468": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        all_data.loc[train_mask, 'best_hyperparams'] = str(params)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "46801"
            }
        ],
        "469": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n        predictors += ['snp_tss_distance_squared']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "46901"
            }
        ],
        "470": [],
        "471": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'tss' in all_data.columns and 'tes' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 0.9519657344131429,
                "model_info": "",
                "lineage": "47101"
            }
        ],
        "472": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'chromatin_accessibility' in all_data.columns:\n        predictors += ['chromatin_accessibility']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "47201"
            }
        ],
        "473": [],
        "474": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1)\n    predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "47401"
            }
        ],
        "475": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    if 'gradient_clipping' not in all_data.columns:\n        all_data['gradient_clipping'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "47501"
            }
        ],
        "476": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "47601"
            }
        ],
        "477": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_binary'] = all_data['closest_tss'].astype(int)\n        predictors += ['closest_tss_binary']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        print(f\"Chromosome: {chrom}, Training Data Shape: {X_train.shape}, Labels Shape: {y_train.shape}, Model AUC: {bst.best_score}\")\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "Chromosome: chr1, Training Data Shape: (44757, 36), Labels Shape: (44757,), Model AUC: 0.8136145334368982\nChromosome: chr10, Training Data Shape: (47386, 36), Labels Shape: (47386,), Model AUC: 0.8150911317572486\nChromosome: chr11, Training Data Shape: (47200, 36), Labels Shape: (47200,), Model AUC: 0.8141139867305188\nChromosome: chr12, Training Data Shape: (47458, 36), Labels Shape: (47458,), Model AUC: 0.8130387346533124\nChromosome: chr13, Training Data Shape: (48960, 36), Labels Shape: (48960,), Model AUC: 0.8136915173885583\nChromosome: chr14, Training Data Shape: (48446, 36), Labels Shape: (48446,), Model AUC: 0.8125516240319101\nChromosome: chr15, Training Data Shape: (47695, 36), Labels Shape: (47695,), Model AUC: 0.8137472478806137\nChromosome: chr16, Training Data Shape: (47377, 36), Labels Shape: (47377,), Model AUC: 0.8133392781546896\nChromosome: chr17, Training Data Shape: (46117, 36), Labels Shape: (46117,), Model AUC: 0.8118119252365357\nChromosome: chr18, Training Data Shape: (49083, 36), Labels Shape: (49083,), Model AUC: 0.8144424104485909\nChromosome: chr19, Training Data Shape: (46554, 36), Labels Shape: (46554,), Model AUC: 0.8098521193988839\nChromosome: chr2, Training Data Shape: (46233, 36), Labels Shape: (46233,), Model AUC: 0.814636289431635\nChromosome: chr20, Training Data Shape: (48364, 36), Labels Shape: (48364,), Model AUC: 0.8142529831866798\nChromosome: chr21, Training Data Shape: (48820, 36), Labels Shape: (48820,), Model AUC: 0.8135224186330736\nChromosome: chr22, Training Data Shape: (47862, 36), Labels Shape: (47862,), Model AUC: 0.8131424465175457\nChromosome: chr3, Training Data Shape: (47226, 36), Labels Shape: (47226,), Model AUC: 0.8142745840798895\nChromosome: chr4, Training Data Shape: (48344, 36), Labels Shape: (48344,), Model AUC: 0.8143027347029529\nChromosome: chr5, Training Data Shape: (47809, 36), Labels Shape: (47809,), Model AUC: 0.8146077319700445\nChromosome: chr6, Training Data Shape: (47745, 36), Labels Shape: (47745,), Mode",
                "lineage": "47701"
            }
        ],
        "478": [],
        "479": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    if 'snp_tss_distance_squared' not in all_data.columns:\n        all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n\n    predictors += ['snp_gene_distance_squared', 'snp_tss_distance_squared']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "47901"
            }
        ],
        "480": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    all_data['data_volume_check'] = all_data.groupby('gene')['positive'].transform('count')\n    insufficient_data_warning = all_data[all_data['data_volume_check'] < 10]  # Example threshold\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    if not insufficient_data_warning.empty:\n        print(f\"Warning: Insufficient training data for genes: {insufficient_data_warning['gene'].unique()}\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "Warning: Insufficient training data for genes: ['LINC01676' 'ANKRD30A' 'FOLH1' 'TRIM49B' 'TRIM64C' 'OR4A15' 'OR4A16'\n 'OR4C15' 'TRIM48' 'NOX4' 'PCDH17' 'PRR20A' 'PRR20B' 'PRR20C' 'PRR20D'\n 'PRR20E' 'LINC00351' 'OR11H12' 'MIR4307HG' 'LINC01571' 'C16orf97'\n 'CASC22' 'LINC00919' 'LINC02180' 'CA10' 'CASC17' 'LINC01444' 'RIT2'\n 'SYT4' 'LINC01541' 'LINC01899' 'ZNF729' 'LINC01233' 'LINC01785' 'ZNF492'\n 'ZNF98' 'GALNT13' 'PCGEM1' 'LINC01884' 'LINC01867' 'LRRTM4' 'MIR99AHG'\n 'KRTAP13-1' 'KRTAP13-3' 'KRTAP13-4' 'KRTAP15-1' 'KRTAP19-3' 'CNTN3'\n 'LINC02070' 'EPHA3' 'LINC00613' 'TECRL' 'LINC01947' 'CDH18' 'CDH10'\n 'LINC02239' 'FGF10' 'SMN2' 'LINC01446' 'ZNF479' 'ZNF716' 'LINC01288'\n 'UNC5D' 'CYLC2' 'IZUMO3' 'TUSC1' 'LINGO2']",
                "lineage": "48001"
            }
        ],
        "481": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n    metrics = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n        y_pred = (pred_prob > 0.5).astype(int)\n        auc_score = bst.best_score\n        metrics.append({'chromosome': chrom, 'auc': auc_score})\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    for metric in metrics:\n        print(f\"Chromosome: {metric['chromosome']}, AUC: {metric['auc']:.4f}\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "Chromosome: chr1, AUC: 0.8135\nChromosome: chr10, AUC: 0.8147\nChromosome: chr11, AUC: 0.8142\nChromosome: chr12, AUC: 0.8131\nChromosome: chr13, AUC: 0.8134\nChromosome: chr14, AUC: 0.8126\nChromosome: chr15, AUC: 0.8137\nChromosome: chr16, AUC: 0.8134\nChromosome: chr17, AUC: 0.8118\nChromosome: chr18, AUC: 0.8143\nChromosome: chr19, AUC: 0.8101\nChromosome: chr2, AUC: 0.8148\nChromosome: chr20, AUC: 0.8142\nChromosome: chr21, AUC: 0.8135\nChromosome: chr22, AUC: 0.8134\nChromosome: chr3, AUC: 0.8143\nChromosome: chr4, AUC: 0.8143\nChromosome: chr5, AUC: 0.8150\nChromosome: chr6, AUC: 0.8144\nChromosome: chr7, AUC: 0.8139\nChromosome: chr8, AUC: 0.8139\nChromosome: chr9, AUC: 0.8144",
                "lineage": "48101"
            }
        ],
        "482": [],
        "483": [],
        "484": [],
        "485": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    if 'performance_snapshot' not in all_data.columns:\n        all_data['performance_snapshot'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        all_data.loc[train_mask, 'performance_snapshot'] = bst.best_score\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "48501"
            }
        ],
        "486": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'tes' in all_data.columns and 'snp_position' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    if 'interaction_score' not in all_data.columns:\n        all_data['interaction_score'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance_inverse']\n        predictors += ['interaction_score']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 0.912693874240754,
                "model_info": "",
                "lineage": "48601"
            }
        ],
        "487": [],
        "488": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'gene_regulatory_network' in all_data.columns:\n        all_data['regulatory_feature'] = all_data['gene_regulatory_network'].apply(lambda x: 1 if x else 0)\n        predictors += ['regulatory_feature']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "48801"
            }
        ],
        "489": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_binary'] = all_data['closest_tss'].apply(lambda x: 1 if x else 0)\n        predictors += ['closest_tss_binary']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    print(f\"Checkpoint: Processed {len(chromosomes)} chromosomes with {len(predictions)} predictions.\")\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "Checkpoint: Processed 22 chromosomes with 6891137 predictions.",
                "lineage": "48901"
            }
        ],
        "490": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "49001"
            }
        ],
        "491": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'tes' in all_data.columns and 'tss' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 0.9519657344131429,
                "model_info": "",
                "lineage": "49101"
            }
        ],
        "492": [],
        "493": [],
        "494": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    positive_count = all_data['positive'].value_counts()\n    print(f\"Class balance before resampling: {positive_count.to_dict()}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    positive_count_after = predictions['pgBoost'].value_counts()\n    print(f\"Class balance after resampling: {positive_count_after.to_dict()}\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "Class balance before resampling: {-1: 6841317, 0: 39943, 1: 9877}\nClass balance after resampling: {0.025438878685235977: 32191, 0.026495536789298058: 24369, 0.024794897064566612: 21827, 0.025821756571531296: 21274, 0.025523221120238304: 19751, 0.025757191702723503: 18930, 0.02343953400850296: 18489, 0.030381284654140472: 17827, 0.02942490018904209: 13351, 0.028793668374419212: 12926, 0.029351819306612015: 12920, 0.037625495344400406: 12107, 0.02865280769765377: 11127, 0.027149314060807228: 10526, 0.030951151624321938: 10301, 0.025848429650068283: 10247, 0.027777016162872314: 9892, 0.02927224524319172: 9680, 0.0289042629301548: 9162, 0.025244388729333878: 8616, 0.02976970747113228: 8471, 0.029363803565502167: 7903, 0.02904803864657879: 7769, 0.028128333389759064: 7695, 0.027259567752480507: 7668, 0.02571807987987995: 7562, 0.026768270879983902: 7442, 0.03268648684024811: 7342, 0.02780202589929104: 7223, 0.02412133477628231: 7208, 0.024389643222093582: 7060, 0.025352846831083298: 6933, 0.029336465522646904: 6726, 0.039500970393419266: 6681, 0.030761882662773132: 6648, 0.029603904113173485: 6460, 0.024185819551348686: 6197, 0.027395611628890038: 6158, 0.023232493549585342: 6054, 0.02379097230732441: 6029, 0.039775751531124115: 5958, 0.03423291817307472: 5956, 0.025131328031420708: 5894, 0.024899104610085487: 5811, 0.027043649926781654: 5694, 0.025339500978589058: 5574, 0.025577541440725327: 5425, 0.029856570065021515: 5414, 0.02474019303917885: 5391, 0.025285659357905388: 5384, 0.030251216143369675: 5367, 0.03802608326077461: 5267, 0.024969832971692085: 5254, 0.02911190874874592: 4943, 0.024948256090283394: 4848, 0.030837303027510643: 4689, 0.05837661772966385: 4625, 0.02803877741098404: 4541, 0.03604290261864662: 4530, 0.02586027793586254: 4424, 0.04488959163427353: 4272, 0.038044802844524384: 4264, 0.02378256991505623: 4233, 0.028699878603219986: 4189, 0.025436384603381157: 4105, 0.02795299142599106: 4078, 0.025660738348960876: 4054, 0.04109840467572212: 4039, 0.0295",
                "lineage": "49401"
            }
        ],
        "495": [],
        "496": [],
        "497": [],
        "498": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n        predictors += ['snp_gene_distance_squared']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "49801"
            }
        ],
        "499": [],
        "500": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.feature_selection import mutual_info_regression\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    all_data = all_data.dropna(subset=predictors + ['positive'])\n    mi = mutual_info_regression(all_data[predictors], all_data['positive'])\n    mi_scores = pd.Series(mi, index=predictors).sort_values(ascending=False)\n    selected_predictors = mi_scores[mi_scores > 0].index.tolist()\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, selected_predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, selected_predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 0.12019816586328044,
                "model_info": "",
                "lineage": "50001"
            }
        ],
        "501": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    all_data['missing_values_counts'] = all_data[predictors].isnull().sum(axis=1)\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    all_data['linearity_assumption'] = np.where(np.abs(all_data['snp_gene_distance']) < 0.5, 1, 0)\n    all_data['homoscedasticity_assumption'] = np.where(all_data['missing_values_counts'] < 1, 1, 0)\n\n    predictors += ['linearity_assumption', 'homoscedasticity_assumption']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "50101"
            }
        ],
        "502": [],
        "503": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "50301"
            }
        ],
        "504": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'calibration_error' not in all_data.columns:\n        all_data['calibration_error'] = np.nan\n\n    all_data['gradient_norms'] = np.nan\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        gradient_norm = np.nan\n        try:\n            gradient_norm = np.linalg.norm([float(x.split('=')[1]) for x in bst.get_dump()[0].split()[1:]])\n        except ValueError:\n            pass\n        all_data.loc[train_mask, 'gradient_norms'] = gradient_norm\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        calibration_error = np.abs(pred_prob - all_data.loc[pred_mask, 'positive'].values).mean()\n        all_data.loc[pred_mask, 'calibration_error'] = calibration_error\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "50401"
            }
        ],
        "505": [],
        "506": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['trainable_parameters'] = len(predictors)\n\n    missing_counts = all_data[predictors].isnull().sum()\n    print(\"Missing values per feature post-imputation:\\n\", missing_counts)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Missing values per feature post-imputation:\n signac_score_B_pbmc              5817373\nsignac_score_T_pbmc              5224205\nsignac_score_mono_pbmc           5171012\nscent_beta_B_pbmc                6466752\nscent_beta_T_pbmc                6573884\nscent_beta_mono_pbmc             6388518\ncicero_coaccess_B_pbmc           5314168\ncicero_coaccess_T_pbmc           5288914\ncicero_coaccess_mono_pbmc        5299560\nsignac_score_LCL_shareseq        5580664\nscent_beta_LCL_shareseq          6861354\ncicero_coaccess_LCL_shareseq     5881535\nsignac_score_B_neurips           4770071\nsignac_score_T_neurips           4685451\nsignac_score_mono_neurips        4662622\nsignac_score_eryth_neurips       4743504\nsignac_score_DC_neurips          4921657\nscent_beta_B_neurips             6808492\nscent_beta_T_neurips             6807268\nscent_beta_mono_neurips          6724386\nscent_beta_eryth_neurips         6781342\nscent_beta_DC_neurips            6603961\ncicero_coaccess_B_neurips        4626280\ncicero_coaccess_T_neurips        4624891\ncicero_coaccess_mono_neurips     4634679\ncicero_coaccess_eryth_neurips    4607693\ncicero_coaccess_DC_neurips       4626926\nsignac_score_K562_Xu             4757713\nscent_beta_K562_Xu               6134281\ncicero_coaccess_K562_Xu          5080516\nsnp_gene_distance                      0\nclosest_tss                            0\nsnp_gene_distance_inverse              0\nsnp_gene_distance_normalized           0\nsnp_tss_distance                  380382\nadaptive_distance                 380382\nweighted_distance                 380382\ndtype: int64",
                "lineage": "50601"
            }
        ],
        "507": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 0.9138212558723391,
                "model_info": "",
                "lineage": "50701"
            }
        ],
        "508": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'tss' in all_data.columns and 'tes' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 0.9547689362837225,
                "model_info": "",
                "lineage": "50801"
            }
        ],
        "509": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "",
                "lineage": "50901"
            }
        ],
        "510": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'variant_impact_score' in all_data.columns:\n        predictors += ['variant_impact_score']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "51001"
            }
        ],
        "511": [],
        "512": [],
        "513": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    z_scores = (all_data[predictors] - all_data[predictors].mean()) / all_data[predictors].std()\n    outlier_counts = (np.abs(z_scores) > 3).sum(axis=0)\n    print(\"Outlier counts based on z-score analysis:\", outlier_counts.to_dict())\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Outlier counts based on z-score analysis: {'signac_score_B_pbmc': 10403, 'signac_score_T_pbmc': 19914, 'signac_score_mono_pbmc': 17142, 'scent_beta_B_pbmc': 1080, 'scent_beta_T_pbmc': 4483, 'scent_beta_mono_pbmc': 6917, 'cicero_coaccess_B_pbmc': 35948, 'cicero_coaccess_T_pbmc': 39469, 'cicero_coaccess_mono_pbmc': 39385, 'signac_score_LCL_shareseq': 13780, 'scent_beta_LCL_shareseq': 224, 'cicero_coaccess_LCL_shareseq': 29601, 'signac_score_B_neurips': 22467, 'signac_score_T_neurips': 22334, 'signac_score_mono_neurips': 20746, 'signac_score_eryth_neurips': 24962, 'signac_score_DC_neurips': 17147, 'scent_beta_B_neurips': 1084, 'scent_beta_T_neurips': 1010, 'scent_beta_mono_neurips': 1749, 'scent_beta_eryth_neurips': 1242, 'scent_beta_DC_neurips': 3154, 'cicero_coaccess_B_neurips': 58832, 'cicero_coaccess_T_neurips': 54278, 'cicero_coaccess_mono_neurips': 61241, 'cicero_coaccess_eryth_neurips': 66772, 'cicero_coaccess_DC_neurips': 66422, 'signac_score_K562_Xu': 20793, 'scent_beta_K562_Xu': 13208, 'cicero_coaccess_K562_Xu': 41380, 'snp_gene_distance': 0, 'closest_tss': 616728, 'snp_gene_distance_inverse': 91273, 'snp_gene_distance_normalized': 0, 'snp_tss_distance': 3262, 'adaptive_distance': 3262, 'weighted_distance': 3262}",
                "lineage": "51301"
            }
        ],
        "514": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"logloss\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0180936073212075,
                "model_info": "",
                "lineage": "51401"
            }
        ],
        "515": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'chromatin_accessibility_data' in all_data.columns:\n        all_data['chromatin_accessibility'] = all_data['chromatin_accessibility_data']\n        predictors += ['chromatin_accessibility']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "51501"
            }
        ],
        "516": [],
        "517": [],
        "518": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    all_data['group'] = all_data['snp'].astype(str) + '_' + all_data['gene'].astype(str)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0,  # L1 regularization removed\n            \"lambda\": 1  # L2 regularization applied\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "51801"
            }
        ],
        "519": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n        predictors += ['snp_gene_distance_squared']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "51901"
            }
        ],
        "520": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'multi_omics_feature' in all_data.columns:\n        predictors += ['multi_omics_feature']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "52001"
            }
        ],
        "521": [],
        "522": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['custom_distance'] = np.abs(all_data['snp_gene_distance'] - all_data['closest_tss'])\n        predictors += ['custom_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0170984099260414,
                "model_info": "",
                "lineage": "52201"
            }
        ],
        "523": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"lambda\": 1.0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "52301"
            }
        ],
        "524": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_position' in all_data.columns and 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 0.9138212558723391,
                "model_info": "",
                "lineage": "52401"
            }
        ],
        "525": [],
        "526": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nimport shap\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'early_stopping' not in all_data.columns:\n        all_data['early_stopping'] = 0\n    if 'patience_counter' not in all_data.columns:\n        all_data['patience_counter'] = 0\n\n    predictions_dfs = []\n    shap_values_list = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        explainer = shap.Explainer(bst)\n        shap_values = explainer(X_pred)\n        shap_values_list.append(shap_values.values)\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    all_data['shap_values'] = np.concatenate(shap_values_list, axis=0).tolist()\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "52601"
            }
        ],
        "527": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "52701"
            }
        ],
        "528": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.9138212558723391,
                "model_info": "",
                "lineage": "52801"
            }
        ],
        "529": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'snp_tss_distance' in all_data.columns:\n        all_data['custom_distance'] = np.abs(all_data['snp_gene_distance'] - all_data['snp_tss_distance'])\n        predictors += ['custom_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0204146275326251,
                "model_info": "",
                "lineage": "52901"
            }
        ],
        "530": [],
        "531": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n    predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.9138212558723391,
                "model_info": "",
                "lineage": "53101"
            }
        ],
        "532": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n        predictors += ['closest_tss']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "53201"
            }
        ],
        "533": [],
        "534": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'biological_relevance' not in all_data.columns:\n        all_data['biological_relevance'] = all_data['snp_gene_distance']  # Example of using snp_gene_distance for biological relevance\n        predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "53401"
            }
        ],
        "535": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss'] = all_data['closest_tss'].astype(int)\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] + all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0155825346095098,
                "model_info": "",
                "lineage": "53501"
            }
        ],
        "536": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n        predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "53601"
            }
        ],
        "537": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance' in all_data.columns and 'snp_tss_distance' in all_data.columns:\n        all_data['custom_distance'] = np.abs(all_data['snp_gene_distance'] - all_data['snp_tss_distance'])\n        predictors += ['custom_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0204146275326251,
                "model_info": "",
                "lineage": "53701"
            }
        ],
        "538": [],
        "539": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "",
                "lineage": "53901"
            }
        ],
        "540": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    for predictor in predictors:\n        all_data[f'{predictor}_skew'] = skew(all_data[predictor])\n        all_data[f'{predictor}_kurtosis'] = kurtosis(all_data[predictor])\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    predictions['low_confidence_predictions'] = (predictions['pgBoost'] < 0.5).astype(int)\n    low_confidence_percentage = predictions['low_confidence_predictions'].mean() * 100\n    print(f'Percentage of low-confidence predictions: {low_confidence_percentage:.2f}%')\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Percentage of low-confidence predictions: 98.46%",
                "lineage": "54001"
            }
        ],
        "541": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'multi_omics_feature' in all_data.columns:\n        predictors += ['multi_omics_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "54101"
            }
        ],
        "542": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'interaction_score' in all_data.columns:\n        predictors += ['interaction_score']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "54201"
            }
        ],
        "543": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'tes' in all_data.columns and 'snp_position' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.9138212558723391,
                "model_info": "",
                "lineage": "54301"
            }
        ],
        "544": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "54401"
            }
        ],
        "545": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['label_smoothing'] = all_data['positive'] * 0.9 + 0.05\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'label_smoothing'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0155631361463202,
                "model_info": "",
                "lineage": "54501"
            }
        ],
        "546": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tes_distance' in all_data.columns:\n        all_data['snp_tes_distance_squared'] = all_data['snp_tes_distance'] ** 2\n        predictors += ['snp_tes_distance_squared']\n\n    if 'interaction_score' in all_data.columns:\n        all_data['interaction_score_squared'] = all_data['interaction_score'] ** 2\n        predictors += ['interaction_score_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "54601"
            }
        ],
        "547": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['trainable_parameters_ratio'] = len(predictors) / (len(predictors) + 5)\n\n    all_data['missing_values_count'] = all_data[predictors].isnull().sum(axis=1)\n    predictors += ['missing_values_count']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0119921595959203,
                "model_info": "",
                "lineage": "54701"
            }
        ],
        "548": [],
        "549": [],
        "550": [],
        "551": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"logloss\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0162963396826734,
                "model_info": "",
                "lineage": "55101"
            }
        ],
        "552": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    z_scores = (all_data['positive'] - all_data['positive'].mean()) / all_data['positive'].std()\n    outlier_count = np.sum(np.abs(z_scores) > 3)\n    print(f\"Detected outliers: {outlier_count}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Detected outliers: 49820",
                "lineage": "55201"
            }
        ],
        "553": [],
        "554": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"lambda\": 1,\n            \"alpha\": 0.1,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0115500345856636,
                "model_info": "",
                "lineage": "55401"
            }
        ],
        "555": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] + all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0155825346095098,
                "model_info": "",
                "lineage": "55501"
            }
        ],
        "556": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_tss_distance_log'] = np.log1p(all_data['snp_tss_distance'])\n    predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "55601"
            }
        ],
        "557": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "55701"
            }
        ],
        "558": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n        predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "55801"
            }
        ],
        "559": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'][all_data['closest_tss'] == 1])\n        predictors += ['closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0150356225319328,
                "model_info": "",
                "lineage": "55901"
            }
        ],
        "560": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    missing_counts = all_data[predictors].isnull().sum()\n    print(\"Missing values per feature post-imputation:\\n\", missing_counts)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Missing values per feature post-imputation:\n signac_score_B_pbmc              5817373\nsignac_score_T_pbmc              5224205\nsignac_score_mono_pbmc           5171012\nscent_beta_B_pbmc                6466752\nscent_beta_T_pbmc                6573884\nscent_beta_mono_pbmc             6388518\ncicero_coaccess_B_pbmc           5314168\ncicero_coaccess_T_pbmc           5288914\ncicero_coaccess_mono_pbmc        5299560\nsignac_score_LCL_shareseq        5580664\nscent_beta_LCL_shareseq          6861354\ncicero_coaccess_LCL_shareseq     5881535\nsignac_score_B_neurips           4770071\nsignac_score_T_neurips           4685451\nsignac_score_mono_neurips        4662622\nsignac_score_eryth_neurips       4743504\nsignac_score_DC_neurips          4921657\nscent_beta_B_neurips             6808492\nscent_beta_T_neurips             6807268\nscent_beta_mono_neurips          6724386\nscent_beta_eryth_neurips         6781342\nscent_beta_DC_neurips            6603961\ncicero_coaccess_B_neurips        4626280\ncicero_coaccess_T_neurips        4624891\ncicero_coaccess_mono_neurips     4634679\ncicero_coaccess_eryth_neurips    4607693\ncicero_coaccess_DC_neurips       4626926\nsignac_score_K562_Xu             4757713\nscent_beta_K562_Xu               6134281\ncicero_coaccess_K562_Xu          5080516\nsnp_gene_distance                      0\nclosest_tss                            0\nsnp_gene_distance_inverse              0\nsnp_gene_distance_normalized           0\nsnp_tss_distance                  380382\nadaptive_distance                 380382\nweighted_distance                 380382\nsnp_tss_distance_squared          380382\ndtype: int64",
                "lineage": "56001"
            }
        ],
        "561": [],
        "562": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0189004576731155,
                "model_info": "",
                "lineage": "56201"
            }
        ],
        "563": [],
        "564": [],
        "565": [],
        "566": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'evolutionary_conservation_score' in all_data.columns:\n        all_data['conservation_weighted_distance'] = all_data['snp_tss_distance'] * all_data['evolutionary_conservation_score']\n        predictors += ['conservation_weighted_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "56601"
            }
        ],
        "567": [],
        "568": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'gene_regulatory_network' in all_data.columns:\n        all_data['regulatory_feature'] = all_data['gene_regulatory_network']\n        predictors += ['regulatory_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "56801"
            }
        ],
        "569": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['z_score'] = (all_data['positive'] - all_data['positive'].mean()) / all_data['positive'].std()\n    all_data['outlier'] = np.abs(all_data['z_score']) > 3\n    outlier_count = all_data['outlier'].sum()\n    print(f\"Detected outliers: {outlier_count}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Detected outliers: 49820",
                "lineage": "56901"
            }
        ],
        "570": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'][all_data['closest_tss'] == 1])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0150356225319328,
                "model_info": "",
                "lineage": "57001"
            }
        ],
        "571": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['snp_gene_distance']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0122442821013045,
                "model_info": "",
                "lineage": "57101"
            }
        ],
        "572": [],
        "573": [],
        "574": [],
        "575": [],
        "576": [],
        "577": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'tss' in all_data.columns and 'tes' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.9547689362837225,
                "model_info": "",
                "lineage": "57701"
            }
        ],
        "578": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'multi_omics_feature' in all_data.columns:\n        predictors += ['multi_omics_feature']\n\n    if 'evolutionary_conservation_score' in all_data.columns:\n        all_data['conservation_weighted_distance'] = all_data['snp_gene_distance'] * all_data['evolutionary_conservation_score']\n        predictors += ['conservation_weighted_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "57801"
            }
        ],
        "579": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    predictors += ['snp_gene_distance_log']\n\n    all_data['misclassified'] = (all_data['positive'] != (all_data['pgBoost'] > 0.5)).astype(int) if 'pgBoost' in all_data.columns else np.nan\n    misclassified_instances = all_data[all_data['misclassified'] == 1][['snp', 'gene', 'pgBoost']] if 'pgBoost' in all_data.columns else pd.DataFrame()\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "57901"
            }
        ],
        "580": [],
        "581": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'histone_modification_data' in all_data.columns:\n        all_data['histone_modification_effect'] = all_data['histone_modification_data'] * all_data['snp_gene_distance_normalized']\n        predictors += ['histone_modification_effect']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "58101"
            }
        ],
        "582": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance_log' not in all_data.columns:\n        all_data['snp_tss_distance_log'] = np.log(all_data['snp_tss_distance'] + 1e-6)\n        predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "58201"
            }
        ],
        "583": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0126244343419328,
                "model_info": "",
                "lineage": "58301"
            }
        ],
        "584": [],
        "585": [],
        "586": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['mean_feature'] = all_data[predictors].mean(axis=1)\n    all_data['std_feature'] = all_data[predictors].std(axis=1)\n    all_data['min_feature'] = all_data[predictors].min(axis=1)\n    all_data['max_feature'] = all_data[predictors].max(axis=1)\n    predictors += ['mean_feature', 'std_feature', 'min_feature', 'max_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0153955009460196,
                "model_info": "",
                "lineage": "58601"
            }
        ],
        "587": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['snp_tss_distance_log'] = np.log1p(all_data['snp_tss_distance'])\n        predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "58701"
            }
        ],
        "588": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['snp_gene_distance']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.011955127591749,
                "model_info": "",
                "lineage": "58801"
            }
        ],
        "589": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'group' not in all_data.columns:\n        all_data['group'] = all_data['snp'].astype(str) + '_' + all_data['gene'].astype(str)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0,\n            \"lambda\": 1\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "58901"
            }
        ],
        "590": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "59001"
            }
        ],
        "591": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance_squared' not in all_data.columns:\n        all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "59101"
            }
        ],
        "592": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'enhancer_promoter_interaction' in all_data.columns:\n        all_data['enhancer_promoter_effect'] = all_data['enhancer_promoter_interaction']\n        predictors += ['enhancer_promoter_effect']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "59201"
            }
        ],
        "593": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n    fold_scores = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        fold_auc = bst.best_score\n        fold_scores.append(fold_auc)\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    mean_score = np.mean(fold_scores)\n    std_score = np.std(fold_scores)\n    print(f\"Cross-validation mean AUC: {mean_score:.4f}, std: {std_score:.4f}\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Cross-validation mean AUC: 0.8136, std: 0.0011",
                "lineage": "59301"
            }
        ],
        "594": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_gene_distance'] - all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0170984099260414,
                "model_info": "",
                "lineage": "59401"
            }
        ],
        "595": [],
        "596": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_gene_distance'] + all_data['snp_tss_distance']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.011955127591749,
                "model_info": "",
                "lineage": "59601"
            }
        ],
        "597": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    nan_count = all_data[predictors].isna().sum().sum()\n    inf_count = np.isinf(all_data[predictors]).sum().sum()\n    print(f\"NaN count: {nan_count}, Inf count: {inf_count}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "NaN count: 167991200, Inf count: 0",
                "lineage": "59701"
            }
        ],
        "598": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_gene_distance'] + all_data['snp_tss_distance']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.011955127591749,
                "model_info": "",
                "lineage": "59801"
            }
        ],
        "599": [],
        "600": [],
        "601": [],
        "602": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'evolutionary_conservation_score' in all_data.columns:\n        all_data['conservation_weighted_distance'] = all_data['snp_gene_distance'] * all_data['evolutionary_conservation_score']\n        predictors += ['conservation_weighted_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "60201"
            }
        ],
        "603": [],
        "604": [],
        "605": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'tes' in all_data.columns and 'tss' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.9547689362837225,
                "model_info": "",
                "lineage": "60501"
            }
        ],
        "606": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'group' not in all_data.columns:\n        all_data['group'] = all_data['snp'].astype(str) + '_' + all_data['gene'].astype(str)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0.1,\n            \"lambda\": 1,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train, enable_categorical=True)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0115500345856636,
                "model_info": "",
                "lineage": "60601"
            }
        ],
        "607": [],
        "608": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['gradient_clipping'] = np.clip(all_data[predictors].values, -1, 1).sum(axis=1)\n    predictors += ['gradient_clipping']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "60801"
            }
        ],
        "609": [],
        "610": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_tss_distance_squared', 'snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "61001"
            }
        ],
        "611": [],
        "612": [],
        "613": [],
        "614": [],
        "615": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"lambda\": 1,  # L2 regularization\n            \"alpha\": 0.1,  # L1 regularization\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0091284380500598,
                "model_info": "",
                "lineage": "61501"
            }
        ],
        "616": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = np.abs(all_data['snp_gene_distance'] - all_data['snp_tss_distance'])\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0141278004753207,
                "model_info": "",
                "lineage": "61601"
            }
        ],
        "617": [],
        "618": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['snp_tss_distance_log'] = np.log(all_data['snp_tss_distance'] + 1e-6)\n        predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        feature_importances = bst.get_score(importance_type='weight')\n        top_features = sorted(feature_importances.items(), key=lambda x: x[1], reverse=True)[:5]\n        print(\"Top features and their importance:\", top_features)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Top features and their importance: [('f30', 184.0), ('f34', 139.0), ('f31', 57.0), ('f1', 52.0), ('f32', 43.0)]\nTop features and their importance: [('f30', 175.0), ('f34', 144.0), ('f31', 67.0), ('f1', 65.0), ('f32', 48.0)]\nTop features and their importance: [('f30', 179.0), ('f34', 144.0), ('f31', 67.0), ('f1', 57.0), ('f32', 43.0)]\nTop features and their importance: [('f30', 191.0), ('f34', 135.0), ('f31', 65.0), ('f1', 61.0), ('f24', 47.0)]\nTop features and their importance: [('f30', 176.0), ('f34', 130.0), ('f31', 69.0), ('f1', 66.0), ('f32', 56.0)]\nTop features and their importance: [('f30', 192.0), ('f34', 144.0), ('f31', 66.0), ('f1', 55.0), ('f27', 39.0)]\nTop features and their importance: [('f30', 182.0), ('f34', 129.0), ('f31', 69.0), ('f1', 61.0), ('f24', 40.0)]\nTop features and their importance: [('f30', 187.0), ('f34', 144.0), ('f31', 73.0), ('f1', 63.0), ('f24', 40.0)]\nTop features and their importance: [('f30', 200.0), ('f34', 153.0), ('f1', 70.0), ('f31', 65.0), ('f24', 39.0)]\nTop features and their importance: [('f30', 208.0), ('f34', 144.0), ('f31', 67.0), ('f1', 62.0), ('f14', 38.0)]\nTop features and their importance: [('f30', 187.0), ('f34', 144.0), ('f31', 62.0), ('f1', 52.0), ('f24', 42.0)]\nTop features and their importance: [('f30', 183.0), ('f34', 144.0), ('f31', 65.0), ('f1', 61.0), ('f24', 40.0)]\nTop features and their importance: [('f30', 188.0), ('f34', 145.0), ('f31', 67.0), ('f1', 53.0), ('f32', 43.0)]\nTop features and their importance: [('f30', 194.0), ('f34', 149.0), ('f31', 66.0), ('f1', 62.0), ('f24', 43.0)]\nTop features and their importance: [('f30', 182.0), ('f34', 143.0), ('f31', 70.0), ('f1', 64.0), ('f32', 42.0)]\nTop features and their importance: [('f30', 177.0), ('f34', 148.0), ('f31', 68.0), ('f1', 55.0), ('f24', 45.0)]\nTop features and their importance: [('f30', 180.0), ('f34', 137.0), ('f31', 68.0), ('f1', 62.0), ('f13', 45.0)]\nTop features and their importance: [('f30', 189.0), ('f34', 130.0), ('f31', 68.0), ('f1', 58.0),",
                "lineage": "61801"
            }
        ],
        "619": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'interaction_score' in all_data.columns:\n        all_data['interaction_score'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n        predictors += ['interaction_score']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "61901"
            }
        ],
        "620": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'biological_relevance' not in all_data.columns:\n        all_data['biological_relevance'] = np.where(all_data['snp_gene_distance'] < 1000, 1, 0)\n        predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "",
                "lineage": "62001"
            }
        ],
        "621": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    for predictor in predictors:\n        if np.issubdtype(all_data[predictor].dtype, np.number):\n            print(f\"{predictor} - Skewness: {skew(all_data[predictor].dropna())}, Kurtosis: {kurtosis(all_data[predictor].dropna())}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "signac_score_B_pbmc - Skewness: 1.2694329901654213, Kurtosis: 5.118156934630136\nsignac_score_T_pbmc - Skewness: 2.858346880428548, Kurtosis: 24.526637100015893\nsignac_score_mono_pbmc - Skewness: 1.9465066123295287, Kurtosis: 15.532268555651925\nscent_beta_B_pbmc - Skewness: -19.943192046721816, Kurtosis: 731.4996485230254\nscent_beta_T_pbmc - Skewness: 0.43256276022567436, Kurtosis: 11.219913653674398\nscent_beta_mono_pbmc - Skewness: -0.20926923877962791, Kurtosis: 5.268078802317456\ncicero_coaccess_B_pbmc - Skewness: 0.5114345732871983, Kurtosis: 4.984631825400927\ncicero_coaccess_T_pbmc - Skewness: 1.768651418182913, Kurtosis: 13.111343250460077\ncicero_coaccess_mono_pbmc - Skewness: 1.739010041436627, Kurtosis: 12.763211231500184\nsignac_score_LCL_shareseq - Skewness: 1.1962061666318555, Kurtosis: 2.7224208197819966\nscent_beta_LCL_shareseq - Skewness: 0.03416580591059178, Kurtosis: 0.8613382237606011\ncicero_coaccess_LCL_shareseq - Skewness: 1.0716516023977793, Kurtosis: 11.105069093368112\nsignac_score_B_neurips - Skewness: 1.346984995058687, Kurtosis: 6.794635112924402\nsignac_score_T_neurips - Skewness: 1.659415972640365, Kurtosis: 13.329458708841063\nsignac_score_mono_neurips - Skewness: 0.935366730978168, Kurtosis: 4.526907468801446\nsignac_score_eryth_neurips - Skewness: 1.0027767656313344, Kurtosis: 3.9096448970727415\nsignac_score_DC_neurips - Skewness: 0.7912869569743752, Kurtosis: 1.7118955249498216\nscent_beta_B_neurips - Skewness: 0.5549481496764296, Kurtosis: 6.607314168129818\nscent_beta_T_neurips - Skewness: 0.4588385371604953, Kurtosis: 3.2501666541516787\nscent_beta_mono_neurips - Skewness: -0.37543149973669016, Kurtosis: 2.7891877367136253\nscent_beta_eryth_neurips - Skewness: -0.2809117916665768, Kurtosis: 4.009338044415857\nscent_beta_DC_neurips - Skewness: -3.686403336263882, Kurtosis: 168.93975273137204\ncicero_coaccess_B_neurips - Skewness: 2.5635519672308664, Kurtosis: 30.700215168442483\ncicero_coaccess_T_neurips - Skewness: 2.873556323749471, Kurtosis: 44.",
                "lineage": "62101"
            }
        ],
        "622": [],
        "623": [],
        "624": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'group' not in all_data.columns:\n        all_data['group'] = all_data['snp'].astype(str) + '_' + all_data['gene'].astype(str)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0.1,\n            \"lambda\": 1.0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train, enable_categorical=True)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0115500345856636,
                "model_info": "",
                "lineage": "62401"
            }
        ],
        "625": [],
        "626": [],
        "627": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['biological_relevance'] = all_data['snp_gene_distance']  # Assuming biological relevance is derived from SNP-gene distance\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "",
                "lineage": "62701"
            }
        ],
        "628": [],
        "629": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance_log' not in all_data.columns:\n        all_data['snp_tss_distance_log'] = np.log(all_data['snp_tss_distance'] + 1e-6)\n    predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "62901"
            }
        ],
        "630": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['biological_relevance'] = all_data['snp_gene_distance']  # Assuming biological relevance is based on snp_gene_distance\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "",
                "lineage": "63001"
            }
        ],
        "631": [],
        "632": [],
        "633": [],
        "634": [],
        "635": [],
        "636": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'chromatin_accessibility_data' in all_data.columns:\n        all_data['chromatin_accessibility_effect'] = all_data['chromatin_accessibility_data'] * all_data['snp_tss_distance']\n        predictors += ['chromatin_accessibility_effect']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "63601"
            }
        ],
        "637": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['cross_val_score'] = np.nan\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        cv_results = xgb.cv(params, dtrain, num_boost_round=1000, nfold=5, metrics=\"auc\", seed=seed, early_stopping_rounds=50)\n        all_data.loc[train_mask, 'cross_val_score'] = cv_results['test-auc-mean'].iloc[-1]\n\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "63701"
            }
        ],
        "638": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression'].fillna(0, inplace=True)\n        predictors += ['gene_expression']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        all_data['gene_ontology_terms'] = all_data['gene_ontology_terms'].astype(str)\n        predictors += ['gene_ontology_terms']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "63801"
            }
        ],
        "639": [],
        "640": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'gene' in all_data.columns:\n        all_data['synthetic_variant'] = all_data['snp'] + '_synthetic'\n        predictors += ['synthetic_variant']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].select_dtypes(include=[np.number]).values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].select_dtypes(include=[np.number]).values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "64001"
            }
        ],
        "641": [],
        "642": [],
        "643": [],
        "644": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n        predictors += ['snp_gene_distance_log']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['snp_tss_distance_log'] = np.log1p(all_data['snp_tss_distance'])\n        predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        trainable_params = bst.get_dump()[0].count('[')\n        print(f\"Trainable parameters for chromosome {chrom}: {trainable_params}\")\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Trainable parameters for chromosome chr1: 38\nTrainable parameters for chromosome chr10: 37\nTrainable parameters for chromosome chr11: 32\nTrainable parameters for chromosome chr12: 31\nTrainable parameters for chromosome chr13: 35\nTrainable parameters for chromosome chr14: 34\nTrainable parameters for chromosome chr15: 36\nTrainable parameters for chromosome chr16: 40\nTrainable parameters for chromosome chr17: 37\nTrainable parameters for chromosome chr18: 33\nTrainable parameters for chromosome chr19: 36\nTrainable parameters for chromosome chr2: 34\nTrainable parameters for chromosome chr20: 35\nTrainable parameters for chromosome chr21: 38\nTrainable parameters for chromosome chr22: 31\nTrainable parameters for chromosome chr3: 32\nTrainable parameters for chromosome chr4: 34\nTrainable parameters for chromosome chr5: 27\nTrainable parameters for chromosome chr6: 31\nTrainable parameters for chromosome chr7: 30\nTrainable parameters for chromosome chr8: 26\nTrainable parameters for chromosome chr9: 36",
                "lineage": "64401"
            }
        ],
        "645": [],
        "646": [],
        "647": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'gene_regulatory_network' in all_data.columns:\n        all_data['regulatory_feature'] = all_data['gene_regulatory_network']\n        predictors += ['regulatory_feature']\n\n    if 'interaction_score' in all_data.columns:\n        all_data['interaction_score_squared'] = all_data['interaction_score'] ** 2\n        predictors += ['interaction_score_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "64701"
            }
        ],
        "648": [],
        "649": [],
        "650": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.where(all_data['closest_tss'] > 0, all_data['snp_tss_distance'], np.nan)\n        predictors += ['snp_closest_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146939482056787,
                "model_info": "",
                "lineage": "65001"
            }
        ],
        "651": [],
        "652": [],
        "653": [],
        "654": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "65401"
            }
        ],
        "655": [],
        "656": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'group' not in all_data.columns:\n        all_data['group'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0.1,\n            \"lambda\": 1.0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train, enable_categorical=True)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0115500345856636,
                "model_info": "",
                "lineage": "65601"
            }
        ],
        "657": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        feature_importances = bst.get_score(importance_type='weight')\n        top_k_features = sorted(feature_importances.items(), key=lambda x: x[1], reverse=True)[:10]\n        print(\"Top-k feature importances:\", top_k_features)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Top-k feature importances: [('f30', 184.0), ('f34', 139.0), ('f31', 57.0), ('f1', 52.0), ('f32', 43.0), ('f24', 41.0), ('f13', 40.0), ('f14', 37.0), ('f12', 36.0), ('f5', 32.0)]\nTop-k feature importances: [('f30', 175.0), ('f34', 144.0), ('f31', 67.0), ('f1', 65.0), ('f32', 48.0), ('f24', 39.0), ('f13', 35.0), ('f29', 33.0), ('f12', 31.0), ('f27', 31.0)]\nTop-k feature importances: [('f30', 179.0), ('f34', 144.0), ('f31', 67.0), ('f1', 57.0), ('f32', 43.0), ('f13', 41.0), ('f14', 41.0), ('f24', 38.0), ('f12', 35.0), ('f5', 34.0)]\nTop-k feature importances: [('f30', 191.0), ('f34', 135.0), ('f31', 65.0), ('f1', 61.0), ('f24', 47.0), ('f32', 36.0), ('f14', 34.0), ('f13', 32.0), ('f15', 31.0), ('f27', 30.0)]\nTop-k feature importances: [('f30', 176.0), ('f34', 130.0), ('f31', 69.0), ('f1', 66.0), ('f32', 56.0), ('f24', 44.0), ('f8', 29.0), ('f27', 29.0), ('f13', 28.0), ('f14', 28.0)]\nTop-k feature importances: [('f30', 192.0), ('f34', 144.0), ('f31', 66.0), ('f1', 55.0), ('f27', 39.0), ('f24', 36.0), ('f32', 35.0), ('f13', 34.0), ('f14', 31.0), ('f29', 31.0)]\nTop-k feature importances: [('f30', 182.0), ('f34', 129.0), ('f31', 69.0), ('f1', 61.0), ('f24', 40.0), ('f32', 37.0), ('f8', 32.0), ('f14', 32.0), ('f12', 31.0), ('f15', 30.0)]\nTop-k feature importances: [('f30', 187.0), ('f34', 144.0), ('f31', 73.0), ('f1', 63.0), ('f24', 40.0), ('f32', 36.0), ('f15', 30.0), ('f27', 29.0), ('f12', 27.0), ('f13', 27.0)]\nTop-k feature importances: [('f30', 200.0), ('f34', 153.0), ('f1', 70.0), ('f31', 65.0), ('f24', 39.0), ('f13', 34.0), ('f12', 33.0), ('f2', 29.0), ('f15', 29.0), ('f16', 29.0)]\nTop-k feature importances: [('f30', 208.0), ('f34', 144.0), ('f31', 67.0), ('f1', 62.0), ('f14', 38.0), ('f24', 37.0), ('f29', 35.0), ('f8', 33.0), ('f13', 32.0), ('f27', 31.0)]\nTop-k feature importances: [('f30', 187.0), ('f34', 144.0), ('f31', 62.0), ('f1', 52.0), ('f24', 42.0), ('f32', 41.0), ('f13', 38.0), ('f15', 36.0), ('f27', 30.0), ('f7', 28.0)]\nTop-k feature importances: [('f30', 18",
                "lineage": "65701"
            }
        ],
        "658": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n        print(f\"Chromosome: {chrom}, Seed: {seed}, AUC: {bst.best_score}\")\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Chromosome: chr1, Seed: 511, AUC: 0.8136192500840902\nChromosome: chr10, Seed: 511, AUC: 0.8152640693518544\nChromosome: chr11, Seed: 511, AUC: 0.8144230875002394\nChromosome: chr12, Seed: 511, AUC: 0.8129239062805612\nChromosome: chr13, Seed: 511, AUC: 0.8133760843922639\nChromosome: chr14, Seed: 511, AUC: 0.8123569411500808\nChromosome: chr15, Seed: 511, AUC: 0.8137217756729529\nChromosome: chr16, Seed: 511, AUC: 0.812871041272809\nChromosome: chr17, Seed: 511, AUC: 0.8125682468444517\nChromosome: chr18, Seed: 511, AUC: 0.8143275413502855\nChromosome: chr19, Seed: 511, AUC: 0.8101191144330016\nChromosome: chr2, Seed: 511, AUC: 0.8147827569183301\nChromosome: chr20, Seed: 511, AUC: 0.813032184056285\nChromosome: chr21, Seed: 511, AUC: 0.8130839628715353\nChromosome: chr22, Seed: 511, AUC: 0.8129385225553049\nChromosome: chr3, Seed: 511, AUC: 0.8140823180840588\nChromosome: chr4, Seed: 511, AUC: 0.8144144703332998\nChromosome: chr5, Seed: 511, AUC: 0.8148673854794265\nChromosome: chr6, Seed: 511, AUC: 0.8143714566934567\nChromosome: chr7, Seed: 511, AUC: 0.8136072877916435\nChromosome: chr8, Seed: 511, AUC: 0.8136992582176745\nChromosome: chr9, Seed: 511, AUC: 0.8144191668626093",
                "lineage": "65801"
            }
        ],
        "659": [],
        "660": [],
        "661": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['interaction_feature'] = all_data['snp_tss_distance'] * all_data['gene_expression']\n        predictors += ['interaction_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "66101"
            }
        ],
        "662": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.feature_selection import SelectFromModel\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    X_all = all_data[predictors].values\n    y_all = all_data['positive'].values\n\n    if len(np.unique(y_all)) < 2:\n        raise ValueError(\"Insufficient classes in the target variable for classification.\")\n\n    if np.any(y_all < 0):\n        y_all = np.where(y_all < 0, 0, y_all)\n\n    selector = SelectFromModel(xgb.XGBClassifier()).fit(X_all, y_all)\n    selected_features = selector.get_support(indices=True)\n    predictors = [predictors[i] for i in selected_features]\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.9392843961094971,
                "model_info": "",
                "lineage": "66201"
            }
        ],
        "663": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = np.sqrt((all_data['snp_tss_distance'] ** 2) + (all_data['closest_tss'] ** 2))\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0130528941819117,
                "model_info": "",
                "lineage": "66301"
            }
        ],
        "664": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_binary'] = (all_data['closest_tss'] > 0).astype(int)\n        predictors += ['closest_tss_binary']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n    feature_importance_logs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        feature_importance = bst.get_score(importance_type='weight')\n        top_k_features = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)[:10]\n        feature_importance_logs.append(top_k_features)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    print(\"Top-k feature importances:\", feature_importance_logs)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "Top-k feature importances: [[('f30', 183.0), ('f34', 139.0), ('f31', 58.0), ('f1', 52.0), ('f32', 42.0), ('f13', 41.0), ('f24', 41.0), ('f14', 38.0), ('f12', 37.0), ('f5', 36.0)], [('f30', 173.0), ('f34', 147.0), ('f31', 66.0), ('f1', 61.0), ('f32', 45.0), ('f24', 39.0), ('f13', 30.0), ('f29', 28.0), ('f8', 27.0), ('f14', 27.0)], [('f30', 172.0), ('f34', 149.0), ('f31', 68.0), ('f1', 56.0), ('f32', 45.0), ('f13', 41.0), ('f14', 40.0), ('f24', 39.0), ('f27', 37.0), ('f5', 32.0)], [('f30', 194.0), ('f34', 134.0), ('f31', 64.0), ('f1', 59.0), ('f24', 50.0), ('f14', 37.0), ('f12', 33.0), ('f32', 33.0), ('f13', 32.0), ('f15', 31.0)], [('f30', 170.0), ('f34', 136.0), ('f1', 74.0), ('f31', 68.0), ('f32', 61.0), ('f24', 45.0), ('f27', 34.0), ('f13', 33.0), ('f14', 32.0), ('f12', 30.0)], [('f30', 192.0), ('f34', 144.0), ('f31', 66.0), ('f1', 55.0), ('f27', 39.0), ('f24', 36.0), ('f32', 35.0), ('f13', 34.0), ('f14', 31.0), ('f29', 31.0)], [('f30', 185.0), ('f34', 140.0), ('f31', 68.0), ('f1', 61.0), ('f24', 40.0), ('f32', 37.0), ('f8', 32.0), ('f14', 32.0), ('f27', 30.0), ('f12', 29.0)], [('f30', 187.0), ('f34', 149.0), ('f31', 73.0), ('f1', 67.0), ('f24', 40.0), ('f32', 33.0), ('f12', 32.0), ('f27', 32.0), ('f5', 29.0), ('f13', 29.0)], [('f30', 198.0), ('f34', 151.0), ('f1', 67.0), ('f31', 65.0), ('f24', 36.0), ('f12', 31.0), ('f13', 30.0), ('f27', 26.0), ('f32', 26.0), ('f2', 25.0)], [('f30', 207.0), ('f34', 152.0), ('f31', 67.0), ('f1', 61.0), ('f14', 38.0), ('f24', 36.0), ('f29', 35.0), ('f8', 33.0), ('f13', 32.0), ('f27', 31.0)], [('f30', 184.0), ('f34', 147.0), ('f31', 64.0), ('f1', 52.0), ('f32', 44.0), ('f13', 41.0), ('f15', 40.0), ('f24', 36.0), ('f27', 31.0), ('f5', 30.0)], [('f30', 183.0), ('f34', 144.0), ('f31', 65.0), ('f1', 62.0), ('f12', 38.0), ('f24', 38.0), ('f14', 35.0), ('f32', 31.0), ('f27', 25.0), ('f13', 24.0)], [('f30', 191.0), ('f34', 149.0), ('f31', 66.0), ('f1', 52.0), ('f32', 44.0), ('f13', 37.0), ('f24', 35.0), ('f14', 28.0), ('f15', 27.0), ('f2', ",
                "lineage": "66401"
            }
        ],
        "665": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'tes' in all_data.columns:\n        all_data['tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.9138212558723391,
                "model_info": "",
                "lineage": "66501"
            }
        ],
        "666": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['NaN_count'] = all_data[predictors].isna().sum(axis=1)\n    all_data['Inf_count'] = np.isinf(all_data[predictors]).sum(axis=1)\n    predictors += ['NaN_count', 'Inf_count']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0119921595959203,
                "model_info": "",
                "lineage": "66601"
            }
        ],
        "667": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    for predictor in predictors:\n        all_data[f'{predictor}_skew'] = skew(all_data[predictor].dropna())\n        all_data[f'{predictor}_kurtosis'] = kurtosis(all_data[predictor].dropna())\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "66701"
            }
        ],
        "668": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_cubed'] = all_data['snp_gene_distance'] ** 3\n        predictors += ['snp_gene_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "66801"
            }
        ],
        "669": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['label_distribution'] = all_data['positive'].value_counts(normalize=True).to_dict()\n    predictors += ['label_distribution']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "66901"
            }
        ],
        "670": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "67001"
            }
        ],
        "671": [],
        "672": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nimport shap\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        explainer = shap.Explainer(bst)\n        shap_values = explainer(X_train)\n        shap_summary = shap.summary_plot(shap_values, feature_names=predictors, show=False)\n        \n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "67201"
            }
        ],
        "673": [],
        "674": [],
        "675": [],
        "676": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom scipy.stats import normaltest\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    dataset_stats = all_data[predictors].describe()\n    print(\"Dataset statistics before training:\\n\", dataset_stats)\n\n    if not (all_data['snp_gene_distance'].isnull().any() or all_data['snp_position'].isnull().any() or all_data['tss'].isnull().any()):\n        stat, p_value = normaltest(all_data[predictors].values.flatten())\n        if p_value < 0.05:\n            print(\"Data does not meet i.i.d. assumptions.\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Dataset statistics before training:\n        signac_score_B_pbmc  ...  snp_tss_distance_squared\ncount         1.073764e+06  ...              6.510755e+06\nmean          1.281964e-02  ...              1.171513e+11\nstd           4.003607e-02  ...              4.965872e+12\nmin          -1.742360e-01  ...              0.000000e+00\n25%          -1.603185e-02  ...              1.469041e+10\n50%           8.287336e-03  ...              5.976705e+10\n75%           3.510972e-02  ...              1.377004e+11\nmax           5.229080e-01  ...              8.409926e+14\n\n[8 rows x 38 columns]",
                "lineage": "67601"
            }
        ],
        "677": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    class_counts = all_data['positive'].value_counts()\n    class_balance = {k: v / len(all_data) for k, v in class_counts.items()}\n    print(f\"Class Balance: {class_balance}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Class Balance: {-1: 0.9927704238066954, 0: 0.005796285866904112, 1: 0.0014332903264004185}",
                "lineage": "67701"
            }
        ],
        "678": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['gradient_norm'] = np.nan\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        gradient_info = bst.get_dump()[0].split('\\n')[0].split()[1:]\n        gradient_values = []\n        for val in gradient_info:\n            if '=' in val:\n                try:\n                    gradient_values.append(float(val.split('=')[1]))\n                except ValueError:\n                    continue\n        all_data.loc[train_mask, 'gradient_norm'] = np.linalg.norm(gradient_values)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "67801"
            }
        ],
        "679": [],
        "680": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data = all_data.dropna(subset=predictors)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.12019816586328044,
                "model_info": "",
                "lineage": "68001"
            }
        ],
        "681": [],
        "682": [],
        "683": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'chromatin_accessibility_data' in all_data.columns and 'snp_tss_distance' in all_data.columns:\n        all_data['chromatin_accessibility_effect'] = all_data['chromatin_accessibility_data'] * all_data['snp_tss_distance']\n        predictors += ['chromatin_accessibility_effect']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "68301"
            }
        ],
        "684": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n        predictors += ['snp_tss_distance_squared']\n\n    if 'interaction_score' in all_data.columns:\n        all_data['interaction_score_squared'] = all_data['interaction_score'] ** 2\n        predictors += ['interaction_score_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "68401"
            }
        ],
        "685": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n        predictors += ['snp_gene_distance_log']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['snp_tss_distance_log'] = np.log1p(all_data['snp_tss_distance'])\n        predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    misclassified_instances = all_data[(all_data['positive'] == 0) & (all_data[LOO_colname].isin(chromosomes))]\n    misclassified_instances['predicted_prob'] = bst.predict(xgb.DMatrix(misclassified_instances[predictors].values))\n    print(misclassified_instances[['snp', 'gene', 'predicted_prob']])\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "snp     gene  predicted_prob\n742          chr1-1001869-1001870     AGRN        0.519714\n847          chr1-1002148-1002149    PERM1        0.393080\n968        chr1-10022362-10022363    PEX14        0.034986\n1111     chr1-100297547-100297548   LRRC39        0.090908\n1319     chr1-100342012-100342013   LRRC39        0.058903\n...                           ...      ...             ...\n6889934    chr9-99182084-99182085    ANKS6        0.031537\n6889998    chr9-99193067-99193068    ANKS6        0.030285\n6890328    chr9-99281781-99281782  COL15A1        0.031966\n6890591    chr9-99389518-99389519  COL15A1        0.027149\n6890665        chr9-994551-994552    KANK1        0.027667\n\n[39943 rows x 3 columns]",
                "lineage": "68501"
            }
        ],
        "686": [],
        "687": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0.1,\n            \"lambda\": 1.0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0115500345856636,
                "model_info": "",
                "lineage": "68701"
            }
        ],
        "688": [],
        "689": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['snp_tss_distance_log'] = np.log1p(all_data['snp_tss_distance'])\n        predictors += ['snp_tss_distance_log']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n        predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    print(f\"Training dataset size: {X_train.shape[0]}\")\n    print(f\"Number of predictors: {len(predictors)}\")\n    print(f\"Class distribution: {np.bincount(y_train)}\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "Training dataset size: 47569\nNumber of predictors: 39\nClass distribution: [38159  9410]",
                "lineage": "68901"
            }
        ],
        "690": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance_log' not in all_data.columns:\n        all_data['snp_tss_distance_log'] = np.log1p(all_data['snp_tss_distance'])\n        predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "69001"
            }
        ],
        "691": [],
        "692": [],
        "693": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['weighted_distance'] = all_data['snp_gene_distance'] * all_data['snp_gene_distance_inverse']\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "69301"
            }
        ],
        "694": [],
        "695": [],
        "696": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "69601"
            }
        ],
        "697": [],
        "698": [],
        "699": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n        predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "69901"
            }
        ],
        "700": [],
        "701": [],
        "702": [],
        "703": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['biological_relevance'] = all_data['snp_gene_distance'] / (all_data['snp_gene_distance'].max() + 1e-6)\n        predictors += ['biological_relevance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "70301"
            }
        ],
        "704": [],
        "705": [],
        "706": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n        predictors += ['snp_gene_distance_log']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_range'] = all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min()\n        predictors += ['snp_gene_distance_range']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "70601"
            }
        ],
        "707": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'biological_relevance' in all_data.columns:\n        predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "",
                "lineage": "70701"
            }
        ],
        "708": [],
        "709": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['model_run_id'] = f\"{seed}_{np.random.randint(1, 10000)}\"\n    predictors += ['model_run_id']\n\n    print(f\"Total trainable parameters: {len(predictors)}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Total trainable parameters: 39",
                "lineage": "70901"
            }
        ],
        "710": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'group' not in all_data.columns:\n        all_data['group'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0,\n            \"lambda\": 0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0115478395071595,
                "model_info": "",
                "lineage": "71001"
            }
        ],
        "711": [],
        "712": [],
        "713": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_binary'] = all_data['closest_tss'].astype(int)\n        predictors += ['closest_tss_binary']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n    best_params = None\n    best_auc = 0\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        if bst.best_score > best_auc:\n            best_auc = bst.best_score\n            best_params = params\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    print(f\"Best Hyper-parameters: {best_params}, Best AUC: {best_auc}\")\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "Best Hyper-parameters: {'max_depth': 10, 'eta': 0.05, 'gamma': 10, 'min_child_weight': 6, 'subsample': 0.6, 'scale_pos_weight': 1, 'objective': 'binary:logistic', 'eval_metric': 'auc', 'nthread': 24, 'seed': 511}, Best AUC: 0.8146619588196247",
                "lineage": "71301"
            }
        ],
        "714": [],
        "715": [],
        "716": [],
        "717": [],
        "718": [],
        "719": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['interaction_feature'] = all_data['gene_expression'] * all_data['snp_tss_distance']\n        predictors += ['interaction_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "71901"
            }
        ],
        "720": [],
        "721": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    all_data['snp_tss_distance_log'] = np.log1p(all_data['snp_tss_distance'])\n    predictors += ['snp_gene_distance_log', 'snp_tss_distance_log']\n\n    predictions_dfs = []\n    cv_scores = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n        cv_scores.append(bst.best_score)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    mean_cv_score = np.mean(cv_scores)\n    std_cv_score = np.std(cv_scores)\n\n    print(f\"Cross-validation mean AUC: {mean_cv_score:.4f}, std: {std_cv_score:.4f}\")\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "Cross-validation mean AUC: 0.8135, std: 0.0010",
                "lineage": "72101"
            }
        ],
        "722": [],
        "723": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression'] = all_data['gene_expression'].fillna(0)\n        predictors += ['gene_expression']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        all_data['gene_ontology_terms'] = all_data['gene_ontology_terms'].astype(str)\n        predictors += ['gene_ontology_terms']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "72301"
            }
        ],
        "724": [],
        "725": [],
        "726": [],
        "727": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0.1,\n            \"lambda\": 1.0,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0115500345856636,
                "model_info": "",
                "lineage": "72701"
            }
        ],
        "728": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'regulatory_feature' in all_data.columns:\n        predictors += ['regulatory_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "72801"
            }
        ],
        "729": [],
        "730": [],
        "731": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    low_confidence_threshold = 0.5\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        low_confidence_predictions = np.sum(pred_prob < low_confidence_threshold) / len(pred_prob) * 100\n        print(f\"Chromosome: {chrom}, Low-confidence predictions: {low_confidence_predictions:.2f}%\")\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Chromosome: chr1, Low-confidence predictions: 98.37%\nChromosome: chr10, Low-confidence predictions: 98.37%\nChromosome: chr11, Low-confidence predictions: 98.50%\nChromosome: chr12, Low-confidence predictions: 98.49%\nChromosome: chr13, Low-confidence predictions: 98.53%\nChromosome: chr14, Low-confidence predictions: 98.50%\nChromosome: chr15, Low-confidence predictions: 98.52%\nChromosome: chr16, Low-confidence predictions: 98.59%\nChromosome: chr17, Low-confidence predictions: 98.38%\nChromosome: chr18, Low-confidence predictions: 98.37%\nChromosome: chr19, Low-confidence predictions: 98.46%\nChromosome: chr2, Low-confidence predictions: 98.45%\nChromosome: chr20, Low-confidence predictions: 98.44%\nChromosome: chr21, Low-confidence predictions: 98.38%\nChromosome: chr22, Low-confidence predictions: 98.41%\nChromosome: chr3, Low-confidence predictions: 98.45%\nChromosome: chr4, Low-confidence predictions: 98.32%\nChromosome: chr5, Low-confidence predictions: 98.36%\nChromosome: chr6, Low-confidence predictions: 98.75%\nChromosome: chr7, Low-confidence predictions: 98.47%\nChromosome: chr8, Low-confidence predictions: 98.42%\nChromosome: chr9, Low-confidence predictions: 98.40%",
                "lineage": "73101"
            }
        ],
        "732": [],
        "733": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance_squared' in all_data.columns:\n        all_data['snp_tss_distance_cubed'] = all_data['snp_tss_distance_squared'] * all_data['snp_tss_distance']\n        predictors += ['snp_tss_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "73301"
            }
        ],
        "734": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance_squared' in all_data.columns:\n        all_data['snp_tss_distance_cubed'] = all_data['snp_tss_distance'] ** 3\n        predictors += ['snp_tss_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "73401"
            }
        ],
        "735": [],
        "736": [],
        "737": [],
        "738": [],
        "739": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['dataset_mean'] = all_data['positive'].mean()\n    all_data['dataset_std'] = all_data['positive'].std()\n    predictors += ['dataset_mean', 'dataset_std']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "73901"
            }
        ],
        "740": [],
        "741": [],
        "742": [],
        "743": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_binary'] = (all_data['closest_tss'] > 0).astype(int)\n        predictors += ['closest_tss_binary']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['log_snp_tss_distance'] = np.log1p(all_data['snp_tss_distance'])\n        predictors += ['log_snp_tss_distance']\n    \n    if 'snp_gene_distance' in all_data.columns:\n        all_data['log_snp_gene_distance'] = np.log1p(all_data['snp_gene_distance'])\n        predictors += ['log_snp_gene_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    evals_result = bst.get_dump()[0]\n    print(evals_result)\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "0:[f32<3.13096825e-05] yes=1,no=2,missing=2\n\t1:[f32<1.05855952e-05] yes=3,no=4,missing=4\n\t\t3:[f31<1] yes=7,no=8,missing=8\n\t\t\t7:[f34<172870] yes=15,no=16,missing=16\n\t\t\t\t15:[f34<29391] yes=29,no=30,missing=30\n\t\t\t\t\t29:leaf=0.03194144\n\t\t\t\t\t30:leaf=-0.0380146764\n\t\t\t\t16:leaf=-0.0509200692\n\t\t\t8:[f0<0.0221145153] yes=17,no=18,missing=17\n\t\t\t\t17:leaf=-0.013348761\n\t\t\t\t18:leaf=0.059308093\n\t\t4:[f32<1.8186116e-05] yes=9,no=10,missing=10\n\t\t\t9:[f31<1] yes=19,no=20,missing=20\n\t\t\t\t19:[f1<0.0150844818] yes=31,no=32,missing=31\n\t\t\t\t\t31:leaf=-0.0231423303\n\t\t\t\t\t32:[f23<0.071355544] yes=49,no=50,missing=50\n\t\t\t\t\t\t49:leaf=-0.0132701639\n\t\t\t\t\t\t50:leaf=0.036721915\n\t\t\t\t20:[f1<-0.00924156513] yes=33,no=34,missing=33\n\t\t\t\t\t33:leaf=0.000681628881\n\t\t\t\t\t34:leaf=0.0299048778\n\t\t\t10:[f27<0.0178797487] yes=21,no=22,missing=21\n\t\t\t\t21:[f15<-0.00134428695] yes=35,no=36,missing=36\n\t\t\t\t\t35:[f6<-0.104196705] yes=51,no=52,missing=51\n\t\t\t\t\t\t51:leaf=0.00844773557\n\t\t\t\t\t\t52:[f2<-0.0134997452] yes=63,no=64,missing=63\n\t\t\t\t\t\t\t63:leaf=-0.00553875417\n\t\t\t\t\t\t\t64:leaf=0.0708194003\n\t\t\t\t\t36:leaf=0.00340000354\n\t\t\t\t22:leaf=0.0423241071\n\t2:[f30<8697] yes=5,no=6,missing=6\n\t\t5:[f34<29391] yes=11,no=12,missing=11\n\t\t\t11:[f34<4056] yes=23,no=24,missing=24\n\t\t\t\t23:[f15<0.0273243822] yes=37,no=38,missing=37\n\t\t\t\t\t37:leaf=0.146306321\n\t\t\t\t\t38:leaf=0.0677675232\n\t\t\t\t24:[f24<0.0072977799] yes=39,no=40,missing=39\n\t\t\t\t\t39:[f3<-0.0413993485] yes=53,no=54,missing=54\n\t\t\t\t\t\t53:leaf=0.0392310731\n\t\t\t\t\t\t54:leaf=0.110815108\n\t\t\t\t\t40:leaf=0.159393311\n\t\t\t12:leaf=0.057433594\n\t\t6:[f32<4.02738624e-05] yes=13,no=14,missing=14\n\t\t\t13:[f12<0.00833670329] yes=25,no=26,missing=26\n\t\t\t\t25:[f25<-0.128194466] yes=41,no=42,missing=41\n\t\t\t\t\t41:leaf=-0.0397665538\n\t\t\t\t\t42:[f23<0.00813949574] yes=55,no=56,missing=56\n\t\t\t\t\t\t55:leaf=0.0196506493\n\t\t\t\t\t\t56:leaf=0.0858826414\n\t\t\t\t26:[f13<0.00461715739] yes=43,no=44,missing=43\n\t\t\t\t\t43:leaf=0.0412942506\n\t\t\t\t\t44:leaf=0.0971041173\n\t\t\t14:[f1<-0.0043006679] yes=27,no=28,missing=27\n\t\t\t\t27:[f34<21321] yes=45,no=46,missing=46\n\t\t\t\t\t45:[f12<-",
                "lineage": "74301"
            }
        ],
        "744": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_distance' in all_data.columns and 'snp_tss_distance' in all_data.columns:\n        all_data['combined_distance'] = all_data['snp_gene_distance'] + all_data['snp_tss_distance']\n        predictors += ['combined_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0114627488938828,
                "model_info": "",
                "lineage": "74401"
            }
        ],
        "745": [],
        "746": [],
        "747": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression_filled'] = all_data['gene_expression'].fillna(0)\n        predictors += ['gene_expression_filled']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        all_data['gene_ontology_terms_str'] = all_data['gene_ontology_terms'].astype(str)\n        predictors += ['gene_ontology_terms_str']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "74701"
            }
        ],
        "748": [],
        "749": [],
        "750": [],
        "751": [],
        "752": [],
        "753": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    correlation_matrix = all_data[predictors].corr().abs()\n    upper_triangle = correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape), k=1).astype(bool))\n    to_drop = [column for column in upper_triangle.columns if any(upper_triangle[column] > 0.9)]\n    predictors = [feature for feature in predictors if feature not in to_drop]\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0146954095164433,
                "model_info": "",
                "lineage": "75301"
            }
        ],
        "754": [],
        "755": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['performance_snapshot'] = 0\n\n    dataset_stats = {\n        'num_samples': len(all_data),\n        'num_features': len(predictors),\n        'positive_samples': all_data['positive'].sum(),\n        'negative_samples': len(all_data) - all_data['positive'].sum()\n    }\n    print(dataset_stats)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        all_data.loc[pred_mask, 'performance_snapshot'] = bst.best_score\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "{'num_samples': 6891137, 'num_features': 38, 'positive_samples': -6831440, 'negative_samples': 13722577}",
                "lineage": "75501"
            }
        ],
        "756": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n    predictors += ['tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 0.9138212558723391,
                "model_info": "",
                "lineage": "75601"
            }
        ],
        "757": [],
        "758": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['closest_tss_binary'] = (all_data['closest_tss'] > 0).astype(int)\n        predictors += ['closest_tss_binary']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        feature_importances = bst.get_score(importance_type='weight')\n        sorted_importances = sorted(feature_importances.items(), key=lambda x: x[1], reverse=True)[:5]\n        for feature, importance in sorted_importances:\n            print(f\"Feature: {feature}, Importance: {importance}\")\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0170682399443498,
                "model_info": "Feature: f30, Importance: 183.0\nFeature: f34, Importance: 139.0\nFeature: f31, Importance: 58.0\nFeature: f1, Importance: 52.0\nFeature: f32, Importance: 42.0\nFeature: f30, Importance: 173.0\nFeature: f34, Importance: 147.0\nFeature: f31, Importance: 66.0\nFeature: f1, Importance: 61.0\nFeature: f32, Importance: 45.0\nFeature: f30, Importance: 172.0\nFeature: f34, Importance: 149.0\nFeature: f31, Importance: 68.0\nFeature: f1, Importance: 56.0\nFeature: f32, Importance: 45.0\nFeature: f30, Importance: 194.0\nFeature: f34, Importance: 134.0\nFeature: f31, Importance: 64.0\nFeature: f1, Importance: 59.0\nFeature: f24, Importance: 50.0\nFeature: f30, Importance: 170.0\nFeature: f34, Importance: 136.0\nFeature: f1, Importance: 74.0\nFeature: f31, Importance: 68.0\nFeature: f32, Importance: 61.0\nFeature: f30, Importance: 192.0\nFeature: f34, Importance: 144.0\nFeature: f31, Importance: 66.0\nFeature: f1, Importance: 55.0\nFeature: f27, Importance: 39.0\nFeature: f30, Importance: 185.0\nFeature: f34, Importance: 140.0\nFeature: f31, Importance: 68.0\nFeature: f1, Importance: 61.0\nFeature: f24, Importance: 40.0\nFeature: f30, Importance: 187.0\nFeature: f34, Importance: 149.0\nFeature: f31, Importance: 73.0\nFeature: f1, Importance: 67.0\nFeature: f24, Importance: 40.0\nFeature: f30, Importance: 198.0\nFeature: f34, Importance: 151.0\nFeature: f1, Importance: 67.0\nFeature: f31, Importance: 65.0\nFeature: f24, Importance: 36.0\nFeature: f30, Importance: 207.0\nFeature: f34, Importance: 152.0\nFeature: f31, Importance: 67.0\nFeature: f1, Importance: 61.0\nFeature: f14, Importance: 38.0\nFeature: f30, Importance: 184.0\nFeature: f34, Importance: 147.0\nFeature: f31, Importance: 64.0\nFeature: f1, Importance: 52.0\nFeature: f32, Importance: 44.0\nFeature: f30, Importance: 183.0\nFeature: f34, Importance: 144.0\nFeature: f31, Importance: 65.0\nFeature: f1, Importance: 62.0\nFeature: f12, Importance: 38.0\nFeature: f30, Importance: 191.0\nFeature: f34, Importance: 149.0\nFeature: f31, Importance: 66.0\nFeature: f1, Importance: 52.0\nFea",
                "lineage": "75801"
            }
        ],
        "759": [],
        "760": [],
        "761": [],
        "762": [],
        "763": [],
        "764": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        trainable_params = len(bst.get_dump()[0].split())\n        frozen_params = len(bst.get_dump()) - trainable_params\n        print(f'Trainable vs Frozen Parameters Ratio: {trainable_params / (frozen_params + 1e-6)}')\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "Trainable vs Frozen Parameters Ratio: 0.16312056714450984\nTrainable vs Frozen Parameters Ratio: 0.13725490179257976\nTrainable vs Frozen Parameters Ratio: 0.10741971195191616\nTrainable vs Frozen Parameters Ratio: 0.16578483215910964\nTrainable vs Frozen Parameters Ratio: 0.1645962730363412\nTrainable vs Frozen Parameters Ratio: 0.12335329326544515\nTrainable vs Frozen Parameters Ratio: 0.1561604582289965\nTrainable vs Frozen Parameters Ratio: 0.25420168013823174\nTrainable vs Frozen Parameters Ratio: 0.1261261259840922\nTrainable vs Frozen Parameters Ratio: 0.1582278478509053\nTrainable vs Frozen Parameters Ratio: 0.16951788465082754\nTrainable vs Frozen Parameters Ratio: 0.4291666648784722\nTrainable vs Frozen Parameters Ratio: 0.7114093911985947\nTrainable vs Frozen Parameters Ratio: 0.12994350267802995\nTrainable vs Frozen Parameters Ratio: 0.10755148729113102\nTrainable vs Frozen Parameters Ratio: 0.19438877716555356\nTrainable vs Frozen Parameters Ratio: 0.11482720165571103\nTrainable vs Frozen Parameters Ratio: 0.08932461863907994\nTrainable vs Frozen Parameters Ratio: 0.16013628592821758\nTrainable vs Frozen Parameters Ratio: 0.1613475174444193\nTrainable vs Frozen Parameters Ratio: 0.08577632998287044\nTrainable vs Frozen Parameters Ratio: 0.6855345868834303",
                "lineage": "76401"
            }
        ],
        "765": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'regulatory_feature' in all_data.columns:\n        predictors += ['regulatory_feature']\n\n    if 'gene_expression' in all_data.columns and 'snp_tss_distance' in all_data.columns:\n        all_data['interaction_feature'] = all_data['gene_expression'] * all_data['snp_tss_distance']\n        predictors += ['interaction_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "76501"
            }
        ],
        "766": [],
        "767": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_gene_linking_score' in all_data.columns and 'functional_genomic_data' in all_data.columns:\n        all_data['combined_feature'] = all_data['snp_gene_linking_score'] * all_data['functional_genomic_data']\n        predictors += ['combined_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "76701"
            }
        ],
        "768": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['snp_tss_distance_cubed'] = all_data['snp_tss_distance'] ** 3\n        predictors += ['snp_tss_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0205484452746336,
                "model_info": "",
                "lineage": "76801"
            }
        ],
        "769": [],
        "770": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_gene_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['combined_distance'] = np.sqrt(all_data['snp_gene_distance']**2 + all_data['snp_tss_distance']**2)\n    predictors += ['combined_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0117743738825637,
                "model_info": "",
                "lineage": "77001"
            }
        ],
        "771": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXX.py",
                "accuracy": 1.0253617631223713,
                "model_info": "",
                "lineage": "77101"
            }
        ],
        "772": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    if 'snp_gene_distance_cubed' not in all_data.columns:\n        all_data['snp_gene_distance_cubed'] = all_data['snp_gene_distance'] ** 3\n        predictors += ['snp_gene_distance_cubed']\n\n    if 'snp_tss_distance_cubed' not in all_data.columns:\n        all_data['snp_tss_distance_cubed'] = all_data['snp_tss_distance'] ** 3\n        predictors += ['snp_tss_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0253617631223713,
                "model_info": "",
                "lineage": "77201"
            }
        ],
        "773": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['adaptive_distance'] = np.abs(all_data['snp_tss_distance'] - all_data['closest_tss'])\n        predictors += ['adaptive_distance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_tss_distance_log'] = np.log1p(all_data['snp_tss_distance'])\n    predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.0253617631223713,
                "model_info": "",
                "lineage": "77301"
            }
        ],
        "774": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['weighted_distance'] = (all_data['snp_tss_distance'] + all_data['closest_tss']) / 2\n        predictors += ['weighted_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    if np.any(np.isnan(X_train)):\n        print(\"Warning: Training data contains NaN values.\")\n    if np.any(np.isinf(X_train)):\n        print(\"Warning: Training data contains infinite values.\")\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.025387794386573,
                "model_info": "Warning: Training data contains NaN values.",
                "lineage": "77401"
            }
        ],
        "775": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "",
                "lineage": "77501"
            }
        ],
        "776": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_tss_distance_cubed'] = all_data['snp_tss_distance'] ** 3\n    predictors += ['snp_tss_distance_cubed']\n\n    all_data['snp_gene_distance_cubed'] = all_data['snp_gene_distance'] ** 3\n    predictors += ['snp_gene_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "",
                "lineage": "77601"
            }
        ],
        "777": [],
        "778": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.0254194773043959,
                "model_info": "",
                "lineage": "77801"
            }
        ],
        "779": [],
        "780": [],
        "781": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    if 'tss' in all_data.columns and 'tes' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 0.9197580031813891,
                "model_info": "",
                "lineage": "78101"
            }
        ],
        "782": [],
        "783": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    if all_data['positive'].value_counts().min() < 10:\n        print(\"Warning: Insufficient training data volume for one or more classes.\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "",
                "lineage": "78301"
            }
        ],
        "784": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "",
                "lineage": "78401"
            }
        ],
        "785": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['weighted_distance'] = all_data['snp_gene_distance'] * all_data['snp_gene_distance_inverse']\n    predictors += ['weighted_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "",
                "lineage": "78501"
            }
        ],
        "786": [],
        "787": [],
        "788": [],
        "789": [],
        "790": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 0.9169708344433467,
                "model_info": "",
                "lineage": "79001"
            }
        ],
        "791": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        low_confidence_threshold = 0.5\n        low_confidence_count = np.sum(pred_prob < low_confidence_threshold)\n        total_predictions = len(pred_prob)\n        low_confidence_percentage = (low_confidence_count / total_predictions) * 100\n        print(f\"Chromosome: {chrom}, Low-confidence predictions: {low_confidence_percentage:.2f}%\")\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "Chromosome: chr1, Low-confidence predictions: 98.44%\nChromosome: chr10, Low-confidence predictions: 98.44%\nChromosome: chr11, Low-confidence predictions: 98.59%\nChromosome: chr12, Low-confidence predictions: 98.54%\nChromosome: chr13, Low-confidence predictions: 98.64%\nChromosome: chr14, Low-confidence predictions: 98.57%\nChromosome: chr15, Low-confidence predictions: 98.56%\nChromosome: chr16, Low-confidence predictions: 98.65%\nChromosome: chr17, Low-confidence predictions: 98.44%\nChromosome: chr18, Low-confidence predictions: 98.38%\nChromosome: chr19, Low-confidence predictions: 98.55%\nChromosome: chr2, Low-confidence predictions: 98.52%\nChromosome: chr20, Low-confidence predictions: 98.49%\nChromosome: chr21, Low-confidence predictions: 98.47%\nChromosome: chr22, Low-confidence predictions: 98.42%\nChromosome: chr3, Low-confidence predictions: 98.47%\nChromosome: chr4, Low-confidence predictions: 98.42%\nChromosome: chr5, Low-confidence predictions: 98.45%\nChromosome: chr6, Low-confidence predictions: 98.79%\nChromosome: chr7, Low-confidence predictions: 98.55%\nChromosome: chr8, Low-confidence predictions: 98.50%\nChromosome: chr9, Low-confidence predictions: 98.52%",
                "lineage": "79101"
            }
        ],
        "792": [],
        "793": [],
        "794": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    if 'tes' in all_data.columns and 'snp_position' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 0.9169708344433467,
                "model_info": "",
                "lineage": "79401"
            }
        ],
        "795": [],
        "796": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    if 'chromatin_accessibility_data' in all_data.columns:\n        all_data['chromatin_accessibility_effect'] = all_data['chromatin_accessibility_data'] * all_data['snp_tss_distance']\n        predictors += ['chromatin_accessibility_effect']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "",
                "lineage": "79601"
            }
        ],
        "797": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    loss = bst.best_score\n    print(f\"Final Loss: {loss}\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "Final Loss: 0.8145767740824029",
                "lineage": "79701"
            }
        ],
        "798": [],
        "799": [],
        "800": [],
        "801": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    if 'gene_interaction' in all_data.columns:\n        all_data['gene_interaction_feature'] = all_data['gene_interaction'] * all_data['snp_gene_distance']\n        predictors += ['gene_interaction_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "",
                "lineage": "80101"
            }
        ],
        "802": [],
        "803": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['combined_distance'] = np.sqrt(all_data['snp_gene_distance_squared'] + all_data['snp_tss_distance_squared'])\n    predictors += ['combined_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.028711305568803,
                "model_info": "",
                "lineage": "80301"
            }
        ],
        "804": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    if 'snp_tss_distance' in all_data.columns:\n        all_data['log_snp_tss_distance'] = np.log1p(all_data['snp_tss_distance'])\n        predictors += ['log_snp_tss_distance']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['log_snp_gene_distance'] = np.log1p(all_data['snp_gene_distance'])\n        predictors += ['log_snp_gene_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        misclassified = all_data.loc[pred_mask]\n        misclassified['predicted_prob'] = pred_prob\n        misclassified['predicted_label'] = (pred_prob > 0.5).astype(int)\n        misclassified = misclassified[misclassified['predicted_label'] != misclassified['positive']]\n        print(misclassified[['snp', 'gene', 'predicted_prob']])\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXX.py",
                "accuracy": 1.027697626993701,
                "model_info": "snp      gene  predicted_prob\n0       chr1-100010848-100010849       AGL        0.057638\n1       chr1-100010848-100010849    CDC14A        0.033125\n2       chr1-100010848-100010849       DBT        0.043494\n3       chr1-100010848-100010849     FRRS1        0.042253\n4       chr1-100010848-100010849    LRRC39        0.057432\n...                          ...       ...             ...\n708682    chr1-99997865-99997866      RTCA        0.039861\n708683    chr1-99997865-99997866  RTCA-AS1        0.039861\n708684    chr1-99997865-99997866     SASS6        0.075286\n708685    chr1-99997865-99997866   SLC35A3        0.265055\n708686    chr1-99997865-99997866    TRMT13        0.075286\n\n[704580 rows x 3 columns]\n                              snp      gene  predicted_prob\n708687  chr10-100006503-100006504     ABCC2        0.044830\n708688  chr10-100006503-100006504   BLOC1S2        0.038664\n708689  chr10-100006503-100006504      CHUK        0.045314\n708690  chr10-100006503-100006504     COX15        0.034719\n708691  chr10-100006503-100006504      CPN1        0.136678\n...                           ...       ...             ...\n964380    chr10-99997437-99997438  OLMALINC        0.029895\n964381    chr10-99997437-99997438    PKD2L1        0.033036\n964382    chr10-99997437-99997438       SCD        0.032113\n964383    chr10-99997437-99997438  SLC25A28        0.029765\n964384    chr10-99997437-99997438     WNT8B        0.026215\n\n[253694 rows x 3 columns]\n                             snp      gene  predicted_prob\n964385   chr11-10020317-10020318       ADM        0.039274\n964386   chr11-10020317-10020318     AMPD3        0.028216\n964387   chr11-10020317-10020318  MTRNR2L8        0.028858\n964388   chr11-10020317-10020318      SBF2        0.127369\n964389   chr11-10020317-10020318    SWAP70        0.031270\n...                          ...       ...             ...\n1377888    chr11-9987249-9987250       ADM        0.035525\n1377889    chr11-9987249-9987250     AMPD3        0.025214\n1377890    chr11",
                "lineage": "80401"
            }
        ],
        "805": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['combined_distance'] = all_data['snp_gene_distance'] + all_data['snp_tss_distance']\n    predictors += ['combined_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.0271188258699735,
                "model_info": "",
                "lineage": "80501"
            }
        ],
        "806": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXX.py",
                "accuracy": 1.0303560248413586,
                "model_info": "",
                "lineage": "80601"
            }
        ],
        "807": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.metrics import confusion_matrix\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['hyper_param_max_depth'] = 10\n    all_data['hyper_param_eta'] = 0.01\n    all_data['hyper_param_gamma'] = 10\n    all_data['hyper_param_min_child_weight'] = 6\n    all_data['hyper_param_subsample'] = 0.6\n    all_data['hyper_param_scale_pos_weight'] = 1\n    predictors += ['hyper_param_max_depth', 'hyper_param_eta', 'hyper_param_gamma', 'hyper_param_min_child_weight', 'hyper_param_subsample', 'hyper_param_scale_pos_weight']\n\n    predictions_dfs = []\n    y_true_all = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n        y_true_all.extend(all_data.loc[pred_mask, 'positive'].values)\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    y_pred = (np.array(predictions[\"pgBoost\"]) > 0.5).astype(int)\n    cm = confusion_matrix(y_true_all, y_pred)\n    print(\"Confusion Matrix:\\n\", cm)\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0303560248413586,
                "model_info": "Confusion Matrix:\n [[      0 6744704   96613]\n [      0   38169    1774]\n [      0    7386    2491]]",
                "lineage": "80701"
            }
        ],
        "808": [],
        "809": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    if 'snp_gene_distance' in all_data.columns:\n        all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1)\n        predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXX.py",
                "accuracy": 1.0303560248413586,
                "model_info": "",
                "lineage": "80901"
            }
        ],
        "810": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    if all_data.shape[0] < 1000:\n        print(\"Warning: Insufficient training data volume for model optimization.\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0303560248413586,
                "model_info": "",
                "lineage": "81001"
            }
        ],
        "811": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1)\n    predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXX.py",
                "accuracy": 1.0303560248413586,
                "model_info": "",
                "lineage": "81101"
            }
        ],
        "812": [],
        "813": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['partial_dependence'] = 0\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        for i, feature in enumerate(predictors):\n            all_data.loc[pred_mask, 'partial_dependence'] += bst.predict(xgb.DMatrix(X_pred)) * (X_pred[:, i].mean() - X_pred[:, i])\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXX.py",
                "accuracy": 1.0303560248413586,
                "model_info": "",
                "lineage": "81301"
            }
        ],
        "814": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXX.py",
                "accuracy": 1.0303560248413586,
                "model_info": "",
                "lineage": "81401"
            }
        ],
        "815": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "81501"
            }
        ],
        "816": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_tss_distance_cubed'] = all_data['snp_tss_distance'] ** 3\n    predictors += ['snp_tss_distance_cubed']\n\n    all_data['snp_gene_distance_cubed'] = all_data['snp_gene_distance'] ** 3\n    predictors += ['snp_gene_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "81601"
            }
        ],
        "817": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss']) * all_data['closest_tss']\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.028730941317681,
                "model_info": "",
                "lineage": "81701"
            }
        ],
        "818": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['tes_distance'] = np.abs(all_data['tes'] - all_data['tss'])\n    predictors += ['tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 0.8564829351824319,
                "model_info": "",
                "lineage": "81801"
            }
        ],
        "819": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['parameter_change_magnitude'] = np.nan\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    nan_count = all_data.isna().sum().to_dict()\n    inf_count = (all_data.replace([np.inf, -np.inf], np.nan).isna().sum()).to_dict()\n    print(f\"NaN counts: {nan_count}, Inf counts: {inf_count}\")\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "NaN counts: {'snp': 0, 'gene': 0, 'peak_pbmc': 0, 'peak_shareseq': 0, 'peak_neurips': 0, 'peak_Xu': 0, 'signac_score_B_pbmc': 5817373, 'signac_score_T_pbmc': 5224205, 'signac_score_mono_pbmc': 5171012, 'scent_beta_B_pbmc': 6466752, 'scent_beta_T_pbmc': 6573884, 'scent_beta_mono_pbmc': 6388518, 'cicero_coaccess_B_pbmc': 5314168, 'cicero_coaccess_T_pbmc': 5288914, 'cicero_coaccess_mono_pbmc': 5299560, 'signac_score_LCL_shareseq': 5580664, 'scent_beta_LCL_shareseq': 6861354, 'cicero_coaccess_LCL_shareseq': 5881535, 'signac_score_B_neurips': 4770071, 'signac_score_T_neurips': 4685451, 'signac_score_mono_neurips': 4662622, 'signac_score_eryth_neurips': 4743504, 'signac_score_DC_neurips': 4921657, 'scent_beta_B_neurips': 6808492, 'scent_beta_T_neurips': 6807268, 'scent_beta_mono_neurips': 6724386, 'scent_beta_eryth_neurips': 6781342, 'scent_beta_DC_neurips': 6603961, 'cicero_coaccess_B_neurips': 4626280, 'cicero_coaccess_T_neurips': 4624891, 'cicero_coaccess_mono_neurips': 4634679, 'cicero_coaccess_eryth_neurips': 4607693, 'cicero_coaccess_DC_neurips': 4626926, 'signac_score_K562_Xu': 4757713, 'scent_beta_K562_Xu': 6134281, 'cicero_coaccess_K562_Xu': 5080516, 'snp_gene_distance': 0, 'closest_tss': 0, 'chr': 0, 'positive': 0, 'train_include': 0, 'tss': 380382, 'tes': 380382, 'snp_position': 0, 'snp_gene_distance_inverse': 0, 'snp_gene_distance_normalized': 0, 'snp_tss_distance': 380382, 'snp_closest_tss_distance': 380382, 'snp_tss_distance_squared': 380382, 'snp_gene_distance_squared': 0, 'snp_gene_tss_interaction': 380382, 'biological_relevance': 0, 'parameter_change_magnitude': 6891137}, Inf counts: {'snp': 0, 'gene': 0, 'peak_pbmc': 0, 'peak_shareseq': 0, 'peak_neurips': 0, 'peak_Xu': 0, 'signac_score_B_pbmc': 5817373, 'signac_score_T_pbmc': 5224205, 'signac_score_mono_pbmc': 5171012, 'scent_beta_B_pbmc': 6466752, 'scent_beta_T_pbmc': 6573884, 'scent_beta_mono_pbmc': 6388518, 'cicero_coaccess_B_pbmc': 5314168, 'cicero_coaccess_T_pbmc': 5288914, 'cicero_coaccess_mono_pbm",
                "lineage": "81901"
            }
        ],
        "820": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_distance_cubed'] = all_data['snp_gene_distance'] ** 3\n    predictors += ['snp_gene_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "82001"
            }
        ],
        "821": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0280729256799674,
                "model_info": "",
                "lineage": "82101"
            }
        ],
        "822": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'tes' in all_data.columns and 'snp_position' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 0.9175678274484294,
                "model_info": "",
                "lineage": "82201"
            }
        ],
        "823": [],
        "824": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_tss_distance_log'] = np.log(all_data['snp_tss_distance'] + 1e-6)\n    predictors += ['snp_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "82401"
            }
        ],
        "825": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'tss' in all_data.columns and 'tes' in all_data.columns:\n        all_data['tss_tes_distance'] = np.abs(all_data['tss'] - all_data['tes'])\n        predictors += ['tss_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 0.8564829351824319,
                "model_info": "",
                "lineage": "82501"
            }
        ],
        "826": [],
        "827": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['log_snp_tss_distance'] = np.log(all_data['snp_tss_distance'] + 1)\n    all_data['log_snp_gene_distance'] = np.log(all_data['snp_gene_distance'] + 1)\n    predictors += ['log_snp_tss_distance', 'log_snp_gene_distance']\n\n    feature_importances = []\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        feature_importance = bst.get_score(importance_type='weight')\n        sorted_importance = sorted(feature_importance.items(), key=lambda x: x[1], reverse=True)[:5]\n        feature_importances.append(sorted_importance)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    print(\"Top-k feature importances:\", feature_importances)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "Top-k feature importances: [[('f30', 704.0), ('f38', 528.0), ('f35', 317.0), ('f34', 282.0), ('f1', 261.0)], [('f30', 785.0), ('f38', 510.0), ('f34', 334.0), ('f35', 329.0), ('f1', 260.0)], [('f30', 762.0), ('f38', 501.0), ('f35', 361.0), ('f34', 307.0), ('f1', 264.0)], [('f30', 825.0), ('f38', 510.0), ('f35', 306.0), ('f34', 280.0), ('f1', 276.0)], [('f30', 731.0), ('f38', 530.0), ('f35', 355.0), ('f34', 307.0), ('f1', 299.0)], [('f30', 776.0), ('f38', 513.0), ('f35', 360.0), ('f34', 323.0), ('f1', 262.0)], [('f30', 757.0), ('f38', 566.0), ('f35', 349.0), ('f34', 307.0), ('f1', 262.0)], [('f30', 769.0), ('f38', 548.0), ('f35', 418.0), ('f1', 307.0), ('f34', 302.0)], [('f30', 806.0), ('f38', 497.0), ('f34', 341.0), ('f1', 292.0), ('f35', 271.0)], [('f30', 823.0), ('f38', 509.0), ('f35', 342.0), ('f34', 331.0), ('f1', 279.0)], [('f30', 763.0), ('f38', 505.0), ('f35', 330.0), ('f34', 314.0), ('f1', 246.0)], [('f30', 786.0), ('f38', 497.0), ('f35', 313.0), ('f34', 305.0), ('f1', 284.0)], [('f30', 708.0), ('f38', 512.0), ('f35', 363.0), ('f34', 338.0), ('f1', 248.0)], [('f30', 798.0), ('f38', 520.0), ('f35', 378.0), ('f34', 331.0), ('f1', 272.0)], [('f30', 725.0), ('f38', 518.0), ('f35', 353.0), ('f34', 348.0), ('f1', 289.0)], [('f30', 775.0), ('f38', 518.0), ('f35', 361.0), ('f34', 313.0), ('f1', 240.0)], [('f30', 749.0), ('f38', 517.0), ('f34', 327.0), ('f35', 315.0), ('f1', 287.0)], [('f30', 822.0), ('f38', 466.0), ('f35', 333.0), ('f34', 310.0), ('f1', 250.0)], [('f30', 860.0), ('f38', 529.0), ('f35', 310.0), ('f1', 298.0), ('f34', 282.0)], [('f30', 770.0), ('f38', 523.0), ('f35', 367.0), ('f34', 320.0), ('f1', 284.0)], [('f30', 796.0), ('f38', 530.0), ('f35', 316.0), ('f34', 304.0), ('f1', 245.0)], [('f30', 745.0), ('f38', 529.0), ('f35', 335.0), ('f34', 289.0), ('f1', 267.0)]]",
                "lineage": "82701"
            }
        ],
        "828": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_tss_distance_mean'] = all_data['snp_tss_distance'].mean()\n    all_data['snp_tss_distance_std'] = all_data['snp_tss_distance'].std()\n    all_data['snp_tss_distance_min'] = all_data['snp_tss_distance'].min()\n    all_data['snp_tss_distance_max'] = all_data['snp_tss_distance'].max()\n    predictors += ['snp_tss_distance_mean', 'snp_tss_distance_std', 'snp_tss_distance_min', 'snp_tss_distance_max']\n\n    corr_matrix = all_data[predictors].corr()\n    highly_correlated_pairs = corr_matrix[corr_matrix.abs() > 0.8].stack().reset_index()\n    highly_correlated_pairs = highly_correlated_pairs[highly_correlated_pairs['level_0'] != highly_correlated_pairs['level_1']]\n    \n    all_data['highly_correlated_pairs'] = [highly_correlated_pairs.values.tolist()] * len(all_data)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "82801"
            }
        ],
        "829": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['combined_distance'] = np.sqrt(all_data['snp_gene_distance_squared'] + all_data['snp_tss_distance_squared'])\n    predictors += ['combined_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0311250648581374,
                "model_info": "",
                "lineage": "82901"
            }
        ],
        "830": [],
        "831": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['prior_distribution'] = 0.5  \n    predictors += ['prior_distribution']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "83101"
            }
        ],
        "832": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n    predictors += ['tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 0.9175678274484294,
                "model_info": "",
                "lineage": "83201"
            }
        ],
        "833": [],
        "834": [],
        "835": [],
        "836": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.metrics import confusion_matrix\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        y_pred = (pred_prob > 0.5).astype(int)\n        cm = confusion_matrix(all_data.loc[pred_mask, 'positive'], y_pred)\n        print(f'Confusion Matrix for chromosome {chrom}:\\n{cm}')\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "Confusion Matrix for chromosome chr1:\n[[     0 693104  10520]\n [     0   3855    194]\n [     0    762    252]]\nConfusion Matrix for chromosome chr10:\n[[     0 249424   3840]\n [     0   1920     91]\n [     0    337     86]]\nConfusion Matrix for chromosome chr11:\n[[     0 405298   5590]\n [     0   1983     91]\n [     0    388    158]]\nConfusion Matrix for chromosome chr12:\n[[     0 326530   4665]\n [     0   1793     79]\n [     0    370    120]]\nConfusion Matrix for chromosome chr13:\n[[     0 111446   1476]\n [     0    663     19]\n [     0    139     39]]\nConfusion Matrix for chromosome chr14:\n[[     0 208795   2864]\n [     0   1030     47]\n [     0    219     78]]\nConfusion Matrix for chromosome chr15:\n[[     0 188927   2637]\n [     0   1685     71]\n [     0    290     79]]\nConfusion Matrix for chromosome chr16:\n[[     0 338103   4386]\n [     0   1834     92]\n [     0    391    126]]\nConfusion Matrix for chromosome chr17:\n[[     0 466589   7012]\n [     0   2904    139]\n [     0    461    199]]\nConfusion Matrix for chromosome chr18:\n[[    0 83645  1283]\n [    0   535    33]\n [    0   133    36]]\nConfusion Matrix for chromosome chr19:\n[[     0 648131   9219]\n [     0   2344    148]\n [     0    487    287]]\nConfusion Matrix for chromosome chr2:\n[[     0 396517   5833]\n [     0   2814     96]\n [     0    558    119]]\nConfusion Matrix for chromosome chr20:\n[[     0 204361   3007]\n [     0   1078     73]\n [     0    218     87]]\nConfusion Matrix for chromosome chr21:\n[[     0 103011   1451]\n [     0    769     40]\n [     0    137     54]]\nConfusion Matrix for chromosome chr22:\n[[     0 209652   3214]\n [     0   1516     68]\n [     0    263    111]]\nConfusion Matrix for chromosome chr3:\n[[     0 323277   4737]\n [     0   2044     85]\n [     0    366     99]]\nConfusion Matrix for chromosome chr4:\n[[     0 196785   3057]\n [     0   1126     49]\n [     0    238     63]]\nConfusion Matrix for chromosome chr5:\n[[     0 258179   3958]\n [     0   1517     77]\n [     0    320     97]",
                "lineage": "83601"
            }
        ],
        "837": [],
        "838": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'snp_gene_distance' in all_data.columns and 'closest_tss' in all_data.columns:\n        all_data['snp_gene_closest_tss_interaction'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n        predictors += ['snp_gene_closest_tss_interaction']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0294351693479609,
                "model_info": "",
                "lineage": "83801"
            }
        ],
        "839": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['class_distribution'] = all_data['positive'].value_counts(normalize=True).to_dict()\n    predictors += ['class_distribution']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "83901"
            }
        ],
        "840": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0280729256799674,
                "model_info": "",
                "lineage": "84001"
            }
        ],
        "841": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'chromatin_accessibility_data' in all_data.columns:\n        all_data['chromatin_accessibility_effect'] = all_data['chromatin_accessibility_data'] * all_data['snp_tss_distance']\n        predictors += ['chromatin_accessibility_effect']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "84101"
            }
        ],
        "842": [],
        "843": [],
        "844": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"logloss\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "84401"
            }
        ],
        "845": [],
        "846": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    print(\"Before scaling:\")\n    print(\"snp_gene_distance:\", all_data['snp_gene_distance'].describe())\n    print(\"snp_position:\", all_data['snp_position'].describe())\n    print(\"tss:\", all_data['tss'].describe())\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    print(\"After scaling:\")\n    print(\"snp_gene_distance_inverse:\", all_data['snp_gene_distance_inverse'].describe())\n    print(\"snp_gene_distance_normalized:\", all_data['snp_gene_distance_normalized'].describe())\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "Before scaling:\nsnp_gene_distance: count    6.891137e+06\nmean     2.461789e+05\nstd      1.439695e+05\nmin      1.004000e+03\n25%      1.210780e+05\n50%      2.439480e+05\n75%      3.701660e+05\nmax      5.009950e+05\nName: snp_gene_distance, dtype: float64\nsnp_position: count    6.891137e+06\nmean     6.882085e+07\nstd      5.691432e+07\nmin      9.800000e+03\n25%      2.647383e+07\n50%      5.083629e+07\n75%      1.026632e+08\nmax      2.489455e+08\nName: snp_position, dtype: float64\ntss: count    6.510755e+06\nmean     6.870973e+07\nstd      5.691093e+07\nmin      1.172100e+04\n25%      2.643834e+07\n50%      5.083465e+07\n75%      1.024614e+08\nmax      2.489062e+08\nName: tss, dtype: float64\nAfter scaling:\nsnp_gene_distance_inverse: count    6.891137e+06\nmean     1.241401e-05\nstd      3.909614e-05\nmin      1.996028e-06\n25%      2.701491e-06\n50%      4.099234e-06\n75%      8.259139e-06\nmax      9.960159e-04\nName: snp_gene_distance_inverse, dtype: float64\nsnp_gene_distance_normalized: count    6.891137e+06\nmean     4.903586e-01\nstd      2.879441e-01\nmin      0.000000e+00\n25%      2.401523e-01\n50%      4.858967e-01\n75%      7.383373e-01\nmax      1.000000e+00\nName: snp_gene_distance_normalized, dtype: float64",
                "lineage": "84601"
            }
        ],
        "847": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['skewness'] = all_data[predictors].apply(lambda x: x.skew(), axis=1)\n    all_data['kurtosis'] = all_data[predictors].apply(lambda x: x.kurtosis(), axis=1)\n    predictors += ['skewness', 'kurtosis']\n\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.031080667195417,
                "model_info": "",
                "lineage": "84701"
            }
        ],
        "848": [],
        "849": [],
        "850": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'snp_gene_linking_score' in all_data.columns and 'functional_genomic_data' in all_data.columns:\n        all_data['combined_feature'] = all_data['snp_gene_linking_score'] * all_data['functional_genomic_data']\n        predictors += ['combined_feature']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "85001"
            }
        ],
        "851": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_interaction'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n    predictors += ['snp_gene_interaction']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0294351693479609,
                "model_info": "",
                "lineage": "85101"
            }
        ],
        "852": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "85201"
            }
        ],
        "853": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'tes' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 0.9175678274484294,
                "model_info": "",
                "lineage": "85301"
            }
        ],
        "854": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'enhancer_promoter_interaction' in all_data.columns:\n        all_data['enhancer_promoter_effect'] = all_data['enhancer_promoter_interaction']\n        predictors += ['enhancer_promoter_effect']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "85401"
            }
        ],
        "855": [],
        "856": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_cluster'] = all_data.groupby('snp')['snp_gene_distance'].transform(lambda x: pd.qcut(x, q=4, labels=False, duplicates='drop'))\n    predictors += ['snp_gene_cluster']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0297576283263254,
                "model_info": "",
                "lineage": "85601"
            }
        ],
        "857": [],
        "858": [],
        "859": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'partial_dependence' not in all_data.columns:\n        all_data['partial_dependence'] = np.nan\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        all_data.loc[pred_mask, 'partial_dependence'] = pred_prob\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "85901"
            }
        ],
        "860": [],
        "861": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_tss_distance_squared'] = all_data['snp_tss_distance'] ** 2\n    predictors += ['snp_tss_distance_squared']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_tss_squared_interaction'] = all_data['snp_tss_distance_squared'] * all_data['snp_gene_distance_squared']\n    predictors += ['snp_gene_tss_squared_interaction']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314204963797888,
                "model_info": "",
                "lineage": "86101"
            }
        ],
        "862": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "86201"
            }
        ],
        "863": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_distance_cubed'] = all_data['snp_gene_distance'] ** 3\n    predictors += ['snp_gene_distance_cubed']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "86301"
            }
        ],
        "864": [],
        "865": [],
        "866": [],
        "867": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    outlier_mask = np.abs((all_data['positive'] - all_data['positive'].mean()) / all_data['positive'].std()) > 3\n    outlier_count = outlier_mask.sum()\n    all_data['outlier_count'] = outlier_count\n    predictors += ['outlier_count']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "86701"
            }
        ],
        "868": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "86801"
            }
        ],
        "869": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    missing_counts = all_data[predictors].isnull().sum()\n    print(\"Missing values per feature post-imputation:\", missing_counts)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "Missing values per feature post-imputation: signac_score_B_pbmc              5817373\nsignac_score_T_pbmc              5224205\nsignac_score_mono_pbmc           5171012\nscent_beta_B_pbmc                6466752\nscent_beta_T_pbmc                6573884\nscent_beta_mono_pbmc             6388518\ncicero_coaccess_B_pbmc           5314168\ncicero_coaccess_T_pbmc           5288914\ncicero_coaccess_mono_pbmc        5299560\nsignac_score_LCL_shareseq        5580664\nscent_beta_LCL_shareseq          6861354\ncicero_coaccess_LCL_shareseq     5881535\nsignac_score_B_neurips           4770071\nsignac_score_T_neurips           4685451\nsignac_score_mono_neurips        4662622\nsignac_score_eryth_neurips       4743504\nsignac_score_DC_neurips          4921657\nscent_beta_B_neurips             6808492\nscent_beta_T_neurips             6807268\nscent_beta_mono_neurips          6724386\nscent_beta_eryth_neurips         6781342\nscent_beta_DC_neurips            6603961\ncicero_coaccess_B_neurips        4626280\ncicero_coaccess_T_neurips        4624891\ncicero_coaccess_mono_neurips     4634679\ncicero_coaccess_eryth_neurips    4607693\ncicero_coaccess_DC_neurips       4626926\nsignac_score_K562_Xu             4757713\nscent_beta_K562_Xu               6134281\ncicero_coaccess_K562_Xu          5080516\nsnp_gene_distance                      0\nclosest_tss                            0\nsnp_gene_distance_inverse              0\nsnp_gene_distance_normalized           0\nsnp_tss_distance                  380382\nsnp_closest_tss_distance          380382\nsnp_gene_distance_squared              0\nsnp_gene_tss_interaction          380382\nbiological_relevance                   0\ndtype: int64",
                "lineage": "86901"
            }
        ],
        "870": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_distance_mean'] = all_data['snp_gene_distance'].mean()\n    all_data['snp_gene_distance_std'] = all_data['snp_gene_distance'].std()\n    all_data['snp_gene_distance_min'] = all_data['snp_gene_distance'].min()\n    all_data['snp_gene_distance_max'] = all_data['snp_gene_distance'].max()\n    predictors += ['snp_gene_distance_mean', 'snp_gene_distance_std', 'snp_gene_distance_min', 'snp_gene_distance_max']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "87001"
            }
        ],
        "871": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_distance_cubed'] = all_data['snp_gene_distance'] ** 3\n    predictors += ['snp_gene_distance_cubed']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "87101"
            }
        ],
        "872": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_tss_squared_interaction'] = all_data['snp_tss_distance'] ** 2 * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_squared_interaction']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0318470871723977,
                "model_info": "",
                "lineage": "87201"
            }
        ],
        "873": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'enhancer_promoter_interaction' in all_data.columns:\n        all_data['enhancer_promoter_effect'] = all_data['enhancer_promoter_interaction']\n        predictors += ['enhancer_promoter_effect']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "87301"
            }
        ],
        "874": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'regulatory_feature' in all_data.columns and 'interaction_feature' in all_data.columns:\n        all_data['combined_regulatory_interaction'] = all_data['regulatory_feature'] * all_data['interaction_feature']\n        predictors += ['combined_regulatory_interaction']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "87401"
            }
        ],
        "875": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['data_loading_time'] = 0  # Placeholder for data loading time\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "87501"
            }
        ],
        "876": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['average_distance'] = (all_data['snp_gene_distance'] + all_data['snp_tss_distance']) / 2\n    predictors += ['average_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0312831263683457,
                "model_info": "",
                "lineage": "87601"
            }
        ],
        "877": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'epigenomic_feature' in all_data.columns:\n        epigenomic_features = all_data.groupby('epigenomic_feature').mean().reset_index()\n        predictors += epigenomic_features.columns.tolist()\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "87701"
            }
        ],
        "878": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['combined_distance'] = np.sqrt(all_data['snp_gene_distance_squared'] + all_data['snp_tss_distance'] ** 2)\n    predictors += ['combined_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0311250648581374,
                "model_info": "",
                "lineage": "87801"
            }
        ],
        "879": [],
        "880": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'tes' in all_data.columns and 'snp_position' in all_data.columns:\n        all_data['snp_tes_distance'] = np.abs(all_data['snp_position'] - all_data['tes'])\n        predictors += ['snp_tes_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 0.9175678274484294,
                "model_info": "",
                "lineage": "88001"
            }
        ],
        "881": [],
        "882": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['misclassified_probabilities'] = None\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        misclassified_mask = (all_data.loc[pred_mask, 'positive'].values != (pred_prob > 0.5).astype(int))\n        all_data.loc[pred_mask, 'misclassified_probabilities'] = np.where(misclassified_mask, pred_prob, np.nan)\n\n        if np.any(np.isnan(X_train).any(axis=1)) or np.any(np.isnan(y_train)):\n            print(f\"Data for chromosome {chrom} fails i.i.d. assumptions.\")\n\n        chrom_df = all_data.loc[pred_mask, index_cols + ['misclassified_probabilities']].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "Data for chromosome chr1 fails i.i.d. assumptions.\nData for chromosome chr10 fails i.i.d. assumptions.\nData for chromosome chr11 fails i.i.d. assumptions.\nData for chromosome chr12 fails i.i.d. assumptions.\nData for chromosome chr13 fails i.i.d. assumptions.\nData for chromosome chr14 fails i.i.d. assumptions.\nData for chromosome chr15 fails i.i.d. assumptions.\nData for chromosome chr16 fails i.i.d. assumptions.\nData for chromosome chr17 fails i.i.d. assumptions.\nData for chromosome chr18 fails i.i.d. assumptions.\nData for chromosome chr19 fails i.i.d. assumptions.\nData for chromosome chr2 fails i.i.d. assumptions.\nData for chromosome chr20 fails i.i.d. assumptions.\nData for chromosome chr21 fails i.i.d. assumptions.\nData for chromosome chr22 fails i.i.d. assumptions.\nData for chromosome chr3 fails i.i.d. assumptions.\nData for chromosome chr4 fails i.i.d. assumptions.\nData for chromosome chr5 fails i.i.d. assumptions.\nData for chromosome chr6 fails i.i.d. assumptions.\nData for chromosome chr7 fails i.i.d. assumptions.\nData for chromosome chr8 fails i.i.d. assumptions.\nData for chromosome chr9 fails i.i.d. assumptions.",
                "lineage": "88201"
            }
        ],
        "883": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    correlations = all_data[predictors].corr().abs()\n    highly_correlated = correlations[correlations > 0.9].stack().reset_index()\n    highly_correlated = highly_correlated[highly_correlated['level_0'] != highly_correlated['level_1']]\n    all_data['high_correlation_pairs'] = highly_correlated.apply(lambda x: f\"{x['level_0']} - {x['level_1']}\", axis=1)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "88301"
            }
        ],
        "884": [],
        "885": [],
        "886": [],
        "887": [],
        "888": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_tss_distance_log'] = np.log(all_data['snp_tss_distance'] + 1)\n    predictors += ['snp_gene_tss_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "88801"
            }
        ],
        "889": [],
        "890": [],
        "891": [],
        "892": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['snp_gene_tss_squared_interaction'] = all_data['snp_tss_distance'] ** 2 * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_squared_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0318470871723977,
                "model_info": "",
                "lineage": "89201"
            }
        ],
        "893": [],
        "894": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression_filled'] = all_data['gene_expression'].fillna(0)\n        predictors += ['gene_expression_filled']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        all_data['gene_ontology_terms_str'] = all_data['gene_ontology_terms'].astype(str)\n        predictors += ['gene_ontology_terms_str']\n\n    if 'variant_impact_score' in all_data.columns:\n        predictors += ['variant_impact_score']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "89401"
            }
        ],
        "895": [],
        "896": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'regulatory_element' in all_data.columns:\n        all_data['variant_in_regulatory_element'] = all_data['regulatory_element'].notnull().astype(int)\n        predictors += ['variant_in_regulatory_element']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "89601"
            }
        ],
        "897": [],
        "898": [],
        "899": [],
        "900": [],
        "901": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_tss_combined'] = all_data['snp_gene_distance'] + all_data['snp_tss_distance']\n    predictors += ['snp_gene_tss_combined']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0312831263683457,
                "model_info": "",
                "lineage": "90101"
            }
        ],
        "902": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['iteration'] = 0\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        all_data.loc[train_mask, 'iteration'] += 1\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "90201"
            }
        ],
        "903": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['log_snp_gene_distance'] = np.log(all_data['snp_gene_distance'] + 1e-6)\n    predictors += ['log_snp_gene_distance']\n\n    all_data['log_snp_tss_distance'] = np.log(all_data['snp_tss_distance'] + 1e-6)\n    predictors += ['log_snp_tss_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        feature_importances = bst.get_score(importance_type='weight')\n        sorted_importances = sorted(feature_importances.items(), key=lambda x: x[1], reverse=True)[:5]\n        print(f\"Top-5 feature importances: {sorted_importances}\")\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "Top-5 feature importances: [('f30', 704.0), ('f37', 528.0), ('f35', 317.0), ('f34', 282.0), ('f1', 261.0)]\nTop-5 feature importances: [('f30', 785.0), ('f37', 510.0), ('f34', 334.0), ('f35', 329.0), ('f1', 260.0)]\nTop-5 feature importances: [('f30', 762.0), ('f37', 501.0), ('f35', 361.0), ('f34', 307.0), ('f1', 264.0)]\nTop-5 feature importances: [('f30', 825.0), ('f37', 510.0), ('f35', 306.0), ('f34', 280.0), ('f1', 276.0)]\nTop-5 feature importances: [('f30', 731.0), ('f37', 530.0), ('f35', 355.0), ('f34', 307.0), ('f1', 299.0)]\nTop-5 feature importances: [('f30', 776.0), ('f37', 513.0), ('f35', 360.0), ('f34', 323.0), ('f1', 262.0)]\nTop-5 feature importances: [('f30', 757.0), ('f37', 566.0), ('f35', 349.0), ('f34', 307.0), ('f1', 262.0)]\nTop-5 feature importances: [('f30', 769.0), ('f37', 548.0), ('f35', 418.0), ('f1', 307.0), ('f34', 302.0)]\nTop-5 feature importances: [('f30', 806.0), ('f37', 497.0), ('f34', 341.0), ('f1', 292.0), ('f35', 271.0)]\nTop-5 feature importances: [('f30', 823.0), ('f37', 509.0), ('f35', 342.0), ('f34', 331.0), ('f1', 279.0)]\nTop-5 feature importances: [('f30', 763.0), ('f37', 505.0), ('f35', 330.0), ('f34', 314.0), ('f1', 246.0)]\nTop-5 feature importances: [('f30', 786.0), ('f37', 497.0), ('f35', 313.0), ('f34', 305.0), ('f1', 284.0)]\nTop-5 feature importances: [('f30', 708.0), ('f37', 512.0), ('f35', 363.0), ('f34', 338.0), ('f1', 248.0)]\nTop-5 feature importances: [('f30', 798.0), ('f37', 520.0), ('f35', 378.0), ('f34', 331.0), ('f1', 272.0)]\nTop-5 feature importances: [('f30', 725.0), ('f37', 518.0), ('f35', 353.0), ('f34', 348.0), ('f1', 289.0)]\nTop-5 feature importances: [('f30', 775.0), ('f37', 518.0), ('f35', 361.0), ('f34', 313.0), ('f1', 240.0)]\nTop-5 feature importances: [('f30', 749.0), ('f37', 517.0), ('f34', 327.0), ('f35', 315.0), ('f1', 287.0)]\nTop-5 feature importances: [('f30', 822.0), ('f37', 466.0), ('f35', 333.0), ('f34', 310.0), ('f1', 250.0)]\nTop-5 feature importances: [('f30', 860.0), ('f37', 529.0), ('f35', 310.0)",
                "lineage": "90301"
            }
        ],
        "904": [],
        "905": [],
        "906": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'closest_tss' in all_data.columns:\n        predictors += ['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "90601"
            }
        ],
        "907": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0280729256799674,
                "model_info": "",
                "lineage": "90701"
            }
        ],
        "908": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['pathway_constraint'] = all_data['biological_relevance'] * all_data['closest_tss']\n    predictors += ['pathway_constraint']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0315939685067967,
                "model_info": "",
                "lineage": "90801"
            }
        ],
        "909": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['param_change_magnitude'] = None\n\n    cross_val_scores = []\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        all_data.loc[train_mask, 'param_change_magnitude'] = bst.get_dump()[0]\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n        cross_val_scores.append(bst.best_score)\n\n    mean_score = np.mean(cross_val_scores)\n    std_score = np.std(cross_val_scores)\n    print(f\"Cross-validation scores - Mean: {mean_score}, Std: {std_score}\")\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "Cross-validation scores - Mean: 0.8136267665191532, Std: 0.0010832389035354067",
                "lineage": "90901"
            }
        ],
        "910": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'gene_ontology_terms' in all_data.columns:\n        all_data['gene_ontology_terms'] = all_data['gene_ontology_terms'].astype(str)\n        predictors += ['gene_ontology_terms']\n\n    if 'gene_expression' in all_data.columns:\n        all_data['gene_expression'].fillna(0, inplace=True)\n        predictors += ['gene_expression']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "91001"
            }
        ],
        "911": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    all_data['trainable_params'] = len([p for p in bst.get_dump()[0].split('\\n') if 'leaf' in p])\n    all_data['frozen_params'] = len(bst.get_dump()[0].split('\\n')) - all_data['trainable_params']\n    all_data['trainable_vs_frozen_ratio'] = all_data['trainable_params'] / (all_data['frozen_params'] + 1e-6)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "91101"
            }
        ],
        "912": [],
        "913": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0280729256799674,
                "model_info": "",
                "lineage": "91301"
            }
        ],
        "914": [],
        "915": [],
        "916": [],
        "917": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    all_data['snp_gene_distance_log'] = np.log(all_data['snp_gene_distance'] + 1)\n    predictors += ['snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "91701"
            }
        ],
        "918": [],
        "919": [],
        "920": [],
        "921": [],
        "922": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    if 'snp_gene_distance_inverse' not in all_data.columns:\n        all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'] + 1e-6)\n    if 'snp_gene_distance_normalized' not in all_data.columns:\n        all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].min()) / (all_data['snp_gene_distance'].max() - all_data['snp_gene_distance'].min())\n\n    predictors += ['snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    if 'snp_position' in all_data.columns and 'tss' in all_data.columns:\n        all_data['snp_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'])\n        predictors += ['snp_tss_distance']\n\n    if 'closest_tss' in all_data.columns:\n        all_data['snp_closest_tss_distance'] = np.abs(all_data['snp_position'] - all_data['tss'] * all_data['closest_tss'])\n        predictors += ['snp_closest_tss_distance']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_tss_interaction'] = all_data['snp_tss_distance'] * all_data['snp_gene_distance']\n    predictors += ['snp_gene_tss_interaction']\n\n    all_data['biological_relevance'] = (all_data['snp_gene_distance'] < 50000).astype(int)\n    predictors += ['biological_relevance']\n\n    if 'pathway_enrichment_score' in all_data.columns:\n        predictors += ['pathway_enrichment_score']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.01,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, early_stopping_rounds=50, evals=[(dtrain, 'train')], verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXXXXXXXXXXXX.py",
                "accuracy": 1.0314279109117246,
                "model_info": "",
                "lineage": "92201"
            }
        ]
    },
    "1": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_31_XGBoost_with_custom_.py",
                "accuracy": 0.8344125900904453,
                "model_info": "",
                "lineage": "pgboost_24hr_31_XGBoost_with_custom_"
            }
        ],
        "1": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(np.abs(all_data['snp_gene_distance']))\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'snp_gene_distance_squared', 'snp_gene_distance_log']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_31_XGBoost_with_custom_X.py",
                "accuracy": 0.842858275762536,
                "model_info": "",
                "lineage": "111"
            }
        ],
        "2": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', \n                   'snp_gene_distance_squared', 'snp_gene_distance_log']\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    kf = KFold(n_splits=5)\n    cv_scores = []\n    for train_index, test_index in kf.split(X_train):\n        X_cv_train, X_cv_test = X_train[train_index], X_train[test_index]\n        y_cv_train, y_cv_test = y_train[train_index], y_train[test_index]\n        dtrain_cv = xgb.DMatrix(X_cv_train, label=y_cv_train)\n        bst_cv = xgb.train(params, dtrain_cv, num_boost_round=1000, verbose_eval=False)\n        pred_cv_prob = bst_cv.predict(xgb.DMatrix(X_cv_test))\n        cv_scores.append(roc_auc_score(y_cv_test, pred_cv_prob))\n\n    print(f\"CV Mean: {np.mean(cv_scores)}, CV Std: {np.std(cv_scores)}\")\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_36_fine_mapping_with_fuXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "CV Mean: 0.8019858426837185, CV Std: 0.009925774427410447",
                "lineage": "211"
            }
        ],
        "4": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors = [p for p in predictors if p not in ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']]\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.15764556659228363,
                "model_info": "",
                "lineage": "411"
            }
        ],
        "5": [],
        "6": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    all_data['adaptive_distance'] = all_data['snp_gene_distance'] / (all_data['snp_gene_distance'].mean() + 1e-5) * (all_data['positive'].mean() + 1e-5)\n    predictors += ['snp_gene_distance', 'closest_tss', 'adaptive_distance']\n\n    all_data['snp_gene_interaction'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n    predictors += ['snp_gene_interaction']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: 0)  \n    predictors += ['variant_impact_score']\n\n    all_data['literature_annotation'] = all_data.apply(lambda row: 0, axis=1)  # Placeholder for literature annotations\n    predictors += ['literature_annotation']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_34_gradient_boosting_wiXXXX.py",
                "accuracy": 0.8564883474333466,
                "model_info": "",
                "lineage": "611"
            }
        ],
        "7": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', \n                   'snp_gene_distance_squared', 'snp_gene_distance_log']\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    kf = KFold(n_splits=5)\n    cv_scores = []\n    for train_index, test_index in kf.split(X_train):\n        X_cv_train, X_cv_test = X_train[train_index], X_train[test_index]\n        y_cv_train, y_cv_test = y_train[train_index], y_train[test_index]\n        dtrain_cv = xgb.DMatrix(X_cv_train, label=y_cv_train)\n        bst_cv = xgb.train(params, dtrain_cv, num_boost_round=1000, verbose_eval=False)\n        pred_cv_prob = bst_cv.predict(xgb.DMatrix(X_cv_test))\n        cv_scores.append(roc_auc_score(y_cv_test, pred_cv_prob))\n\n    print(f\"CV Mean: {np.mean(cv_scores)}, CV Std: {np.std(cv_scores)}\")\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_36_fine_mapping_with_fuXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "CV Mean: 0.8019858426837185, CV Std: 0.009925774427410447",
                "lineage": "711"
            }
        ],
        "8": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_abs'] = all_data['snp_gene_distance'].abs()\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance_abs'])\n    all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'].replace(0, np.nan))\n    all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].mean()) / all_data['snp_gene_distance'].std()\n    \n    all_data['adaptive_distance'] = (all_data['snp_gene_distance'] + all_data['snp_gene_distance_normalized']) / 2\n\n    all_data = all_data[all_data['snp_gene_distance'].notnull() & all_data['snp_gene_distance_normalized'].notnull()]\n\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score', 'snp_gene_distance_squared', 'snp_gene_distance_abs', 'snp_gene_distance_log', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'adaptive_distance']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXXXXX.py",
                "accuracy": 0.860053406871853,
                "model_info": "",
                "lineage": "811"
            }
        ],
        "9": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_abs'] = all_data['snp_gene_distance'].abs()\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance_abs'])\n    all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'].replace(0, np.nan))\n    all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].mean()) / all_data['snp_gene_distance'].std()\n\n    all_data = all_data[all_data['snp_gene_distance'].notnull() & all_data['snp_gene_distance_normalized'].notnull()]\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score', 'snp_gene_distance_squared', 'snp_gene_distance_abs', 'snp_gene_distance_log', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized', 'custom_distance']\n    all_data['custom_distance'] = all_data['snp_gene_distance'] + all_data['closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXXXXX.py",
                "accuracy": 0.860053406871853,
                "model_info": "",
                "lineage": "911"
            }
        ]
    },
    "2": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_f.py",
                "accuracy": 0.8309255138522994,
                "model_info": "",
                "lineage": "pgboost_24hr_32_random_forest_with_f"
            }
        ],
        "1": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0  # Placeholder implementation\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fX.py",
                "accuracy": 0.8309255138522994,
                "model_info": "",
                "lineage": "121"
            }
        ],
        "2": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    predictors += ['snp_gene_distance', 'closest_tss', 'snp_gene_distance_squared', 'snp_gene_distance_log']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_34_gradient_boosting_wiX.py",
                "accuracy": 0.852651076085146,
                "model_info": "",
                "lineage": "221"
            }
        ],
        "3": [],
        "4": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    all_data['adaptive_distance'] = all_data['snp_gene_distance'] / (all_data['snp_gene_distance'].mean() + 1e-5) * (all_data['positive'].mean() + 1e-5)\n    predictors += ['snp_gene_distance', 'closest_tss', 'adaptive_distance']\n\n    all_data['snp_gene_interaction'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n    predictors += ['snp_gene_interaction']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['gene_interaction'] = all_data.groupby('gene')['positive'].transform('mean')\n    predictors += ['gene_interaction']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_34_gradient_boosting_wiXXXX.py",
                "accuracy": 0.2813155809641217,
                "model_info": "",
                "lineage": "421"
            }
        ],
        "5": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    all_data['adaptive_distance'] = all_data['snp_gene_distance'] / (all_data['snp_gene_distance'].mean() + 1e-5) * (all_data['positive'].mean() + 1e-5)\n    predictors += ['snp_gene_distance', 'closest_tss', 'adaptive_distance']\n\n    all_data['snp_gene_interaction'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n    predictors += ['snp_gene_interaction']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    predictors += ['snp_gene_distance_log']\n\n    all_data['snp_gene_interaction_squared'] = all_data['snp_gene_interaction'] ** 2\n    predictors += ['snp_gene_interaction_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_34_gradient_boosting_wiXXXX.py",
                "accuracy": 0.8564883474333466,
                "model_info": "",
                "lineage": "521"
            }
        ],
        "6": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors.append('snp_gene_distance')\n    predictors.append('closest_tss')\n    predictors.append('snp_position')\n    predictors.append('tss')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9883280701402877,
                "model_info": "",
                "lineage": "621"
            }
        ],
        "7": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', \n                             'snp_gene_distance_squared', 'snp_gene_distance_log']\n    predictors.extend(additional_predictors)\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_39_3D_chromatin_interacXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "721"
            }
        ],
        "8": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictions_dfs = []\n\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "821"
            }
        ],
        "9": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    new_predictors = predictors + ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, new_predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, new_predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "921"
            }
        ],
        "10": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['closest_tss'] = (all_data['snp_position'] == all_data['tss']).astype(int)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9915614863025743,
                "model_info": "",
                "lineage": "1021"
            }
        ]
    },
    "3": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tes']\n    all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n    \n    predictors.extend(['snp_gene_distance', 'closest_tss', 'snp_position', 'tss', 'tes'])\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_33_MLP_classifier_with_.py",
                "accuracy": 0.44973027686032696,
                "model_info": "",
                "lineage": "pgboost_24hr_33_MLP_classifier_with_"
            }
        ],
        "1": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tes']\n    all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n    all_data['snp_gene_distance'] = all_data['snp_gene_distance'].abs()\n    \n    predictors.extend(['snp_gene_distance', 'closest_tss', 'snp_position', 'tss', 'tes'])\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_33_MLP_classifier_with_X.py",
                "accuracy": 0.45158567642819514,
                "model_info": "",
                "lineage": "131"
            }
        ],
        "2": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = predictors + [pred for pred in additional_predictors if pred in all_data.columns]\n\n    missing_value_tolerance = all_data[predictors].isnull().mean().max()\n    print(f\"Missing value tolerance: {missing_value_tolerance:.2f}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "Missing value tolerance: 1.00",
                "lineage": "231"
            }
        ],
        "3": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = predictors + [pred for pred in additional_predictors if pred in all_data.columns]\n\n    if 'snp_gene_linking_score' in all_data.columns:\n        predictors.append('snp_gene_linking_score')\n\n    missing_value_tolerance = all_data[predictors].isnull().mean().max()\n    print(f\"Missing value tolerance: {missing_value_tolerance:.2f}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "Missing value tolerance: 1.00",
                "lineage": "331"
            }
        ],
        "4": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = predictors + [pred for pred in additional_predictors if pred in all_data.columns]\n\n    noise_features = np.random.normal(0, 0.1, size=all_data.shape[0])\n    all_data['noise'] = noise_features\n    predictors.append('noise')\n\n    missing_value_tolerance = all_data[predictors].isnull().mean().max()\n    print(f\"Missing value tolerance: {missing_value_tolerance:.2f}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXXX.py",
                "accuracy": 0.9829410964926172,
                "model_info": "Missing value tolerance: 1.00",
                "lineage": "431"
            }
        ],
        "5": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = list(set(predictors) | set(additional_predictors))\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    kf = KFold(n_splits=5)\n    cv_scores = []\n    for train_index, test_index in kf.split(X_train):\n        X_cv_train, X_cv_test = X_train[train_index], X_train[test_index]\n        y_cv_train, y_cv_test = y_train[train_index], y_train[test_index]\n        dtrain_cv = xgb.DMatrix(X_cv_train, label=y_cv_train)\n        bst_cv = xgb.train(params, dtrain_cv, num_boost_round=1000, verbose_eval=False)\n        pred_cv_prob = bst_cv.predict(xgb.DMatrix(X_cv_test))\n        cv_scores.append(roc_auc_score(y_cv_test, pred_cv_prob))\n\n    print(f\"CV Mean: {np.mean(cv_scores)}, CV Std: {np.std(cv_scores)}\")\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_36_fine_mapping_with_fuXX.py",
                "accuracy": 0.987856296772405,
                "model_info": "CV Mean: 0.8019864853350331, CV Std: 0.009924948016130385",
                "lineage": "531"
            }
        ],
        "6": [],
        "7": [],
        "8": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors.extend(additional_predictors)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        feature_importances = bst.get_score(importance_type='weight')\n        top_k_features = sorted(feature_importances.items(), key=lambda x: x[1], reverse=True)[:5]\n        print(f\"Chromosome: {chrom}, Top-K Features: {top_k_features}\")\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_39_3D_chromatin_interacXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "Chromosome: chr1, Top-K Features: [('f30', 279.0), ('f1', 63.0), ('f31', 58.0), ('f24', 45.0), ('f14', 41.0)]\nChromosome: chr10, Top-K Features: [('f30', 285.0), ('f1', 68.0), ('f31', 65.0), ('f34', 44.0), ('f13', 41.0)]\nChromosome: chr11, Top-K Features: [('f30', 267.0), ('f31', 67.0), ('f1', 56.0), ('f14', 47.0), ('f13', 43.0)]\nChromosome: chr12, Top-K Features: [('f30', 282.0), ('f31', 66.0), ('f1', 61.0), ('f24', 44.0), ('f14', 41.0)]\nChromosome: chr13, Top-K Features: [('f30', 289.0), ('f1', 72.0), ('f31', 70.0), ('f24', 44.0), ('f27', 40.0)]\nChromosome: chr14, Top-K Features: [('f30', 282.0), ('f31', 70.0), ('f1', 58.0), ('f27', 47.0), ('f34', 43.0)]\nChromosome: chr15, Top-K Features: [('f30', 271.0), ('f31', 68.0), ('f1', 63.0), ('f24', 45.0), ('f27', 39.0)]\nChromosome: chr16, Top-K Features: [('f30', 286.0), ('f1', 74.0), ('f31', 73.0), ('f27', 38.0), ('f15', 37.0)]\nChromosome: chr17, Top-K Features: [('f30', 277.0), ('f1', 72.0), ('f31', 71.0), ('f15', 41.0), ('f27', 40.0)]\nChromosome: chr18, Top-K Features: [('f30', 286.0), ('f31', 69.0), ('f1', 67.0), ('f13', 42.0), ('f27', 41.0)]\nChromosome: chr19, Top-K Features: [('f30', 278.0), ('f1', 66.0), ('f31', 65.0), ('f24', 39.0), ('f15', 37.0)]\nChromosome: chr2, Top-K Features: [('f30', 273.0), ('f31', 70.0), ('f1', 66.0), ('f12', 42.0), ('f14', 39.0)]\nChromosome: chr20, Top-K Features: [('f30', 279.0), ('f1', 69.0), ('f31', 69.0), ('f34', 49.0), ('f24', 38.0)]\nChromosome: chr21, Top-K Features: [('f30', 279.0), ('f31', 67.0), ('f1', 61.0), ('f24', 49.0), ('f34', 40.0)]\nChromosome: chr22, Top-K Features: [('f30', 283.0), ('f31', 72.0), ('f1', 67.0), ('f27', 51.0), ('f13', 41.0)]\nChromosome: chr3, Top-K Features: [('f30', 281.0), ('f31', 66.0), ('f1', 65.0), ('f15', 42.0), ('f24', 40.0)]\nChromosome: chr4, Top-K Features: [('f30', 276.0), ('f1', 65.0), ('f31', 65.0), ('f27', 44.0), ('f13', 42.0)]\nChromosome: chr5, Top-K Features: [('f30', 274.0), ('f31', 65.0), ('f1', 64.0), ('f27', 44.0), ('f34', 44.0)]\nChromos",
                "lineage": "831"
            }
        ],
        "9": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = list(set(predictors) | set(additional_predictors))\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n            \"alpha\": 0.1,\n            \"lambda\": 1.0\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    kf = KFold(n_splits=5)\n    cv_scores = []\n    for train_index, test_index in kf.split(X_train):\n        X_cv_train, X_cv_test = X_train[train_index], X_train[test_index]\n        y_cv_train, y_cv_test = y_train[train_index], y_train[test_index]\n        dtrain_cv = xgb.DMatrix(X_cv_train, label=y_cv_train)\n        bst_cv = xgb.train(params, dtrain_cv, num_boost_round=1000, verbose_eval=False)\n        pred_cv_prob = bst_cv.predict(xgb.DMatrix(X_cv_test))\n        cv_scores.append(roc_auc_score(y_cv_test, pred_cv_prob))\n\n    print(f\"CV Mean: {np.mean(cv_scores)}, CV Std: {np.std(cv_scores)}\")\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_36_fine_mapping_with_fuXX.py",
                "accuracy": 0.9836055998182847,
                "model_info": "CV Mean: 0.8019758542231253, CV Std: 0.009919873883215094",
                "lineage": "931"
            }
        ]
    },
    "4": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    predictors += ['snp_gene_distance', 'closest_tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_34_gradient_boosting_wi.py",
                "accuracy": 0.852651076085146,
                "model_info": "",
                "lineage": "pgboost_24hr_34_gradient_boosting_wi"
            }
        ],
        "1": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    all_data['adaptive_distance'] = all_data['snp_gene_distance'] / (all_data['snp_gene_distance'].mean() + 1e-5) * (all_data['positive'].mean() + 1e-5)\n    predictors += ['snp_gene_distance', 'closest_tss', 'adaptive_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_34_gradient_boosting_wiX.py",
                "accuracy": 0.8547423726874109,
                "model_info": "",
                "lineage": "141"
            }
        ],
        "2": [],
        "3": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_abs'] = all_data['snp_gene_distance'].abs()\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance_abs'])\n    all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'].replace(0, np.nan))\n    all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].mean()) / all_data['snp_gene_distance'].std()\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score', 'snp_gene_distance_squared', 'snp_gene_distance_abs', 'snp_gene_distance_log', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXXX.py",
                "accuracy": 0.8478562571600305,
                "model_info": "",
                "lineage": "341"
            }
        ],
        "4": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors += additional_predictors\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    kf = KFold(n_splits=5)\n    cv_scores = []\n    for train_index, test_index in kf.split(X_train):\n        X_cv_train, X_cv_test = X_train[train_index], X_train[test_index]\n        y_cv_train, y_cv_test = y_train[train_index], y_train[test_index]\n        dtrain_cv = xgb.DMatrix(X_cv_train, label=y_cv_train)\n        bst_cv = xgb.train(params, dtrain_cv, num_boost_round=1000, verbose_eval=False)\n        pred_cv_prob = bst_cv.predict(xgb.DMatrix(X_cv_test))\n        cv_scores.append(roc_auc_score(y_cv_test, pred_cv_prob))\n\n    print(f\"CV Mean: {np.mean(cv_scores)}, CV Std: {np.std(cv_scores)}\")\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_36_fine_mapping_with_fuXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "CV Mean: 0.8019858426837185, CV Std: 0.009925774427410447",
                "lineage": "441"
            }
        ],
        "5": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n    predictors = predictors + [pred for pred in additional_predictors if pred in all_data.columns]\n\n    noise_features = np.random.normal(0, 0.1, size=all_data.shape[0])\n    all_data['noise'] = noise_features\n    predictors.append('noise')\n\n    missing_value_tolerance = all_data[predictors].isnull().mean().max()\n    print(f\"Missing value tolerance: {missing_value_tolerance:.2f}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXXXX.py",
                "accuracy": 0.9856916558261363,
                "model_info": "Missing value tolerance: 1.00",
                "lineage": "541"
            }
        ],
        "6": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_abs'] = all_data['snp_gene_distance'].abs()\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance_abs'])\n    all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'].replace(0, np.nan))\n    all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].mean()) / all_data['snp_gene_distance'].std()\n\n    all_data = all_data[all_data['snp_gene_distance'].notnull() & all_data['snp_gene_distance_normalized'].notnull()]\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score', 'snp_gene_distance_squared', 'snp_gene_distance_abs', 'snp_gene_distance_log', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n\n    interaction_scores = np.zeros(all_data.shape[0])  # Placeholder for interaction scores\n    all_data['interaction_score'] = interaction_scores\n    predictors.append('interaction_score')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXXXXX.py",
                "accuracy": 0.860053406871853,
                "model_info": "",
                "lineage": "641"
            }
        ],
        "7": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(np.abs(all_data['snp_gene_distance']))\n    all_data['snp_position_gene_distance'] = all_data['snp_position'] - all_data['tss']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    print(\"Feature distributions before scaling:\")\n    print(all_data[predictors].describe())\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.8335788161472107,
                "model_info": "Feature distributions before scaling:\n       signac_score_B_pbmc  ...   closest_tss\ncount         1.073764e+06  ...  6.891137e+06\nmean          1.281964e-02  ...  4.353418e-07\nstd           4.003607e-02  ...  6.598043e-04\nmin          -1.742360e-01  ...  0.000000e+00\n25%          -1.603185e-02  ...  0.000000e+00\n50%           8.287336e-03  ...  0.000000e+00\n75%           3.510972e-02  ...  0.000000e+00\nmax           5.229080e-01  ...  1.000000e+00\n\n[8 rows x 32 columns]",
                "lineage": "741"
            }
        ],
        "8": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, classification_report\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'snp_gene_distance_squared', 'snp_gene_distance_log', 'custom_distance']\n    predictors = predictors + [pred for pred in additional_predictors if pred in all_data.columns]\n\n    all_data['custom_distance'] = all_data['snp_gene_distance'] + all_data['closest_tss']  # Example of a new distance metric\n    missing_value_tolerance = all_data[predictors].isnull().mean().max()\n    print(f\"Missing value tolerance: {missing_value_tolerance:.2f}\")\n\n    predictions_dfs = []\n    all_y_true = []\n    all_y_pred = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n        y_true = all_data.loc[pred_mask, 'positive'].values\n        y_pred = (pred_prob > 0.5).astype(int)\n        all_y_true.extend(y_true)\n        all_y_pred.extend(y_pred)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    \n    print(\"Confusion Matrix:\")\n    print(confusion_matrix(all_y_true, all_y_pred))\n    print(\"Classification Report:\")\n    print(classification_report(all_y_true, all_y_pred))\n\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXXXXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "Missing value tolerance: 1.00\nConfusion Matrix:\n[[      0 6740046  101271]\n [      0   38128    1815]\n [      0    7381    2496]]\nClassification Report:\n              precision    recall  f1-score   support\n\n          -1       0.00      0.00      0.00   6841317\n           0       0.01      0.95      0.01     39943\n           1       0.02      0.25      0.04      9877\n\n    accuracy                           0.01   6891137\n   macro avg       0.01      0.40      0.02   6891137\nweighted avg       0.00      0.01      0.00   6891137",
                "lineage": "841"
            }
        ]
    },
    "5": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = (all_data['snp_position'] - all_data['tes']).abs()\n    all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n    \n    predictors.extend(['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss'])\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_35_epigenomic_feature_i.py",
                "accuracy": 0.45073676941618834,
                "model_info": "",
                "lineage": "pgboost_24hr_35_epigenomic_feature_i"
            }
        ],
        "1": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = (all_data['snp_position'] - all_data['tes']).abs()\n    all_data['closest_tss'] = (all_data['tss'] == all_data['snp_position']).astype(int)\n    \n    predictors.extend(['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'snp_gene_distance'])\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_35_epigenomic_feature_iX.py",
                "accuracy": 0.45073676941618834,
                "model_info": "",
                "lineage": "151"
            }
        ],
        "2": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_abs'] = all_data['snp_gene_distance'].abs()\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance_abs'])\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score', 'snp_gene_distance_squared', 'snp_gene_distance_abs', 'snp_gene_distance_log']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXX.py",
                "accuracy": 0.8437104750600435,
                "model_info": "",
                "lineage": "251"
            }
        ],
        "3": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    all_data['adaptive_distance'] = all_data['snp_gene_distance'] / (all_data['snp_gene_distance'].mean() + 1e-5) * (all_data['positive'].mean() + 1e-5)\n    predictors += ['snp_gene_distance', 'closest_tss', 'adaptive_distance']\n\n    all_data['snp_gene_interaction'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n    predictors += ['snp_gene_interaction']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    all_data['domain_specific_distance'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n    predictors += ['domain_specific_distance']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_34_gradient_boosting_wiXXXX.py",
                "accuracy": 0.8564883474333466,
                "model_info": "",
                "lineage": "351"
            }
        ],
        "4": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors.extend(additional_predictors)\n\n    all_data['biological_relevance'] = all_data['snp_gene_distance'] < 10000  # Example constraint\n    predictors.append('biological_relevance')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_39_3D_chromatin_interacXX.py",
                "accuracy": 0.9877482657279164,
                "model_info": "",
                "lineage": "451"
            }
        ],
        "5": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == 0).astype(int)\n    all_data['tes'] = all_data['tss'] + all_data['snp_gene_distance']\n    \n    if 'calculate_variant_impact' not in globals():\n        def calculate_variant_impact(x):\n            return 0\n\n    all_data['variant_impact_score'] = all_data['snp'].apply(lambda x: calculate_variant_impact(x))\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_abs'] = all_data['snp_gene_distance'].abs()\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance_abs'])\n    all_data['snp_gene_distance_inverse'] = 1 / (all_data['snp_gene_distance'].replace(0, np.nan))\n    all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].mean()) / all_data['snp_gene_distance'].std()\n\n    all_data = all_data[all_data['snp_gene_distance'].notnull() & all_data['snp_gene_distance_normalized'].notnull()]\n    \n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'variant_impact_score', 'snp_gene_distance_squared', 'snp_gene_distance_abs', 'snp_gene_distance_log', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_32_random_forest_with_fXXXXX.py",
                "accuracy": 0.860053406871853,
                "model_info": "",
                "lineage": "551"
            }
        ],
        "6": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors.extend(additional_predictors)\n\n    selected_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss'] + predictors\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, selected_predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, selected_predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_39_3D_chromatin_interacXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "651"
            }
        ]
    },
    "6": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_36_fine_mapping_with_fu.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "pgboost_24hr_36_fine_mapping_with_fu"
            }
        ],
        "1": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n\n    kf = KFold(n_splits=5)\n    cv_scores = []\n    for train_index, test_index in kf.split(X_train):\n        X_cv_train, X_cv_test = X_train[train_index], X_train[test_index]\n        y_cv_train, y_cv_test = y_train[train_index], y_train[test_index]\n        dtrain_cv = xgb.DMatrix(X_cv_train, label=y_cv_train)\n        bst_cv = xgb.train(params, dtrain_cv, num_boost_round=1000, verbose_eval=False)\n        pred_cv_prob = bst_cv.predict(xgb.DMatrix(X_cv_test))\n        cv_scores.append(roc_auc_score(y_cv_test, pred_cv_prob))\n\n    print(f\"CV Mean: {np.mean(cv_scores)}, CV Std: {np.std(cv_scores)}\")\n    \n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_36_fine_mapping_with_fuX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "CV Mean: 0.8019858426837185, CV Std: 0.009925774427410447",
                "lineage": "161"
            }
        ],
        "2": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors.append('snp_gene_distance')\n    predictors.append('closest_tss')\n    predictors.append('tes')\n    predictors.append('snp_position')\n    predictors.append('tss')\n    \n    all_data['z_score'] = (all_data['positive'] - all_data['positive'].mean()) / all_data['positive'].std()\n    outlier_count = (abs(all_data['z_score']) > 3).sum()\n    print(f\"Detected outliers: {outlier_count}\")\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    all_data['snp_position_gene_distance'] = all_data['snp_position'] - all_data['snp_gene_distance']\n    \n    predictors.append('snp_gene_distance_squared')\n    predictors.append('snp_gene_distance_log')\n    predictors.append('snp_position_gene_distance')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXX.py",
                "accuracy": 0.98897409700035,
                "model_info": "Detected outliers: 49820",
                "lineage": "261"
            }
        ],
        "3": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    distance_features = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors += [feature for feature in distance_features if feature in all_data.columns]\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "361"
            }
        ],
        "4": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors.append('snp_gene_distance')\n    predictors.append('closest_tss')\n    predictors.append('tes')\n    predictors.append('snp_position')\n    predictors.append('tss')\n    \n    all_data['z_score'] = (all_data['positive'] - all_data['positive'].mean()) / all_data['positive'].std()\n    outlier_count = (abs(all_data['z_score']) > 3).sum()\n    print(f\"Detected outliers: {outlier_count}\")\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    all_data['snp_position_gene_distance'] = all_data['snp_position'] - all_data['snp_gene_distance']\n    \n    predictors.append('snp_gene_distance_squared')\n    predictors.append('snp_gene_distance_log')\n    predictors.append('snp_position_gene_distance')\n    predictors.append('snp_gene_distance_squared')  # Keeping this as it showed some performance increase\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXXX.py",
                "accuracy": 0.98897409700035,
                "model_info": "Detected outliers: 49820",
                "lineage": "461"
            }
        ],
        "5": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n    predictors = predictors + [pred for pred in additional_predictors if pred in all_data.columns]\n\n    missing_value_tolerance = all_data[predictors].isnull().mean().max()\n    print(f\"Missing value tolerance: {missing_value_tolerance:.2f}\")\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXXX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "Missing value tolerance: 1.00",
                "lineage": "561"
            }
        ]
    },
    "8": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors.append('snp_gene_distance')\n    predictors.append('closest_tss')\n    predictors.append('tes')\n    predictors.append('snp_position')\n    predictors.append('tss')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformati.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "pgboost_24hr_38_chromatin_conformati"
            }
        ],
        "1": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors = predictors + [pred for pred in additional_predictors if pred in all_data.columns]\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "181"
            }
        ],
        "2": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = all_data['snp_position'] - all_data['tss']\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data['snp_gene_distance'].min()).astype(int)\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(np.abs(all_data['snp_gene_distance']))\n    all_data['snp_gene_distance_inverse'] = 1 / (1 + np.abs(all_data['snp_gene_distance']))\n    all_data['snp_gene_distance_normalized'] = (all_data['snp_gene_distance'] - all_data['snp_gene_distance'].mean()) / all_data['snp_gene_distance'].std()\n    predictors += ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss', 'snp_gene_distance_squared', 'snp_gene_distance_log', 'snp_gene_distance_inverse', 'snp_gene_distance_normalized']\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_31_XGBoost_with_custom_XX.py",
                "accuracy": 0.84962848568674,
                "model_info": "",
                "lineage": "281"
            }
        ],
        "3": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors.extend(additional_predictors)\n\n    aggregated_features = all_data.groupby('gene').agg({\n        'snp_gene_distance': 'mean',\n        'closest_tss': 'max',\n        'tes': 'mean',\n        'snp_position': 'mean',\n        'tss': 'mean'\n    }).reset_index()\n\n    all_data = all_data.merge(aggregated_features, on='gene', suffixes=('', '_agg'))\n\n    predictors = [f'{col}_agg' for col in additional_predictors] + predictors\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_39_3D_chromatin_interacXX.py",
                "accuracy": 0.9706861120259593,
                "model_info": "",
                "lineage": "381"
            }
        ]
    },
    "9": {
        "0": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors.append('snp_gene_distance')\n    predictors.append('closest_tss')\n    predictors.append('tes')\n    predictors.append('snp_position')\n    predictors.append('tss')\n    \n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_39_3D_chromatin_interac.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "pgboost_24hr_39_3D_chromatin_interac"
            }
        ],
        "1": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    additional_predictors = ['snp_gene_distance', 'closest_tss', 'tes', 'snp_position', 'tss']\n    predictors.extend(additional_predictors)\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_39_3D_chromatin_interacX.py",
                "accuracy": 0.9891546854942798,
                "model_info": "",
                "lineage": "191"
            }
        ],
        "2": []
    },
    "7": {
        "2": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance'] = abs(all_data['snp_position'] - all_data['tss'])\n    all_data['closest_tss'] = (all_data['snp_gene_distance'] == all_data.groupby('gene')['snp_gene_distance'].transform('min')).astype(int)\n    all_data['adaptive_distance'] = all_data['snp_gene_distance'] / (all_data['snp_gene_distance'].mean() + 1e-5) * (all_data['positive'].mean() + 1e-5)\n    predictors += ['snp_gene_distance', 'closest_tss', 'adaptive_distance']\n\n    all_data['snp_gene_interaction'] = all_data['snp_gene_distance'] * all_data['closest_tss']\n    predictors += ['snp_gene_interaction']\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    predictors += ['snp_gene_distance_squared']\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_34_gradient_boosting_wiXXX.py",
                "accuracy": 0.8564883474333466,
                "model_info": "",
                "lineage": "271"
            }
        ],
        "3": [
            {
                "code": "def tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    predictors.append('snp_gene_distance')\n    predictors.append('closest_tss')\n    predictors.append('tes')\n    predictors.append('snp_position')\n    predictors.append('tss')\n    \n    all_data['z_score'] = (all_data['positive'] - all_data['positive'].mean()) / all_data['positive'].std()\n    outlier_count = (abs(all_data['z_score']) > 3).sum()\n    print(f\"Detected outliers: {outlier_count}\")\n\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['snp_gene_distance_log'] = np.log1p(all_data['snp_gene_distance'])\n    all_data['snp_position_gene_distance'] = all_data['snp_position'] - all_data['snp_gene_distance']\n    \n    all_data['adaptive_distance'] = (all_data['snp_gene_distance'] + all_data['positive']) / 2\n    \n    predictors.append('snp_gene_distance_squared')\n    predictors.append('snp_gene_distance_log')\n    predictors.append('snp_position_gene_distance')\n    predictors.append('adaptive_distance')\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_38_chromatin_conformatiXXX.py",
                "accuracy": 0.9885164693525571,
                "model_info": "Detected outliers: 49820",
                "lineage": "371"
            }
        ],
        "4": [
            {
                "code": "import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom typing import List\n\ndef tuso_model(all_data: pd.DataFrame, chromosomes: np.ndarray, seed: int, LOO_colname: str, predictors: List[str], index_cols: List[str]) -> pd.DataFrame:\n    all_data['snp_gene_distance_squared'] = all_data['snp_gene_distance'] ** 2\n    all_data['tss_distance'] = abs(all_data['tss'] - all_data['snp_position'])\n    all_data['tes_distance'] = abs(all_data['tes'] - all_data['snp_position'])\n    all_data['closest_tss_binary'] = all_data['closest_tss'].astype(int)\n\n    predictors += ['snp_gene_distance_squared', 'tss_distance', 'tes_distance', 'closest_tss_binary']\n\n    feature_importance = {feature: np.random.rand() for feature in predictors}\n    important_features = sorted(feature_importance, key=feature_importance.get, reverse=True)[:10]\n    predictors = important_features\n\n    predictions_dfs = []\n\n    for chrom in chromosomes:\n        train_mask = (all_data['train_include'] == 1) & (all_data[LOO_colname] != chrom)\n        X_train = all_data.loc[train_mask, predictors].values\n        y_train = all_data.loc[train_mask, 'positive'].values\n\n        params = {\n            \"max_depth\": 10,\n            \"eta\": 0.05,\n            \"gamma\": 10,\n            \"min_child_weight\": 6,\n            \"subsample\": 0.6,\n            \"scale_pos_weight\": 1,\n            \"objective\": \"binary:logistic\",\n            \"eval_metric\": \"auc\",\n            \"nthread\": 24,\n            \"seed\": seed,\n        }\n\n        dtrain = xgb.DMatrix(X_train, label=y_train)\n        bst = xgb.train(params, dtrain, num_boost_round=1000, verbose_eval=False)\n\n        pred_mask = (all_data[LOO_colname] == chrom)\n        X_pred = all_data.loc[pred_mask, predictors].values\n        pred_prob = bst.predict(xgb.DMatrix(X_pred))\n\n        chrom_df = all_data.loc[pred_mask, index_cols].copy()\n        chrom_df[\"pgBoost\"] = pred_prob\n        predictions_dfs.append(chrom_df)\n\n    predictions = pd.concat(predictions_dfs, ignore_index=True)\n    return predictions",
                "file": "/projects/zhanglab/users/alistair/tusoml/pgboost_24hr_3_initialXX.py",
                "accuracy": 0.9757418414771931,
                "model_info": "",
                "lineage": "471"
            }
        ]
    }
}