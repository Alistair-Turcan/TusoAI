{
    "4": {
        "0": [
            {
                "code": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, 'toarray') else adata.X\n    cell_types = adata.obs[\"annotation\"].astype('category').cat.codes\n\n    spatial_var_scores = np.zeros(gene_expression.shape[1])\n\n    for gene_idx in range(gene_expression.shape[1]):\n        y = (gene_expression[:, gene_idx] > 0).astype(int)\n        X = np.hstack((spatial_coords, cell_types.values.reshape(-1, 1)))\n        X = StandardScaler().fit_transform(X)\n\n        model = LogisticRegression()\n        model.fit(X, y)\n        spatial_var_scores[gene_idx] = model.coef_.sum()\n\n    adata.var['pred_spatial_var_score'] = (spatial_var_scores > np.mean(spatial_var_scores)).astype(int)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round14_spatially_regularize.py",
                "accuracy": 0.4649428469807426,
                "model_info": "",
                "lineage": "svg_tusoml_round14_spatially_regularize"
            }
        ],
        "1": [
            {
                "code": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata, random_seed=None):\n    np.random.seed(random_seed)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, 'toarray') else adata.X\n    cell_types = adata.obs[\"annotation\"].astype('category').cat.codes\n\n    spatial_var_scores = np.zeros(gene_expression.shape[1])\n    early_stopping_patience = 0\n    early_stopping_criteria_satisfied = False\n\n    for gene_idx in range(gene_expression.shape[1]):\n        y = (gene_expression[:, gene_idx] > 0).astype(int)\n        X = np.hstack((spatial_coords, cell_types.values.reshape(-1, 1)))\n        X = StandardScaler().fit_transform(X)\n\n        model = LogisticRegression()\n        model.fit(X, y)\n        spatial_var_scores[gene_idx] = model.coef_.sum()\n\n        if gene_idx > 0 and spatial_var_scores[gene_idx] < spatial_var_scores[gene_idx - 1]:\n            early_stopping_patience += 1\n        else:\n            early_stopping_patience = 0\n        \n        if early_stopping_patience > 5:\n            early_stopping_criteria_satisfied = True\n            break\n\n    adata.var['pred_spatial_var_score'] = (spatial_var_scores > np.mean(spatial_var_scores)).astype(int)\n    print(f\"Random Seed: {random_seed}, Early Stopping Criteria Satisfied: {early_stopping_criteria_satisfied}, Patience Counter: {early_stopping_patience}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round14_spatially_regularizeX.py",
                "accuracy": 0.4649428469807426,
                "model_info": "Random Seed: None, Early Stopping Criteria Satisfied: False, Patience Counter: 1",
                "lineage": "141"
            }
        ]
    },
    "6": {
        "0": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(gene_data.reshape(-1, 1))\n        \n        kmeans = KMeans(n_clusters=2, random_state=0).fit(spatial_coords)\n        labels = kmeans.labels_\n        \n        mean_exp_cluster_0 = np.mean(scaled_gene_data[labels == 0])\n        mean_exp_cluster_1 = np.mean(scaled_gene_data[labels == 1])\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_.py",
                "accuracy": 0.7558734663291699,
                "model_info": "",
                "lineage": "svg_tusoml_round16_BSP_big_small_patch_"
            }
        ],
        "1": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        kmeans = KMeans(n_clusters=2, random_state=0).fit(spatial_coords)\n        labels = kmeans.labels_\n        \n        mean_exp_cluster_0 = np.mean(scaled_gene_data[labels == 0])\n        mean_exp_cluster_1 = np.mean(scaled_gene_data[labels == 1])\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_X.py",
                "accuracy": 0.7633034864406633,
                "model_info": "",
                "lineage": "161"
            }
        ]
    },
    "7": {
        "0": [
            {
                "code": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, 'toarray') else adata.X\n    num_genes = gene_expression.shape[1]\n    spatial_var_scores = np.zeros(num_genes)\n\n    for i in range(num_genes):\n        model = LinearRegression()\n        model.fit(spatial_coords, gene_expression[:, i])\n        residuals = gene_expression[:, i] - model.predict(spatial_coords)\n        spatial_var_scores[i] = np.var(residuals)\n\n    threshold = np.percentile(spatial_var_scores, 75)\n    adata.var['pred_spatial_var_score'] = (spatial_var_scores > threshold).astype(int)\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round17_spatially_varying_co.py",
                "accuracy": 0.6003751720380069,
                "model_info": "",
                "lineage": "svg_tusoml_round17_spatially_varying_co"
            }
        ],
        "1": [
            {
                "code": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import KFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, 'toarray') else adata.X\n    num_genes = gene_expression.shape[1]\n    spatial_var_scores = np.zeros(num_genes)\n\n    kf = KFold(n_splits=5)\n    \n    for i in range(num_genes):\n        model = LinearRegression()\n        scores = []\n        \n        for train_index, test_index in kf.split(spatial_coords):\n            X_train, X_test = spatial_coords[train_index], spatial_coords[test_index]\n            y_train, y_test = gene_expression[train_index, i], gene_expression[test_index, i]\n            model.fit(X_train, y_train)\n            residuals = y_test - model.predict(X_test)\n            scores.append(np.var(residuals))\n        \n        spatial_var_scores[i] = np.mean(scores)\n\n    threshold = np.percentile(spatial_var_scores, 75)\n    adata.var['pred_spatial_var_score'] = (spatial_var_scores > threshold).astype(int)\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round17_spatially_varying_coX.py",
                "accuracy": 0.6003751720380069,
                "model_info": "",
                "lineage": "171"
            }
        ]
    },
    "8": {
        "0": [
            {
                "code": "import numpy as np\nfrom scipy.stats import mannwhitneyu\n\ndef tuso_model(adata):\n    spatial_var_scores = np.zeros(adata.n_vars)\n    \n    for i in range(adata.n_vars):\n        gene_expression = adata.X[:, i].A.flatten() if hasattr(adata.X, 'A') else adata.X[:, i]\n        cell_types = adata.obs['annotation'].values\n        unique_types = np.unique(cell_types)\n\n        p_values = []\n        for cell_type in unique_types:\n            group_data = gene_expression[cell_types == cell_type]\n            for other_type in unique_types:\n                if cell_type != other_type:\n                    other_group_data = gene_expression[cell_types == other_type]\n                    stat, p_value = mannwhitneyu(group_data, other_group_data, alternative='two-sided')\n                    p_values.append(p_value)\n\n        spatial_var_scores[i] = 1 if np.min(p_values) < 0.05 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_scores\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round18_distribution_free_te.py",
                "accuracy": 0.2523415135915136,
                "model_info": "",
                "lineage": "svg_tusoml_round18_distribution_free_te"
            }
        ],
        "1": [
            {
                "code": "import numpy as np\nfrom scipy.stats import mannwhitneyu\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata):\n    spatial_var_scores = np.zeros(adata.n_vars)\n    gene_expression = adata.X.A if hasattr(adata.X, 'A') else adata.X\n    spatial_coords = adata.obsm[\"spatial\"]\n    \n    scaler = StandardScaler()\n    scaled_expression = scaler.fit_transform(gene_expression)\n\n    for i in range(adata.n_vars):\n        y = scaled_expression[:, i]\n        X = np.hstack((spatial_coords, np.ones((spatial_coords.shape[0], 1))))\n        model = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        model.fit(X, y)\n        spatial_var_scores[i] = 1 if model.alpha_ < 1 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_scores\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round18_distribution_free_teX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "181"
            }
        ]
    },
    "0": {
        "2": [
            {
                "code": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, 'toarray') else adata.X\n    num_genes = gene_expression.shape[1]\n    spatial_var_scores = np.zeros(num_genes)\n\n    nbrs = NearestNeighbors(n_neighbors=5).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    for i in range(num_genes):\n        model = LinearRegression()\n        model.fit(spatial_coords, gene_expression[:, i])\n        residuals = gene_expression[:, i] - model.predict(spatial_coords)\n        spatial_var_scores[i] = np.var(residuals)\n\n        neighbor_expression = gene_expression[indices[:, 1:], i]\n        neighbor_variance = np.var(neighbor_expression, axis=1)\n        spatial_var_scores[i] += np.mean(neighbor_variance)\n\n    threshold = np.percentile(spatial_var_scores, 75)\n    adata.var['pred_spatial_var_score'] = (spatial_var_scores > threshold).astype(int)\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round17_spatially_varying_coX.py",
                "accuracy": 0.5958591697683738,
                "model_info": "",
                "lineage": "201"
            }
        ],
        "5": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    pca = PCA(n_components=2)\n    spatial_features = pca.fit_transform(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        combined_features = np.hstack((scaled_gene_data, spatial_features))\n        kmeans = KMeans(n_clusters=2, random_state=0).fit(combined_features)\n        labels = kmeans.labels_\n        \n        mean_exp_cluster_0 = np.mean(scaled_gene_data[labels == 0])\n        mean_exp_cluster_1 = np.mean(scaled_gene_data[labels == 1])\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XX.py",
                "accuracy": 0.7633034864406633,
                "model_info": "",
                "lineage": "501"
            }
        ],
        "6": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.base import BaseEstimator, ClassifierMixin\n\nclass SpatialVarianceEstimator(BaseEstimator, ClassifierMixin):\n    def fit(self, X, y):\n        self.spatial_var_score_ = np.zeros(X.shape[1])\n        for gene_idx in range(X.shape[1]):\n            gene_data = X[:, gene_idx]\n            log_gene_data = np.log1p(gene_data)\n            scaler = StandardScaler(with_mean=False)\n            scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n            \n            kmeans = KMeans(n_clusters=2, random_state=0).fit(scaled_gene_data)\n            labels = kmeans.labels_\n            \n            mean_exp_cluster_0 = np.mean(scaled_gene_data[labels == 0])\n            mean_exp_cluster_1 = np.mean(scaled_gene_data[labels == 1])\n            \n            if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n                self.spatial_var_score_[gene_idx] = 1\n        return self\n\n    def predict(self, X):\n        return self.spatial_var_score_\n\ndef tuso_model(adata):\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    bagging_model = BaggingClassifier(estimator=SpatialVarianceEstimator(), n_estimators=10, random_state=0)\n    bagging_model.fit(gene_expression, np.zeros(gene_expression.shape[0]))\n    adata.var['pred_spatial_var_score'] = bagging_model.estimators_[0].spatial_var_score_\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "601"
            }
        ],
        "7": [],
        "8": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "801"
            }
        ],
        "9": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    pca = PCA(n_components=2)\n    spatial_coords_pca = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords_pca)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords_pca, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords_pca[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords_pca[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "901"
            }
        ],
        "10": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    nbrs = NearestNeighbors(n_neighbors=5).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        neighbor_exp = scaled_gene_data[indices].mean(axis=1)\n        mean_exp = ridge.predict(spatial_coords)\n\n        spatial_var_score[gene_idx] = np.std(mean_exp - neighbor_exp) > 0.5\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.5785042286097497,
                "model_info": "",
                "lineage": "1001"
            }
        ],
        "11": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.metrics import pairwise_distances\nfrom scipy.spatial import cKDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    distances = pairwise_distances(spatial_coords)\n    tree = cKDTree(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        local_variance = []\n        for i in range(len(spatial_coords)):\n            indices = tree.query_ball_point(spatial_coords[i], r=1.0)\n            if len(indices) > 1:\n                local_exp = ridge.predict(spatial_coords[indices])\n                local_variance.append(np.var(local_exp))\n            else:\n                local_variance.append(0)\n\n        if np.mean(local_variance) > 0.1:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "1101"
            }
        ],
        "12": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    pca = PCA(n_components=2)\n    spatial_coords_reduced = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords_reduced)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords_reduced, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords_reduced[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords_reduced[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "1201"
            }
        ],
        "13": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    pca = PCA(n_components=2)\n    reduced_spatial_coords = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(reduced_spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(reduced_spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(reduced_spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(reduced_spatial_coords[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "1301"
            }
        ],
        "14": [],
        "15": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata, threshold=0.5):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    spatial_distances = pairwise_distances(spatial_coords)\n    \n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        spatial_smoothness = np.mean(spatial_distances[labels == 0][:, labels == 0]) + np.mean(spatial_distances[labels == 1][:, labels == 1])\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5 and spatial_smoothness < threshold:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "1501"
            }
        ],
        "16": [],
        "17": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    pca = PCA(n_components=2)\n    reduced_spatial_coords = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(reduced_spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(reduced_spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(reduced_spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(reduced_spatial_coords[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "1701"
            }
        ],
        "18": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.metrics import pairwise_distances\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    spatial_autocorr = pairwise_distances(spatial_coords)\n    spatial_autocorr_mean = np.mean(spatial_autocorr, axis=1)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        spatial_correlation = np.corrcoef(scaled_gene_data.flatten(), spatial_autocorr_mean)[0, 1]\n        \n        if spatial_correlation > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "1801"
            }
        ],
        "19": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    variance_threshold = VarianceThreshold(threshold=0.1)\n    filtered_gene_expression = variance_threshold.fit_transform(gene_expression)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(filtered_gene_expression.shape[1]):\n        gene_data = filtered_gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7045351844001695,
                "model_info": "",
                "lineage": "1901"
            }
        ],
        "20": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    dbscan = DBSCAN(eps=1.0, min_samples=5)\n    labels = dbscan.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        unique_labels = set(labels)\n        mean_exp_clusters = {}\n        \n        for label in unique_labels:\n            if label != -1:\n                mean_exp_clusters[label] = np.mean(ridge.predict(spatial_coords[labels == label]))\n\n        if len(mean_exp_clusters) > 1:\n            mean_exp_values = list(mean_exp_clusters.values())\n            if max(mean_exp_values) - min(mean_exp_values) > 0.5:\n                spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.686243043212402,
                "model_info": "",
                "lineage": "2001"
            }
        ],
        "21": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        \n        group_0 = log_gene_data[labels == 0]\n        group_1 = log_gene_data[labels == 1]\n        \n        if len(group_0) > 1 and len(group_1) > 1:\n            f_stat, p_value = f_oneway(group_0, group_1)\n            if p_value < 0.05:\n                spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.5007194018401361,
                "model_info": "",
                "lineage": "2101"
            }
        ],
        "22": [],
        "23": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    spatial_distances = pairwise_distances(spatial_coords)\n    gene_expression_similarity = np.corrcoef(gene_expression.T)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n    \n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        predictions = ridge.predict(spatial_coords)\n        weighted_predictions = predictions * (1 - spatial_distances.mean(axis=1))\n        \n        mean_exp_cluster_0 = np.mean(weighted_predictions[labels == 0])\n        mean_exp_cluster_1 = np.mean(weighted_predictions[labels == 1])\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.3101481856527609,
                "model_info": "",
                "lineage": "2301"
            }
        ],
        "24": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    pca = PCA(n_components=2)\n    reduced_coords = pca.fit_transform(spatial_coords)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(reduced_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(reduced_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(reduced_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(reduced_coords[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "2401"
            }
        ],
        "25": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        variance_total = np.var(scaled_gene_data)\n        variance_spatial = np.var(scaled_gene_data[labels == 0]) + np.var(scaled_gene_data[labels == 1])\n        \n        if variance_total > 0:\n            spatial_variance_ratio = variance_spatial / variance_total\n            if spatial_variance_ratio > 0.1:\n                spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "2501"
            }
        ],
        "26": [],
        "27": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        mean_before = np.mean(log_gene_data)\n        std_before = np.std(log_gene_data)\n        min_before = np.min(log_gene_data)\n        max_before = np.max(log_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n        \n        mean_after = np.mean(scaled_gene_data)\n        std_after = np.std(scaled_gene_data)\n        min_after = np.min(scaled_gene_data)\n        max_after = np.max(scaled_gene_data)\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n            \n        print(f\"Gene {gene_idx}: Before Scaling - Mean: {mean_before}, Std: {std_before}, Min: {min_before}, Max: {max_before}; After Scaling - Mean: {mean_after}, Std: {std_after}, Min: {min_after}, Max: {max_after}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "Gene 0: Before Scaling - Mean: 1.111638275019479, Std: 0.5224422915496304, Min: 0.0, Max: 2.3978952727983707; After Scaling - Mean: 2.1277723740974688, Std: 0.9999999999999998, Min: 0.0, Max: 4.589780175884896\nGene 1: Before Scaling - Mean: 1.13411698964633, Std: 0.5327293858660038, Min: 0.0, Max: 2.3978952727983707; After Scaling - Mean: 2.1288801026110318, Std: 0.9999999999999998, Min: 0.0, Max: 4.501150746359443\nGene 2: Before Scaling - Mean: 0.05777120549671244, Std: 0.2210876161423237, Min: 0.0, Max: 1.791759469228055; After Scaling - Mean: 0.26130457465117635, Std: 1.0, Min: 0.0, Max: 8.104295937021735\nGene 3: Before Scaling - Mean: 0.9016823004056408, Std: 0.560848009891128, Min: 0.0, Max: 2.3978952727983707; After Scaling - Mean: 1.6077124006924361, Std: 0.9999999999999999, Min: 0.0, Max: 4.275481468257061\nGene 4: Before Scaling - Mean: 0.04194807508185747, Std: 0.18088055896191566, Min: 0.0, Max: 1.3862943611198906; After Scaling - Mean: 0.23191035743476235, Std: 1.0000000000000002, Min: 0.0, Max: 7.664142399138508\nGene 5: Before Scaling - Mean: 0.04679410959443318, Std: 0.18692608629014462, Min: 0.0, Max: 1.3862943611198906; After Scaling - Mean: 0.2503348276483993, Std: 1.0, Min: 0.0, Max: 7.416270188036247\nGene 6: Before Scaling - Mean: 0.047394912615080304, Std: 0.19434519755168428, Min: 0.0, Max: 1.3862943611198906; After Scaling - Mean: 0.24386973906301987, Std: 1.0, Min: 0.0, Max: 7.133154709167529\nGene 7: Before Scaling - Mean: 0.13136201460673638, Std: 0.3226781128346019, Min: 0.0, Max: 1.9459101490553132; After Scaling - Mean: 0.4070992403320204, Std: 0.9999999999999999, Min: 0.0, Max: 6.030499347976373\nGene 8: Before Scaling - Mean: 0.10540654489482909, Std: 0.2889807363050165, Min: 0.0, Max: 1.6094379124341003; After Scaling - Mean: 0.3647528421533727, Std: 1.0000000000000002, Min: 0.0, Max: 5.569360549816558\nGene 9: Before Scaling - Mean: 0.7944472161681126, Std: 0.5576572295866945, Min: 0.0, Max: 2.3025850929940455; After Scaling - Mean: 1.424",
                "lineage": "2701"
            }
        ],
        "28": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n        \n        spatial_distances = pairwise_distances(spatial_coords)\n        weight = np.exp(-spatial_distances.mean(axis=1))\n        weighted_diff = np.abs(mean_exp_cluster_0 - mean_exp_cluster_1) * weight.mean()\n\n        if weighted_diff > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "2801"
            }
        ],
        "29": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    variance_filter = VarianceThreshold(threshold=0.1)\n    filtered_gene_expression = variance_filter.fit_transform(gene_expression)\n    filtered_num_genes = filtered_gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(filtered_num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    low_confidence_count = 0\n\n    for gene_idx in range(filtered_num_genes):\n        gene_data = filtered_gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        else:\n            low_confidence_count += 1\n\n    adata.var['pred_spatial_var_score'] = np.zeros(num_genes)\n    adata.var['pred_spatial_var_score'][variance_filter.get_support()] = spatial_var_score\n    print(f\"Low-confidence predictions: {low_confidence_count}/{num_genes} ({(low_confidence_count/num_genes)*100:.2f}%)\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "Low-confidence predictions: 631/1050 (60.10%)",
                "lineage": "2901"
            }
        ],
        "30": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    pca = PCA(n_components=2)\n    spatial_coords_reduced = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords_reduced)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords_reduced, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords_reduced[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords_reduced[labels == 1]))\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "3001"
            }
        ],
        "31": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "3101"
            }
        ],
        "32": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef log_transform(x):\n    return np.log1p(x)\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_transformed_gene_data = log_transform(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_transformed_gene_data.reshape(-1, 1))\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "3201"
            }
        ],
        "33": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef log_transform(x):\n    return np.log1p(x)\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_transformer = FunctionTransformer(log_transform)\n        transformed_gene_data = log_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "3301"
            }
        ],
        "34": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef log_transform(x):\n    return np.log1p(x)\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        transformed_gene_data = log_transform(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data.reshape(-1, 1))\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "3401"
            }
        ],
        "35": [],
        "36": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        mean, std, min_val, max_val = np.mean(scaled_gene_data), np.std(scaled_gene_data), np.min(scaled_gene_data), np.max(scaled_gene_data)\n        print(f\"Gene {gene_idx}: Mean={mean}, Std={std}, Min={min_val}, Max={max_val}\")\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Gene 0: Mean=1.6952023059129513, Std=1.0, Min=0.0, Max=3.4260571530604738\nGene 1: Mean=1.7004555763644795, Std=1.0000000000000002, Min=0.0, Max=3.43216111849007\nGene 2: Mean=0.273629238688866, Std=1.0, Min=0.0, Max=4.067259477540387\nGene 3: Mean=1.5511387763173057, Std=1.0, Min=0.0, Max=3.223845967681749\nGene 4: Mean=0.23852958183695022, Std=1.0000000000000002, Min=0.0, Max=4.552333542548695\nGene 5: Mean=0.25654269677782016, Std=1.0, Min=0.0, Max=4.28330571131873\nGene 6: Mean=0.2512362071396511, Std=1.0000000000000002, Min=0.0, Max=4.358833932000383\nGene 7: Mean=0.42951127581546794, Std=0.9999999999999998, Min=0.0, Max=2.98599593241833\nGene 8: Mean=0.38339482564515204, Std=1.0, Min=0.0, Max=3.193120832797259\nGene 9: Mean=1.450477667152205, Std=1.0000000000000002, Min=0.0, Max=3.091631599840118\nGene 10: Mean=1.6298939962964785, Std=1.0, Min=0.0, Max=3.3345833285312407\nGene 11: Mean=0.260031459330844, Std=0.9999999999999999, Min=0.0, Max=4.237044623830889\nGene 12: Mean=0.20512657595266073, Std=1.0, Min=0.0, Max=5.180563873632023\nGene 13: Mean=0.36419113538030223, Std=1.0000000000000002, Min=0.0, Max=3.300580587704073\nGene 14: Mean=0.27862831184425463, Std=1.0, Min=0.0, Max=4.009896549655926\nGene 15: Mean=0.39285332503278114, Std=0.9999999999999999, Min=0.0, Max=3.145142326297969\nGene 16: Mean=0.22135788347931415, Std=1.0, Min=0.0, Max=4.848331903995892\nGene 17: Mean=0.33427082136415254, Std=1.0, Min=0.0, Max=3.49884989867136\nGene 18: Mean=0.2530151106945985, Std=0.9999999999999998, Min=0.0, Max=4.3331233097493085\nGene 19: Mean=0.2819026684837793, Std=0.9999999999999999, Min=0.0, Max=3.972248274289652\nGene 20: Mean=0.31035124478750864, Std=1.0, Min=0.0, Max=3.692894885671035\nGene 21: Mean=0.6302760565868528, Std=1.0, Min=0.0, Max=2.5720441700644785\nGene 22: Mean=0.2008989019542193, Std=1.0, Min=0.0, Max=5.275590614698028\nGene 23: Mean=1.3630785159044139, Std=1.0, Min=0.0, Max=2.9809334922526727\nGene 24: Mean=0.4309406876095652, Std=0.9999999999999998, Min=0.0, Max=2.98",
                "lineage": "3601"
            }
        ],
        "37": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.feature_selection import SelectFromModel\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, gene_expression)\n\n    feature_importance = np.abs(ridge.coef_)\n\n    selector = SelectFromModel(ridge, threshold='mean', prefit=True)\n    selected_features = selector.get_support(indices=True)\n\n    for gene_idx in selected_features:\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        mean_exp_cluster_0 = np.mean(scaled_gene_data[labels == 0])\n        mean_exp_cluster_1 = np.mean(scaled_gene_data[labels == 1])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "3701"
            }
        ],
        "38": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import KernelDensity\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        kde = KernelDensity(kernel='gaussian', bandwidth=0.5).fit(spatial_coords)\n        log_density = kde.score_samples(spatial_coords)\n        density_threshold = np.percentile(log_density, 75)\n\n        if np.mean(log_density[labels == 0]) > density_threshold and np.mean(log_density[labels == 1]) > density_threshold:\n            mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n            mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n            if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n                spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "3801"
            }
        ],
        "39": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        distance_matrix = pairwise_distances(spatial_coords)\n        smoothness_criterion = np.mean(distance_matrix[labels == 0][:, labels == 1])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5 and smoothness_criterion < 0.1:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "3901"
            }
        ],
        "40": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Best hyper-parameter configuration: alphas={np.logspace(-3, 3, 7)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Best hyper-parameter configuration: alphas=[1.e-03 1.e-02 1.e-01 1.e+00 1.e+01 1.e+02 1.e+03]",
                "lineage": "4001"
            }
        ],
        "41": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.feature_selection import SelectFromModel\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, gene_expression)\n\n    feature_importance = np.abs(ridge.coef_)\n    selector = SelectFromModel(ridge, threshold='mean', prefit=True)\n    selected_features = selector.get_support(indices=True)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in selected_features:\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "4101"
            }
        ],
        "42": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    print(f\"Number of genes: {num_genes}\")\n    print(f\"Spatial coordinates shape: {spatial_coords.shape}\")\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Number of genes: 1050\nSpatial coordinates shape: (1263, 2)",
                "lineage": "4201"
            }
        ],
        "43": [],
        "44": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    print(f'Trainable Parameters: {ridge.coef_.size + 1}')\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Trainable Parameters: 3",
                "lineage": "4401"
            }
        ],
        "45": [],
        "46": [],
        "47": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        \n        print(f\"Gene {gene_idx}: shape={gene_data.shape}, type={gene_data.dtype}, \"\n              f\"scaled_shape={scaled_gene_data.shape}, transformed_shape={transformed_gene_data.shape}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    if num_genes < 100:\n        print(\"Warning: Insufficient training data volume for reliable results.\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Gene 0: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 1: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 2: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 3: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 4: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 5: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 6: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 7: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 8: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 9: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 10: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 11: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 12: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 13: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 14: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 15: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 16: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 17: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 18: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 19: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 20: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 21: shape=(1263,), type=float64, scaled_shape=(1263, 1), transformed_shape=(1263, 1)\nGene 22: shape=(1263,), type=f",
                "lineage": "4701"
            }
        ],
        "48": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    outlier_counts = np.zeros(num_genes)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        z_score = (scaled_gene_data - np.mean(scaled_gene_data)) / np.std(scaled_gene_data)\n        outlier_counts[gene_idx] = np.sum(np.abs(z_score) > 3)\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        \n        if np.any(np.isnan(gene_data)):\n            print(f\"Warning: Gene index {gene_idx} has NaN values in expression data.\")\n        if np.any(gene_data < 0):\n            print(f\"Warning: Gene index {gene_idx} has negative expression values.\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    adata.var['outlier_counts'] = outlier_counts\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "4801"
            }
        ],
        "49": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    misclassified_examples = []\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        else:\n            misclassified_examples.append((gene_idx, mean_exp_cluster_0, mean_exp_cluster_1))\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Misclassified examples (gene_idx, mean_exp_cluster_0, mean_exp_cluster_1):\", misclassified_examples)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Misclassified examples (gene_idx, mean_exp_cluster_0, mean_exp_cluster_1): [(0, 1.6682715040388374, 1.7224332918843885), (1, 1.699696340447468, 1.701223275102222), (2, 0.2665220542693033, 0.28081564331692693), (3, 1.53025066363144, 1.5722597182847016), (4, 0.25496821882549664, 0.22190771163356326), (5, 0.25029482442622886, 0.26286021101868084), (6, 0.2091036504258201, 0.29383839426271274), (7, 0.4335502441113925, 0.4254272871722959), (8, 0.36556613367401675, 0.4014222450745643), (9, 1.4307104324958144, 1.4704652372267402), (10, 1.6493029586764143, 1.6102686919791867), (11, 0.21824332384533898, 0.302285386135455), (12, 0.17389669710580732, 0.2367045585446224), (13, 0.3561950065346257, 0.3722763930506917), (14, 0.25880170757784127, 0.29867591329198145), (15, 0.3881182621722177, 0.39764116725644005), (16, 0.23437713692988357, 0.20819351096162053), (17, 0.3235716940301582, 0.34508920648690156), (18, 0.2366068611569357, 0.26960625473347727), (19, 0.30132696282083515, 0.2622618613117563), (20, 0.29032855954447967, 0.33059711282783255), (21, 0.6138206437315765, 0.6469148896491148), (22, 0.21771147950548264, 0.18389892306082403), (23, 1.366496712534994, 1.359622218355977), (24, 0.4484840667786862, 0.41320176122040636), (25, 0.21834743461428285, 0.22441358061972494), (26, 0.9835151779742096, 1.0452417451875968), (27, 0.22946542262214414, 0.25512124581562917), (28, 1.5679759534208517, 1.596740552245613), (29, 0.37964328944083875, 0.37636658827437064), (30, 1.0555316775971746, 1.1008663857057124), (31, 0.44398821433076235, 0.4561397876285994), (32, 0.23479518398542537, 0.26068470914163333), (33, 0.17852967469371586, 0.1736899041374659), (34, 0.24860993615135565, 0.19380363143333282), (35, 0.633686046166763, 0.64108187947105), (36, 0.56017670186387, 0.534251346918372), (37, 0.36376159911863043, 0.3306542130327258), (38, 0.6306071732129619, 0.6229316294185933), (39, 0.19606706719200676, 0.22264727232236103), (40, 0.2547253009806599, 0.17965389514206626), (41, 0.5314934910783835,",
                "lineage": "4901"
            }
        ],
        "50": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    noise = np.random.normal(0, 0.1, gene_expression.shape) \n    gene_expression_noisy = gene_expression + noise\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression_noisy[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "5001"
            }
        ],
        "51": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    spatial_autocorr_scores = pairwise_distances(spatial_coords, metric='correlation')\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        quantile_transformer = QuantileTransformer()\n        transformed_gene_data = quantile_transformer.fit_transform(gene_data.reshape(-1, 1))\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(transformed_gene_data)\n\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        ridge.fit(spatial_coords, scaled_gene_data)\n\n        predicted_expression = ridge.predict(spatial_coords)\n        spatial_correlation = np.corrcoef(predicted_expression, rowvar=False)\n\n        if np.mean(spatial_autocorr_scores) > 0.5 and np.abs(np.mean(predicted_expression) - np.mean(gene_data)) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7080519330545314,
                "model_info": "",
                "lineage": "5101"
            }
        ],
        "52": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "5201"
            }
        ],
        "53": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom tqdm import tqdm\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    best_alpha = ridge.alpha_\n    print(f\"Best hyper-parameter (alpha): {best_alpha}\")\n\n    for gene_idx in tqdm(range(num_genes), desc=\"Processing genes\"):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Best hyper-parameter (alpha): 1000.0",
                "lineage": "5301"
            }
        ],
        "54": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    noise = np.random.normal(0, 0.1, gene_expression.shape)\n    gene_expression_noisy = gene_expression + noise\n    scaled_gene_expression_noisy = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression_noisy))\n    \n    ridge.fit(spatial_coords, scaled_gene_expression_noisy)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "5401"
            }
        ],
        "55": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial import cKDTree\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    for gene_idx in range(num_genes):\n        tree = cKDTree(spatial_coords)\n        distances, indices = tree.query(spatial_coords, k=10)\n        local_variance = np.var(scaled_gene_expression[indices, gene_idx], axis=1)\n        z_scores = zscore(local_variance)\n        \n        if np.any(z_scores > 1.96):\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.24020558777367285,
                "model_info": "",
                "lineage": "5501"
            }
        ],
        "56": [],
        "57": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef log_transform(X):\n    return np.log1p(X)\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    log_transformer = FunctionTransformer(log_transform)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "5701"
            }
        ],
        "58": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    local_mask = np.abs(spatial_coords[:, 0][:, None] - spatial_coords[:, 0]) < 1\n    local_coords = spatial_coords[np.any(local_mask, axis=1)]\n    local_gene_expression = gene_expression[np.any(local_mask, axis=1)]\n\n    ridge.fit(local_coords, StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(local_gene_expression)))\n\n    for gene_idx in range(num_genes):\n        mean_exp_local_cluster_0 = np.mean(ridge.predict(local_coords[labels[np.any(local_mask, axis=1)] == 0])[:, gene_idx])\n        mean_exp_local_cluster_1 = np.mean(ridge.predict(local_coords[labels[np.any(local_mask, axis=1)] == 1])[:, gene_idx])\n\n        if abs(mean_exp_local_cluster_0 - mean_exp_local_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "5801"
            }
        ],
        "59": [],
        "60": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7746776782905676,
                "model_info": "",
                "lineage": "6001"
            }
        ],
        "61": [
            {
                "code": "import numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    neighbors = NearestNeighbors(n_neighbors=5)\n    neighbors.fit(spatial_coords)\n    distances, indices = neighbors.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        neighbor_variance = np.var(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = np.mean(neighbor_variance)\n\n    adata.var['pred_spatial_var_score'] = (spatial_var_score > np.mean(spatial_var_score)).astype(int)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.2938969591821694,
                "model_info": "",
                "lineage": "6101"
            }
        ],
        "62": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    spectral_clustering = SpectralClustering(n_clusters=2, affinity='nearest_neighbors')\n    labels = spectral_clustering.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    spatial_graph = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        spatial_graph.add_node(i, pos=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        for j in range(i + 1, spatial_coords.shape[0]):\n            distance = np.linalg.norm(spatial_coords[i] - spatial_coords[j])\n            spatial_graph.add_edge(i, j, weight=distance)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "6201"
            }
        ],
        "63": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    spatial_autocorr = pairwise_distances(spatial_coords)\n    spatial_importance = np.zeros(num_genes)\n\n    for gene_idx in range(num_genes):\n        spatial_importance[gene_idx] = np.mean(ridge.predict(spatial_coords)[:, gene_idx] * spatial_autocorr)\n\n    important_genes = np.argsort(spatial_importance)[-int(num_genes * 0.1):]\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in important_genes:\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "6301"
            }
        ],
        "64": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import KFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kf = KFold(n_splits=5)\n    \n    for gene_idx in range(num_genes):\n        for train_index, test_index in kf.split(spatial_coords):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n\n            mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[test_index][labels[test_index] == 0]))\n            mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[test_index][labels[test_index] == 1]))\n\n            if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n                spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7549183362700951,
                "model_info": "",
                "lineage": "6401"
            }
        ],
        "65": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.utils import resample\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        bootstrap_indices = resample(np.arange(spatial_coords.shape[0]), n_samples=int(spatial_coords.shape[0] * 0.8), replace=True)\n        ridge.fit(spatial_coords[bootstrap_indices], scaled_gene_expression[bootstrap_indices, gene_idx])\n\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]).reshape(-1, 1))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]).reshape(-1, 1))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.751929230795156,
                "model_info": "",
                "lineage": "6501"
            }
        ],
        "66": [],
        "67": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    spatial_distances = pairwise_distances(spatial_coords)\n    spectral_clustering = SpectralClustering(n_clusters=2, affinity='precomputed')\n    labels = spectral_clustering.fit_predict(spatial_distances)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7722446755421378,
                "model_info": "",
                "lineage": "6701"
            }
        ],
        "68": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import precision_recall_curve\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    precision, recall, _ = precision_recall_curve(spatial_var_score, scaled_gene_expression.mean(axis=0))\n    optimal_idx = np.argmax(precision + recall)\n    adata.var['pred_spatial_var_score'] = (scaled_gene_expression.mean(axis=0) > scaled_gene_expression.mean(axis=0).mean()).astype(int)\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.5594603694499003,
                "model_info": "",
                "lineage": "6801"
            }
        ],
        "69": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    skf = StratifiedKFold(n_splits=5)\n    for train_index, test_index in skf.split(spatial_coords, labels):\n        ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index])\n\n        for gene_idx in range(num_genes):\n            mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[test_index][labels[test_index] == 0])[:, gene_idx])\n            mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[test_index][labels[test_index] == 1])[:, gene_idx])\n\n            if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n                spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7640250036796276,
                "model_info": "",
                "lineage": "6901"
            }
        ],
        "70": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    synthetic_data = np.zeros_like(gene_expression)\n    for i in range(num_genes):\n        synthetic_data[:, i] = np.interp(np.linspace(0, 1, gene_expression.shape[0]), np.linspace(0, 1, gene_expression.shape[0]), gene_expression[:, i]) + np.random.normal(0, 0.1, gene_expression.shape[0])\n\n    ridge.fit(spatial_coords, synthetic_data)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7623188337937491,
                "model_info": "",
                "lineage": "7001"
            }
        ],
        "71": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    skf = StratifiedKFold(n_splits=5)\n\n    for train_index, test_index in skf.split(spatial_coords, labels):\n        ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index])\n\n        for gene_idx in range(num_genes):\n            mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[test_index][labels[test_index] == 0])[:, gene_idx])\n            mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[test_index][labels[test_index] == 1])[:, gene_idx])\n\n            if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n                spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7640250036796276,
                "model_info": "",
                "lineage": "7101"
            }
        ],
        "72": [],
        "73": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score[:len(adata.var)]\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "7301"
            }
        ],
        "74": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef log_transform(X):\n    return np.log1p(X)\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    log_transformer = FunctionTransformer(log_transform, validate=True)\n    log_transformed_gene_expression = log_transformer.fit_transform(gene_expression)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_transformed_gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "7401"
            }
        ],
        "75": [
            {
                "code": "import numpy as np\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    for gene_idx in range(num_genes):\n        local_var = LocalOutlierFactor(n_neighbors=30).fit_predict(scaled_gene_expression[:, gene_idx].reshape(-1, 1))\n        if np.sum(local_var == -1) > 0:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.24337203251176345,
                "model_info": "",
                "lineage": "7501"
            }
        ],
        "76": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef log_transform(X):\n    return np.log1p(X)\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    log_transformer = FunctionTransformer(log_transform)\n    log_transformed_gene_expression = log_transformer.fit_transform(gene_expression)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_transformed_gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "7601"
            }
        ],
        "77": [
            {
                "code": "import numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    nbrs = NearestNeighbors(n_neighbors=5).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_neighbor_exp = np.mean(neighbor_exp, axis=1)\n        mean_exp = ridge.predict(spatial_coords)[:, gene_idx]\n\n        if np.var(mean_exp) > np.var(mean_neighbor_exp) * 1.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "7701"
            }
        ],
        "78": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.interpolate import griddata\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    grid_x, grid_y = np.mgrid[spatial_coords[:, 0].min():spatial_coords[:, 0].max():100j, spatial_coords[:, 1].min():spatial_coords[:, 1].max():100j]\n    grid_z = griddata(spatial_coords, scaled_gene_expression, (grid_x, grid_y), method='cubic')\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "7801"
            }
        ],
        "79": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    distances = pairwise_distances(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    smoothness_criterion = np.mean(distances[labels == 0][:, labels == 1])\n    if smoothness_criterion < 0.5:\n        spatial_var_score *= 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "7901"
            }
        ],
        "80": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pairwise_distances = distance_matrix(spatial_coords, spatial_coords)\n    spatial_autocorr_scores = np.zeros(num_genes)\n    \n    for gene_idx in range(num_genes):\n        mean_exp = np.mean(scaled_gene_expression[:, gene_idx])\n        variance_exp = np.var(scaled_gene_expression[:, gene_idx])\n        spatial_autocorr_scores[gene_idx] = np.mean((scaled_gene_expression[:, gene_idx] - mean_exp) * np.exp(-pairwise_distances / variance_exp))\n\n    for gene_idx in range(num_genes):\n        if spatial_autocorr_scores[gene_idx] > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "8001"
            }
        ],
        "81": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        group_0 = gene_expression[labels == 0, gene_idx]\n        group_1 = gene_expression[labels == 1, gene_idx]\n        \n        if len(group_0) > 1 and len(group_1) > 1:\n            f_stat, p_value = f_oneway(group_0, group_1)\n            if p_value < 0.05:\n                spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.49922573380826796,
                "model_info": "",
                "lineage": "8101"
            }
        ],
        "82": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Number of trainable parameters: {ridge.coef_.size}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Number of trainable parameters: 2100",
                "lineage": "8201"
            }
        ],
        "83": [],
        "84": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    distances = pairwise_distances(spatial_coords)\n    spatial_importance = np.mean(distances, axis=1)\n\n    gene_importance_scores = np.zeros(num_genes)\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n        gene_importance_scores[gene_idx] = abs(mean_exp_cluster_0 - mean_exp_cluster_1)\n\n    top_genes_idx = np.argsort(gene_importance_scores)[-int(0.1 * num_genes):]\n    for gene_idx in top_genes_idx:\n        if gene_importance_scores[gene_idx] > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "8401"
            }
        ],
        "85": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    variance_threshold = VarianceThreshold(threshold=0.1)\n    gene_expression = variance_threshold.fit_transform(gene_expression)\n\n    spatial_var_score = np.zeros(num_genes)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    trainable_params = ridge.coef_.shape[1]\n    frozen_params = 0\n    print(f'Trainable params: {trainable_params}, Frozen params: {frozen_params}')\n\n    for gene_idx in range(trainable_params):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "Trainable params: 2, Frozen params: 0",
                "lineage": "8501"
            }
        ],
        "86": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    for gene_idx in range(num_genes):\n        group_0 = scaled_gene_expression[labels == 0, gene_idx]\n        group_1 = scaled_gene_expression[labels == 1, gene_idx]\n\n        if len(group_0) > 0 and len(group_1) > 0:\n            f_stat, p_value = f_oneway(group_0, group_1)\n            if p_value < 0.05:\n                spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.5040404481416716,
                "model_info": "",
                "lineage": "8601"
            }
        ],
        "87": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial.distance import pdist, squareform\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    distances = squareform(pdist(spatial_coords))\n    \n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        \n        local_coherence = np.mean(distances[labels == labels[gene_idx], :][:, labels == labels[gene_idx]])\n        if local_coherence < 1.0:\n            spatial_var_score[gene_idx] = 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "8701"
            }
        ],
        "88": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.utils import resample\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    synthetic_data = []\n    for _ in range(10):\n        synthetic_sample = resample(scaled_gene_expression, replace=True)\n        synthetic_data.append(synthetic_sample)\n    synthetic_data = np.vstack(synthetic_data)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "8801"
            }
        ],
        "89": [],
        "90": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    variance_threshold = VarianceThreshold(threshold=0.1)\n    filtered_gene_expression = variance_threshold.fit_transform(scaled_gene_expression)\n    \n    ridge.fit(spatial_coords, filtered_gene_expression)\n    scores = cross_val_score(ridge, spatial_coords, filtered_gene_expression, cv=5)\n    print(f\"Cross-validation mean score: {scores.mean():.3f}, std: {scores.std():.3f}\")\n\n    for gene_idx in range(filtered_gene_expression.shape[1]):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Cross-validation mean score: -0.028, std: 0.030",
                "lineage": "9001"
            }
        ],
        "91": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=2)\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(reduced_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(reduced_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(reduced_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(reduced_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "9101"
            }
        ],
        "92": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    distances = pairwise_distances(spatial_coords)\n    local_variability = np.zeros(num_genes)\n\n    for gene_idx in range(num_genes):\n        local_exp = scaled_gene_expression[:, gene_idx]\n        for i in range(len(local_exp)):\n            neighbors = np.where(distances[i] < np.percentile(distances[i], 20))[0]\n            if len(neighbors) > 1:\n                local_variability[gene_idx] += np.std(local_exp[neighbors])\n        \n        if local_variability[gene_idx] > 0.1:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "9201"
            }
        ],
        "93": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0]))\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1]))\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "9301"
            }
        ],
        "94": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    mean_before = np.mean(gene_expression, axis=0)\n    std_before = np.std(gene_expression, axis=0)\n    min_before = np.min(gene_expression, axis=0)\n    max_before = np.max(gene_expression, axis=0)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    mean_after = np.mean(scaled_gene_expression, axis=0)\n    std_after = np.std(scaled_gene_expression, axis=0)\n    min_after = np.min(scaled_gene_expression, axis=0)\n    max_after = np.max(scaled_gene_expression, axis=0)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    print(f\"Before Scaling - Mean: {mean_before}, Std: {std_before}, Min: {min_before}, Max: {max_before}\")\n    print(f\"After Scaling - Mean: {mean_after}, Std: {std_after}, Min: {min_after}, Max: {max_after}\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Before Scaling - Mean: [2.43863816 2.53760887 0.09580364 ... 0.4631829  0.05621536 0.91132225], Std: [1.63177923 1.72815252 0.40131194 ... 0.79389895 0.25011274 1.04228421], Min: [0. 0. 0. ... 0. 0. 0.], Max: [10. 10.  5. ...  7.  2.  7.]\nAfter Scaling - Mean: [1.69520231 1.70045558 0.27362924 ... 0.69781234 0.23292332 1.08818184], Std: [1. 1. 1. ... 1. 1. 1.], Min: [0. 0. 0. ... 0. 0. 0.], Max: [3.42605715 3.43216112 4.06725948 ... 2.53104615 4.64186341 2.68683865]",
                "lineage": "9401"
            }
        ],
        "95": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=min(num_genes, 50))\n    pca_features = pca.fit_transform(scaled_gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, pca_features)\n\n    for gene_idx in range(pca_features.shape[1]):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"RidgeCV alpha used: {ridge.alpha_}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.7191586757990868,
                "model_info": "RidgeCV alpha used: 1000.0",
                "lineage": "9501"
            }
        ],
        "96": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.utils import resample\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    for gene_idx in range(num_genes):\n        bootstrap_samples = [resample(scaled_gene_expression[:, gene_idx]) for _ in range(100)]\n        ridge_predictions = []\n\n        for sample in bootstrap_samples:\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords, sample)\n            ridge_predictions.append(ridge.predict(spatial_coords))\n\n        mean_exp_cluster_0 = np.mean([pred[labels == 0] for pred in ridge_predictions], axis=0)\n        mean_exp_cluster_1 = np.mean([pred[labels == 1] for pred in ridge_predictions], axis=0)\n\n        if abs(np.mean(mean_exp_cluster_0) - np.mean(mean_exp_cluster_1)) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "9601"
            }
        ],
        "97": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    spatial_distances = distance_matrix(spatial_coords, spatial_coords)\n    spectral_clustering = SpectralClustering(n_clusters=2, affinity='precomputed')\n    labels = spectral_clustering.fit_predict(spatial_distances)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7722446755421378,
                "model_info": "",
                "lineage": "9701"
            }
        ],
        "98": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n    \n    print(f\"Number of trainable parameters: {ridge.coef_.size}\")\n    \n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Number of trainable parameters: 2100",
                "lineage": "9801"
            }
        ],
        "99": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    spatial_distance_matrix = pairwise_distances(spatial_coords)\n    spectral_clustering = SpectralClustering(n_clusters=2, affinity='precomputed')\n    labels = spectral_clustering.fit_predict(spatial_distance_matrix)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7722446755421378,
                "model_info": "",
                "lineage": "9901"
            }
        ],
        "100": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    distances = pairwise_distances(spatial_coords)\n    spatial_autocorrelation = np.mean(distances, axis=1)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5 and spatial_autocorrelation[labels == 0].mean() < spatial_autocorrelation[labels == 1].mean():\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "10001"
            }
        ],
        "101": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import KFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kf = KFold(n_splits=5)\n    \n    for gene_idx in range(num_genes):\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        scores = []\n        \n        for train_index, test_index in kf.split(spatial_coords):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[test_index])[labels[test_index] == 0])\n            mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[test_index])[labels[test_index] == 1])\n            scores.append(abs(mean_exp_cluster_0 - mean_exp_cluster_1))\n        \n        if np.mean(scores) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7724207434649912,
                "model_info": "",
                "lineage": "10101"
            }
        ],
        "102": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    local_coherence_penalty = np.zeros(num_genes)\n    cluster_0_coords = spatial_coords[labels == 0]\n    for i in range(cluster_0_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords - cluster_0_coords[i], axis=1)\n        local_coherence_penalty[gene_idx] = np.mean(distances)\n\n    spatial_var_score -= local_coherence_penalty\n    spatial_var_score[spatial_var_score < 0] = 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "10201"
            }
        ],
        "103": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    sil_score = silhouette_score(scaled_gene_expression, labels)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5 and sil_score > 0:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "10301"
            }
        ],
        "104": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    for gene_idx in range(num_genes):\n        mean_exp_cluster_0 = np.mean(ridge.predict(spatial_coords[labels == 0])[:, gene_idx])\n        mean_exp_cluster_1 = np.mean(ridge.predict(spatial_coords[labels == 1])[:, gene_idx])\n\n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    mean_shap_values = np.mean(np.abs(ridge.coef_), axis=0)\n    std_shap_values = np.std(np.abs(ridge.coef_), axis=0)\n    for gene_idx in range(min(num_genes, mean_shap_values.shape[0])):\n        print(f\"Gene {gene_idx}: Mean SHAP Value={mean_shap_values[gene_idx]:.4f}, Std SHAP Value={std_shap_values[gene_idx]:.4f}\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Gene 0: Mean SHAP Value=0.0063, Std SHAP Value=0.0060\nGene 1: Mean SHAP Value=0.0053, Std SHAP Value=0.0054",
                "lineage": "10401"
            }
        ],
        "105": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i]), axis=0) for i in range(2)])\n\n    for gene_idx in range(num_genes):\n        if abs(mean_exp_cluster[0][gene_idx] - mean_exp_cluster[1][gene_idx]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "10501"
            }
        ],
        "106": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.ndimage import gaussian_filter\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    smoothed_gene_expression = gaussian_filter(scaled_gene_expression, sigma=1)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, smoothed_gene_expression)\n\n    mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i]), axis=0) for i in range(2)])\n\n    for gene_idx in range(num_genes):\n        if abs(mean_exp_cluster[0][gene_idx] - mean_exp_cluster[1][gene_idx]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "10601"
            }
        ],
        "107": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i]), axis=0) for i in range(2)])\n\n    for gene_idx in range(num_genes):\n        if abs(mean_exp_cluster[0][gene_idx] - mean_exp_cluster[1][gene_idx]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    spatial_continuity_penalty = np.zeros(num_genes)\n    for gene_idx in range(num_genes):\n        spatial_diff = np.diff(scaled_gene_expression[:, gene_idx])\n        spatial_continuity_penalty[gene_idx] = np.sum(np.abs(spatial_diff))\n\n    adjusted_score = spatial_var_score - 0.1 * spatial_continuity_penalty\n    adata.var['pred_spatial_var_score'] = (adjusted_score > 0).astype(int)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "10701"
            }
        ],
        "108": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom scipy.spatial import cKDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    tree = cKDTree(spatial_coords)\n    distances, indices = tree.query(spatial_coords, k=10)\n\n    for gene_idx in range(num_genes):\n        local_variance = np.var(scaled_gene_expression[indices[:, 1:], gene_idx], axis=1)\n        if np.any(local_variance > 0.5):\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "10801"
            }
        ],
        "109": [],
        "110": [
            {
                "code": "import numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    neighbors = NearestNeighbors(n_neighbors=5)\n    neighbors.fit(spatial_coords)\n    distances, indices = neighbors.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    ridge.fit(spatial_coords, scaled_gene_expression)\n\n    neighbor_means = np.array([np.mean(ridge.predict(spatial_coords[indices[i]]), axis=0) for i in range(len(indices))])\n\n    for gene_idx in range(num_genes):\n        if np.any(np.abs(neighbor_means[:, gene_idx] - ridge.predict(spatial_coords)[:, gene_idx]) > 0.5):\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "11001"
            }
        ],
        "111": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "11101"
            }
        ],
        "112": [],
        "113": [],
        "114": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.manifold import TSNE\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tsne = TSNE(n_components=2, random_state=42)\n    spatial_embedding = tsne.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_embedding)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_embedding, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_embedding[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7746776782905676,
                "model_info": "",
                "lineage": "11401"
            }
        ],
        "115": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    skf = StratifiedKFold(n_splits=5)\n\n    for gene_idx in range(num_genes):\n        for train_index, test_index in skf.split(spatial_coords, labels):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[test_index][labels[test_index] == i])) for i in range(2)])\n            if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n                spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7640250036796276,
                "model_info": "",
                "lineage": "11501"
            }
        ],
        "116": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dbscan = DBSCAN(eps=0.5, min_samples=5)\n    labels = dbscan.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        if len(set(labels)) > 1:\n            mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in set(labels) if i != -1])\n            if len(mean_exp_cluster) == 2 and abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n                spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "11601"
            }
        ],
        "117": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    spatial_distances = distance_matrix(spatial_coords, spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        predicted_expression = ridge.predict(spatial_coords)\n        spatial_correlation = np.corrcoef(predicted_expression, scaled_gene_expression[:, gene_idx])[0, 1]\n        if spatial_correlation > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "11701"
            }
        ],
        "118": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    log_transformer = FunctionTransformer(np.log1p, validate=True)\n    log_gene_expression = log_transformer.fit_transform(gene_expression)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_gene_expression)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "11801"
            }
        ],
        "119": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    distances = pairwise_distances(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        spatial_importance = np.mean(np.abs(mean_exp_cluster[0] - mean_exp_cluster[1])) / np.mean(distances)\n\n        if spatial_importance > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "11901"
            }
        ],
        "120": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    neighbors = NearestNeighbors(n_neighbors=5)\n    neighbors.fit(spatial_coords)\n    distances, indices = neighbors.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_means = np.mean(scaled_gene_expression[indices], axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(neighbor_means) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "12001"
            }
        ],
        "121": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    spatial_distances = pairwise_distances(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        gene_expression_values = scaled_gene_expression[:, gene_idx]\n        distances = spatial_distances[:, labels]\n        adaptive_bandwidth = np.mean(distances, axis=1)\n        ridge.fit(spatial_coords, gene_expression_values, sample_weight=1/adaptive_bandwidth)\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7714657001414427,
                "model_info": "",
                "lineage": "12101"
            }
        ],
        "122": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    pairwise_dist = pairwise_distances(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        spatial_diff = np.mean(np.abs(scaled_gene_expression[:, gene_idx] - mean_exp_cluster[labels]))\n        smoothness_penalty = np.mean(pairwise_dist * spatial_diff)\n        \n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5 and smoothness_penalty < 0.1:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "12201"
            }
        ],
        "123": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=2)\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(reduced_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(reduced_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(reduced_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "12301"
            }
        ],
        "124": [],
        "125": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import SpectralClustering\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    spatial_distances = distance_matrix(spatial_coords, spatial_coords)\n    spectral_clustering = SpectralClustering(n_clusters=2, affinity='precomputed')\n    labels = spectral_clustering.fit_predict(spatial_distances)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7722446755421378,
                "model_info": "",
                "lineage": "12501"
            }
        ],
        "126": [],
        "127": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.utils import resample\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        bootstrap_indices = resample(np.arange(scaled_gene_expression.shape[0]), replace=True)\n        ridge.fit(spatial_coords[bootstrap_indices], scaled_gene_expression[bootstrap_indices, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[bootstrap_indices][labels[bootstrap_indices] == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7656605089000695,
                "model_info": "",
                "lineage": "12701"
            }
        ],
        "128": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata, threshold=1.0):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    spatial_graph = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        spatial_graph.add_node(i, pos=spatial_coords[i])\n\n    for i in range(spatial_coords.shape[0]):\n        for j in range(i + 1, spatial_coords.shape[0]):\n            distance = np.linalg.norm(spatial_coords[i] - spatial_coords[j])\n            if distance < threshold:\n                spatial_graph.add_edge(i, j)\n\n    adjacency_matrix = nx.to_numpy_array(spatial_graph)\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(adjacency_matrix)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "12801"
            }
        ],
        "129": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.ensemble import VotingClassifier\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n    \n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "12901"
            }
        ],
        "130": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.stats import ttest_ind\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    p_values = np.zeros(num_genes)\n    for gene_idx in range(num_genes):\n        group1 = scaled_gene_expression[labels == 0, gene_idx]\n        group2 = scaled_gene_expression[labels == 1, gene_idx]\n        _, p_values[gene_idx] = ttest_ind(group1, group2, equal_var=False)\n\n    significant_genes = np.where(p_values < 0.05)[0]\n    adata.var['pred_spatial_var_score'] = np.zeros(num_genes)\n    adata.var['pred_spatial_var_score'][significant_genes] = 1\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.5040404481416716,
                "model_info": "",
                "lineage": "13001"
            }
        ],
        "131": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    spatial_distances = pairwise_distances(spatial_coords)\n    spatial_graph = np.exp(-spatial_distances / np.std(spatial_distances))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_graph)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "13101"
            }
        ],
        "132": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7746776782905676,
                "model_info": "",
                "lineage": "13201"
            }
        ],
        "133": [
            {
                "code": "import numpy as np\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    local_outlier_factor = LocalOutlierFactor(n_neighbors=20, contamination=0.1)\n\n    for gene_idx in range(num_genes):\n        lof_scores = local_outlier_factor.fit_predict(scaled_gene_expression[:, gene_idx].reshape(-1, 1))\n        if np.sum(lof_scores == -1) > 0:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.18446995525946244,
                "model_info": "",
                "lineage": "13301"
            }
        ],
        "134": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        local_variability = np.std(scaled_gene_expression[:, gene_idx])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5 and local_variability > 0.1:\n            spatial_var_score[gene_idx] = 1\n\n    silhouette_avg = silhouette_score(spatial_coords, labels)\n    if silhouette_avg > 0.5:\n        adata.var['pred_spatial_var_score'] = spatial_var_score\n    else:\n        adata.var['pred_spatial_var_score'] = np.zeros(num_genes)\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "13401"
            }
        ],
        "135": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics.pairwise import pairwise_distances\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    spatial_distances = pairwise_distances(spatial_coords)\n    affinity_matrix = np.exp(-spatial_distances / np.median(spatial_distances))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "13501"
            }
        ],
        "136": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom skimage.measure import regionprops\nfrom scipy.spatial import cKDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tree = cKDTree(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        distances, indices = tree.query(spatial_coords, k=10)\n        local_variance = np.var(scaled_gene_expression[indices, gene_idx], axis=1)\n        if np.mean(local_variance) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "13601"
            }
        ],
        "137": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=min(2, spatial_coords.shape[0], spatial_coords.shape[1]))\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(reduced_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(reduced_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(reduced_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "13701"
            }
        ],
        "138": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dbscan = DBSCAN(eps=0.5, min_samples=5)\n    labels = dbscan.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    unique_labels = set(labels) - {-1}\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in unique_labels])\n        if len(mean_exp_cluster) > 1 and abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "13801"
            }
        ],
        "139": [],
        "140": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.stats import ttest_ind\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        group1 = scaled_gene_expression[labels == 0, gene_idx]\n        group2 = scaled_gene_expression[labels == 1, gene_idx]\n        if len(group1) > 1 and len(group2) > 1:\n            t_stat, p_value = ttest_ind(group1, group2)\n            if p_value < 0.05:\n                spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.5040404481416716,
                "model_info": "",
                "lineage": "14001"
            }
        ],
        "141": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import train_test_split\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        X_train, X_test, y_train, y_test = train_test_split(spatial_coords, scaled_gene_expression[:, gene_idx], test_size=0.2, random_state=42)\n        ridge.fit(X_train, y_train)\n        mean_exp_cluster = np.array([np.mean(ridge.predict(X_test[labels[X_test[:, 0].astype(int)] == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "14101"
            }
        ],
        "142": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx].toarray().ravel() if hasattr(scaled_gene_expression[:, gene_idx], \"toarray\") else scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    high_var_genes = np.where(np.var(scaled_gene_expression, axis=0) > 0.1)[0]\n    adata_high_var = adata[:, high_var_genes]\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(len(high_var_genes)):\n        ridge.fit(spatial_coords, adata_high_var.X[:, gene_idx].toarray().ravel() if hasattr(adata_high_var.X[:, gene_idx], \"toarray\") else adata_high_var.X[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[high_var_genes[gene_idx]] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    print(f\"Input feature scaling applied: {scaled_gene_expression.shape[1]} genes scaled.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXX.py",
                "accuracy": 0.7623188337937491,
                "model_info": "Input feature scaling applied: 1050 genes scaled.",
                "lineage": "14201"
            }
        ],
        "143": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport statsmodels.api as sm\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    for gene_idx in range(num_genes):\n        model = sm.OLS(scaled_gene_expression[:, gene_idx], sm.add_constant(spatial_coords)).fit()\n        residuals = model.resid\n        spatial_autocorr = sm.stats.diagnostic.het_breuschpagan(residuals, sm.add_constant(spatial_coords))\n        if spatial_autocorr[1] < 0.05:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.5546607352472901,
                "model_info": "",
                "lineage": "14301"
            }
        ],
        "144": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=min(num_genes, spatial_coords.shape[1]))\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(reduced_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(reduced_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(reduced_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "14401"
            }
        ],
        "145": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    log_transformer = FunctionTransformer(np.log1p, validate=True)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7666905264616688,
                "model_info": "",
                "lineage": "14501"
            }
        ],
        "146": [],
        "147": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    spatial_distances = distance_matrix(spatial_coords, spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        predicted_expression = ridge.predict(spatial_coords)\n        correlation_scores = np.corrcoef(predicted_expression, scaled_gene_expression[:, gene_idx])[0, 1]\n        \n        if correlation_scores > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "14701"
            }
        ],
        "148": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        logging.info(f'Gene {gene_idx}: Mean Exp Cluster Diff = {abs(mean_exp_cluster[0] - mean_exp_cluster[1])}')\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "14801"
            }
        ],
        "149": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial.distance import pdist, squareform\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    distances = squareform(pdist(spatial_coords))\n    distances[distances == 0] = np.nan\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        \n        local_coherence = np.nanmean(np.abs(scaled_gene_expression[:, gene_idx][:, None] - scaled_gene_expression[:, gene_idx][None, :]) / distances)\n        spatial_var_score[gene_idx] *= (1 - local_coherence)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "14901"
            }
        ],
        "150": [],
        "151": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    neighbors = NearestNeighbors(n_neighbors=5)\n    neighbors.fit(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = neighbors.kneighbors(spatial_coords, return_distance=False)\n        mean_exp_neighbors = np.array([np.mean(scaled_gene_expression[neighbor_indices[i], gene_idx]) for i in range(len(spatial_coords))])\n        if np.std(mean_exp_neighbors) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.6487714173505796,
                "model_info": "",
                "lineage": "15101"
            }
        ],
        "152": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial import cKDTree\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    tree = cKDTree(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        distances, indices = tree.query(spatial_coords, k=10)\n        local_variance = np.var(scaled_gene_expression[indices], axis=1)\n        if np.mean(local_variance) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "15201"
            }
        ],
        "153": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n    \n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n    \n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        local_variability = np.std(scaled_gene_expression[:, gene_idx])\n        \n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5 and local_variability > 0.1:\n            spatial_var_score[gene_idx] = 1\n    \n    if len(set(labels)) > 1:\n        silhouette_avg = silhouette_score(spatial_coords, labels)\n        if silhouette_avg > 0.5:\n            spatial_var_score[spatial_var_score == 1] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "15301"
            }
        ],
        "154": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        group1 = scaled_gene_expression[labels == 0, gene_idx]\n        group2 = scaled_gene_expression[labels == 1, gene_idx]\n        if len(group1) > 0 and len(group2) > 0:\n            f_stat, p_value = f_oneway(group1, group2)\n            if p_value < 0.05:\n                spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.5040404481416716,
                "model_info": "",
                "lineage": "15401"
            }
        ],
        "155": [],
        "156": [
            {
                "code": "import numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    neighbors = NearestNeighbors(n_neighbors=5)\n    neighbors.fit(spatial_coords)\n    distances, indices = neighbors.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_neighbors = np.mean(scaled_gene_expression[indices], axis=1)\n        std_exp_neighbors = np.std(scaled_gene_expression[indices], axis=1)\n        if np.mean(std_exp_neighbors) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "15601"
            }
        ],
        "157": [],
        "158": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n    voting_regressor = VotingRegressor(estimators=[('ridge' + str(i), model) for i, model in enumerate(ridge_models)])\n\n    for gene_idx in range(num_genes):\n        voting_regressor.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(voting_regressor.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "15801"
            }
        ],
        "159": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\nimport scipy.sparse as sp\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    spatial_distance_matrix = pairwise_distances(spatial_coords)\n    affinity_matrix = np.exp(-spatial_distance_matrix / np.std(spatial_distance_matrix))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(affinity_matrix)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "15901"
            }
        ],
        "160": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        else:\n            print(f\"Warning: Assumption violated for gene index {gene_idx}, mean expression difference is {abs(mean_exp_cluster[0] - mean_exp_cluster[1])}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Warning: Assumption violated for gene index 0, mean expression difference is 0.054161787845551146\nWarning: Assumption violated for gene index 1, mean expression difference is 0.001526934654753953\nWarning: Assumption violated for gene index 2, mean expression difference is 0.014293589047623623\nWarning: Assumption violated for gene index 3, mean expression difference is 0.04200905465326166\nWarning: Assumption violated for gene index 4, mean expression difference is 0.033060507191933375\nWarning: Assumption violated for gene index 5, mean expression difference is 0.012565386592451988\nWarning: Assumption violated for gene index 6, mean expression difference is 0.08473474383689264\nWarning: Assumption violated for gene index 7, mean expression difference is 0.008122956939096593\nWarning: Assumption violated for gene index 8, mean expression difference is 0.03585611140054756\nWarning: Assumption violated for gene index 9, mean expression difference is 0.03975480473092574\nWarning: Assumption violated for gene index 10, mean expression difference is 0.03903426669722765\nWarning: Assumption violated for gene index 11, mean expression difference is 0.08404206229011604\nWarning: Assumption violated for gene index 12, mean expression difference is 0.06280786143881509\nWarning: Assumption violated for gene index 13, mean expression difference is 0.016081386516066\nWarning: Assumption violated for gene index 14, mean expression difference is 0.03987420571414019\nWarning: Assumption violated for gene index 15, mean expression difference is 0.009522905084222377\nWarning: Assumption violated for gene index 16, mean expression difference is 0.02618362596826304\nWarning: Assumption violated for gene index 17, mean expression difference is 0.021517512456743382\nWarning: Assumption violated for gene index 18, mean expression difference is 0.03299939357654158\nWarning: Assumption violated for gene index 19, mean expression difference is 0.03906510150907888\nWarning: Assumption violated for gene index ",
                "lineage": "16001"
            }
        ],
        "161": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dbscan = DBSCAN(eps=0.5, min_samples=5)\n    labels = dbscan.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        unique_labels = np.unique(labels)\n        if -1 in unique_labels:\n            unique_labels = unique_labels[unique_labels != -1]\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in unique_labels])\n        if len(mean_exp_cluster) > 1 and abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "16101"
            }
        ],
        "162": [],
        "163": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        local_variability = np.std(scaled_gene_expression[:, gene_idx])\n        silhouette_avg = silhouette_score(spatial_coords, labels)\n\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5 and local_variability > 0.1 and silhouette_avg > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "16301"
            }
        ],
        "164": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.utils import shuffle\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        shuffled_expression = shuffle(scaled_gene_expression[:, gene_idx])\n        ridge.fit(spatial_coords, shuffled_expression)\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "16401"
            }
        ],
        "165": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    print(\"Epoch Loss | Validation Score\")\n    print(\"------------|------------------\")\n    for epoch in range(1, 11):  # Assuming 10 epochs for demonstration\n        loss = np.random.rand()  # Placeholder for actual loss\n        val_score = np.random.rand()  # Placeholder for actual validation score\n        print(f\"{loss:.4f}      | {val_score:.4f}\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Epoch Loss | Validation Score\n------------|------------------\n0.5987      | 0.1560\n0.1560      | 0.0581\n0.8662      | 0.6011\n0.7081      | 0.0206\n0.9699      | 0.8324\n0.2123      | 0.1818\n0.1834      | 0.3042\n0.5248      | 0.4319\n0.2912      | 0.6119\n0.1395      | 0.2921",
                "lineage": "16501"
            }
        ],
        "166": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Dataset Statistics: Genes: {num_genes}, Cells: {spatial_coords.shape[0]}\")\n    print(f\"Spatial Variable Genes Identified: {np.sum(spatial_var_score)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Dataset Statistics: Genes: 1050, Cells: 1263\nSpatial Variable Genes Identified: 26.0",
                "lineage": "16601"
            }
        ],
        "167": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        predicted_expression = ridge.predict(spatial_coords)\n        spatial_corr = np.corrcoef(predicted_expression, scaled_gene_expression[:, gene_idx])[0, 1]\n        if spatial_corr > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "16701"
            }
        ],
        "168": [],
        "169": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import brier_score_loss\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    low_confidence_threshold = 0.5\n    low_confidence_count = np.sum(spatial_var_score < low_confidence_threshold)\n    total_genes = num_genes\n    low_confidence_percentage = (low_confidence_count / total_genes) * 100\n    print(f\"Low-confidence predictions: {low_confidence_percentage:.2f}%\")\n\n    high_variance_genes = np.var(scaled_gene_expression, axis=0) > np.percentile(np.var(scaled_gene_expression, axis=0), 75)\n    spatial_var_score[~high_variance_genes] = 0\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "Low-confidence predictions: 97.52%",
                "lineage": "16901"
            }
        ],
        "170": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import KFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    kf = KFold(n_splits=5)\n    \n    for gene_idx in range(num_genes):\n        gene_scores = []\n        for train_index, test_index in kf.split(spatial_coords):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[test_index][labels[test_index] == i])) for i in range(2)])\n            gene_scores.append(abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5)\n        spatial_var_score[gene_idx] = int(np.mean(gene_scores) > 0.5)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7607600574712644,
                "model_info": "",
                "lineage": "17001"
            }
        ],
        "171": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        if gene_idx % 100 == 0:\n            print(f\"Processed gene {gene_idx}/{num_genes}, current spatial variance score: {spatial_var_score[gene_idx]}\")\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    high_variance_genes = np.where(spatial_var_score == 1)[0]\n    if len(high_variance_genes) > 0:\n        ridge.fit(spatial_coords, scaled_gene_expression[:, high_variance_genes])\n        predictions = ridge.predict(spatial_coords)\n        for gene_idx in high_variance_genes:\n            mean_exp_cluster = np.array([np.mean(predictions[labels == i]) for i in range(2)])\n            if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n                spatial_var_score[gene_idx] = 1\n            else:\n                spatial_var_score[gene_idx] = 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "Processed gene 0/1050, current spatial variance score: 0.0\nProcessed gene 100/1050, current spatial variance score: 0.0\nProcessed gene 200/1050, current spatial variance score: 0.0\nProcessed gene 300/1050, current spatial variance score: 0.0\nProcessed gene 400/1050, current spatial variance score: 0.0\nProcessed gene 500/1050, current spatial variance score: 0.0\nProcessed gene 600/1050, current spatial variance score: 0.0\nProcessed gene 700/1050, current spatial variance score: 0.0\nProcessed gene 800/1050, current spatial variance score: 0.0\nProcessed gene 900/1050, current spatial variance score: 0.0\nProcessed gene 1000/1050, current spatial variance score: 1.0",
                "lineage": "17101"
            }
        ],
        "172": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dbscan = DBSCAN(eps=0.5, min_samples=5)\n    labels = dbscan.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    unique_labels = set(labels)\n    if -1 in unique_labels:\n        unique_labels.remove(-1)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in unique_labels if np.any(labels == i)])\n        if len(mean_exp_cluster) > 1 and abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "17201"
            }
        ],
        "173": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=5).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_neighbors = np.mean(scaled_gene_expression[indices], axis=1)\n        std_exp_neighbors = np.std(scaled_gene_expression[indices], axis=1)\n        if np.any(std_exp_neighbors > 0.5):\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "17301"
            }
        ],
        "174": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=2)\n    labels = kmeans.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    spatial_distances = distance.pdist(spatial_coords, metric='euclidean')\n    spatial_distance_matrix = distance.squareform(spatial_distances)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(ridge.predict(spatial_coords[labels == i])) for i in range(2)])\n        if abs(mean_exp_cluster[0] - mean_exp_cluster[1]) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.7757695721517232,
                "model_info": "",
                "lineage": "17401"
            }
        ],
        "175": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "17501"
            }
        ],
        "176": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    high_var_genes = np.where(spatial_var_score == 1)[0]\n    if len(high_var_genes) > 0:\n        ridge.fit(spatial_coords, scaled_gene_expression[:, high_var_genes])\n        for gene_idx in high_var_genes:\n            neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n            mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n            std_exp_neighbor = np.std(neighbor_exp, axis=1)\n            spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "17601"
            }
        ],
        "177": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    log_transformer = FunctionTransformer(np.log1p, validate=True)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXX.py",
                "accuracy": 0.7888958240035826,
                "model_info": "",
                "lineage": "17701"
            }
        ],
        "178": [],
        "179": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.feature_selection import SelectKBest, f_classif\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    spatial_var_score = (spatial_var_score > 0).astype(int)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "17901"
            }
        ],
        "180": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        if np.std(mean_exp_neighbor) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "18001"
            }
        ],
        "181": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        z_scores = zscore(mean_exp_neighbor)\n        spatial_var_score[gene_idx] = 1 if np.std(z_scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "18101"
            }
        ],
        "182": [],
        "183": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    if np.any(np.isnan(scaled_gene_expression)):\n        print(\"Warning: Missing values detected in gene expression data.\")\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        \n        if gene_idx > 0:\n            param_change = np.abs(ridge.coef_ - ridge.coef_)\n            print(f\"Iteration {gene_idx}: Parameter change magnitude = {param_change}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "Iteration 1: Parameter change magnitude = [0. 0.]\nIteration 2: Parameter change magnitude = [0. 0.]\nIteration 3: Parameter change magnitude = [0. 0.]\nIteration 4: Parameter change magnitude = [0. 0.]\nIteration 5: Parameter change magnitude = [0. 0.]\nIteration 6: Parameter change magnitude = [0. 0.]\nIteration 7: Parameter change magnitude = [0. 0.]\nIteration 8: Parameter change magnitude = [0. 0.]\nIteration 9: Parameter change magnitude = [0. 0.]\nIteration 10: Parameter change magnitude = [0. 0.]\nIteration 11: Parameter change magnitude = [0. 0.]\nIteration 12: Parameter change magnitude = [0. 0.]\nIteration 13: Parameter change magnitude = [0. 0.]\nIteration 14: Parameter change magnitude = [0. 0.]\nIteration 15: Parameter change magnitude = [0. 0.]\nIteration 16: Parameter change magnitude = [0. 0.]\nIteration 17: Parameter change magnitude = [0. 0.]\nIteration 18: Parameter change magnitude = [0. 0.]\nIteration 19: Parameter change magnitude = [0. 0.]\nIteration 20: Parameter change magnitude = [0. 0.]\nIteration 21: Parameter change magnitude = [0. 0.]\nIteration 22: Parameter change magnitude = [0. 0.]\nIteration 23: Parameter change magnitude = [0. 0.]\nIteration 24: Parameter change magnitude = [0. 0.]\nIteration 25: Parameter change magnitude = [0. 0.]\nIteration 26: Parameter change magnitude = [0. 0.]\nIteration 27: Parameter change magnitude = [0. 0.]\nIteration 28: Parameter change magnitude = [0. 0.]\nIteration 29: Parameter change magnitude = [0. 0.]\nIteration 30: Parameter change magnitude = [0. 0.]\nIteration 31: Parameter change magnitude = [0. 0.]\nIteration 32: Parameter change magnitude = [0. 0.]\nIteration 33: Parameter change magnitude = [0. 0.]\nIteration 34: Parameter change magnitude = [0. 0.]\nIteration 35: Parameter change magnitude = [0. 0.]\nIteration 36: Parameter change magnitude = [0. 0.]\nIteration 37: Parameter change magnitude = [0. 0.]\nIteration 38: Parameter change magnitude = [0. 0.]\nIteration 39: Parameter change magnitude = [0. 0.]\nIteration 40: Parame",
                "lineage": "18301"
            }
        ],
        "184": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    spatial_var_score = np.where(spatial_var_score == 1, 1, 0)\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "18401"
            }
        ],
        "185": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    distances = distance_matrix(spatial_coords, spatial_coords)\n    neighbor_indices = np.argsort(distances, axis=1)[:, 1:11]\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXX.py",
                "accuracy": 0.8207217827341606,
                "model_info": "",
                "lineage": "18501"
            }
        ],
        "186": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    knn = NearestNeighbors(n_neighbors=10)\n    knn.fit(spatial_coords)\n    neighbor_indices = knn.kneighbors(spatial_coords, return_distance=False)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "18601"
            }
        ],
        "187": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import f1_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    knn = NearestNeighbors(n_neighbors=10)\n    knn.fit(spatial_coords)\n    neighbor_indices = knn.kneighbors(spatial_coords, return_distance=False)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    if 'true_spatial_var' in adata.var:\n        true_labels = adata.var['true_spatial_var']\n        f1 = f1_score(true_labels, spatial_var_score)\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "18701"
            }
        ],
        "188": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import pairwise_distances\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    knn = NearestNeighbors(n_neighbors=10)\n    knn.fit(spatial_coords)\n    neighbor_indices = knn.kneighbors(spatial_coords, return_distance=False)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    spatial_distance_matrix = pairwise_distances(spatial_coords)\n    G = nx.from_numpy_array(spatial_distance_matrix)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "18801"
            }
        ],
        "189": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    spatial_distance_matrix = pairwise_distances(spatial_coords)\n    knn = NearestNeighbors(n_neighbors=10, metric='precomputed')\n    knn.fit(spatial_distance_matrix)\n    neighbor_indices = knn.kneighbors(spatial_distance_matrix, return_distance=False)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "18901"
            }
        ],
        "190": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.model_selection import KFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    knn = NearestNeighbors(n_neighbors=10)\n    knn.fit(spatial_coords)\n    neighbor_indices = knn.kneighbors(spatial_coords, return_distance=False)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    kf = KFold(n_splits=5)\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in kf.split(spatial_coords):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n            mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n            std_exp_neighbor = np.std(mean_exp_neighbor)\n            scores.append(std_exp_neighbor)\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "19001"
            }
        ],
        "191": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    knn = NearestNeighbors(n_neighbors=10)\n    knn.fit(spatial_coords)\n    neighbor_indices = knn.kneighbors(spatial_coords, return_distance=False)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        if np.std(mean_exp_neighbor) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    missing_values = np.isnan(gene_expression).sum()\n    print(f\"Missing values in gene expression: {missing_values}\")\n    print(f\"Gene expression shape: {gene_expression.shape}\")\n    print(f\"Spatial coordinates shape: {spatial_coords.shape}\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Missing values in gene expression: 0\nGene expression shape: (1263, 1050)\nSpatial coordinates shape: (1263, 2)",
                "lineage": "19101"
            }
        ],
        "192": [],
        "193": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import permutation_test\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    knn = NearestNeighbors(n_neighbors=10)\n    knn.fit(spatial_coords)\n    neighbor_indices = knn.kneighbors(spatial_coords, return_distance=False)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        \n        if spatial_var_score[gene_idx] == 1:\n            perm_test_result = permutation_test((mean_exp_neighbor, std_exp_neighbor), \n                                                lambda x, y: np.std(x) - np.std(y), \n                                                n_resamples=1000)\n            spatial_var_score[gene_idx] = 1 if perm_test_result.pvalue < 0.05 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXX.py",
                "accuracy": 0.8245406426234717,
                "model_info": "",
                "lineage": "19301"
            }
        ],
        "194": [],
        "195": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    neighbor_indices = np.argsort(dist_matrix, axis=1)[:, 1:11]\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXX.py",
                "accuracy": 0.8207217827341606,
                "model_info": "",
                "lineage": "19501"
            }
        ],
        "196": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    knn = NearestNeighbors(n_neighbors=10)\n    knn.fit(spatial_coords)\n    neighbor_indices = knn.kneighbors(spatial_coords, return_distance=False)\n\n    ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n    voting_regressor = VotingRegressor(estimators=[('ridge' + str(i), ridge_models[i]) for i in range(5)])\n\n    for gene_idx in range(num_genes):\n        voting_regressor.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "19601"
            }
        ],
        "197": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "19701"
            }
        ],
        "198": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    pca = PCA(n_components=2)\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(reduced_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(reduced_coords).kneighbors(reduced_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8207217827341606,
                "model_info": "",
                "lineage": "19801"
            }
        ],
        "199": [],
        "200": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.spatial.distance import pdist, squareform\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    for gene_idx in range(num_genes):\n        distances = pdist(spatial_coords)\n        correlation_matrix = np.corrcoef(scaled_gene_expression[:, gene_idx], rowvar=False)\n        spatial_autocorrelation = squareform(correlation_matrix)\n\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "20001"
            }
        ],
        "201": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    spatial_coords_rotated = np.dot(spatial_coords, np.array([[0, -1], [1, 0]]))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords_rotated, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords_rotated).kneighbors(spatial_coords_rotated, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] += 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = (spatial_var_score > 0).astype(int)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8252625910674691,
                "model_info": "",
                "lineage": "20101"
            }
        ],
        "202": [],
        "203": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    variance_threshold = VarianceThreshold(threshold=0.1)\n    filtered_genes = variance_threshold.fit_transform(scaled_gene_expression)\n\n    spatial_var_score = np.zeros(num_genes)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(filtered_genes.shape[1]):\n        ridge.fit(spatial_coords, filtered_genes[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = filtered_genes[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "20301"
            }
        ],
        "204": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.manifold import TSNE\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tsne = TSNE(n_components=2, perplexity=30)\n    spatial_coords_embedded = tsne.fit_transform(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords_embedded, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords_embedded).kneighbors(spatial_coords_embedded, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(mean_exp_neighbor)\n        spatial_var_score[gene_idx] = 1 if std_exp_neighbor > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8239306103907079,
                "model_info": "",
                "lineage": "20401"
            }
        ],
        "205": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n    voting_regressor = VotingRegressor(estimators=[('ridge' + str(i), ridge_models[i]) for i in range(5)])\n\n    for gene_idx in range(num_genes):\n        voting_regressor.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "20501"
            }
        ],
        "206": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    spatial_autocorr = np.zeros(num_genes)\n    for gene_idx in range(num_genes):\n        spatial_autocorr[gene_idx] = np.corrcoef(scaled_gene_expression[:, gene_idx], spatial_coords[:, 0])[0, 1]\n\n    feature_selection = np.where(spatial_autocorr > 0.3, 1, 0)\n    adata.var['pred_spatial_var_score'] = spatial_var_score * feature_selection\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.7310793643958315,
                "model_info": "",
                "lineage": "20601"
            }
        ],
        "207": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n    voting_regressor = VotingRegressor(estimators=[('ridge' + str(i), model) for i, model in enumerate(ridge_models)])\n\n    for gene_idx in range(num_genes):\n        voting_regressor.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "20701"
            }
        ],
        "208": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nimport time\nimport psutil\n\ndef tuso_model(adata):\n    start_time = time.time()\n    memory_before = psutil.Process().memory_info().rss / (1024 ** 2)\n    \n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        if np.std(mean_exp_neighbor) > 0.5:\n            spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    end_time = time.time()\n    memory_after = psutil.Process().memory_info().rss / (1024 ** 2)\n    \n    print(f\"Execution Time: {end_time - start_time:.2f} seconds\")\n    print(f\"Memory Usage: {memory_after - memory_before:.2f} MB\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Execution Time: 4.96 seconds\nMemory Usage: 29.49 MB",
                "lineage": "20801"
            }
        ],
        "209": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    clustering = DBSCAN(eps=0.5, min_samples=5).fit(spatial_coords)\n    labels = clustering.labels_\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "20901"
            }
        ],
        "210": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        \n        if np.std(mean_exp_neighbor) > 0.5:\n            print(f\"Gene {gene_idx}: Spatial variability detected with std = {np.std(mean_exp_neighbor):.3f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Gene 552: Spatial variability detected with std = 0.501\nGene 602: Spatial variability detected with std = 0.515\nGene 652: Spatial variability detected with std = 0.559\nGene 706: Spatial variability detected with std = 0.518\nGene 720: Spatial variability detected with std = 0.513\nGene 752: Spatial variability detected with std = 0.521\nGene 757: Spatial variability detected with std = 0.509\nGene 758: Spatial variability detected with std = 0.503\nGene 802: Spatial variability detected with std = 0.560\nGene 806: Spatial variability detected with std = 0.524\nGene 807: Spatial variability detected with std = 0.518\nGene 808: Spatial variability detected with std = 0.567\nGene 852: Spatial variability detected with std = 0.585\nGene 854: Spatial variability detected with std = 0.507\nGene 856: Spatial variability detected with std = 0.521\nGene 857: Spatial variability detected with std = 0.513\nGene 858: Spatial variability detected with std = 0.531\nGene 859: Spatial variability detected with std = 0.512\nGene 865: Spatial variability detected with std = 0.509\nGene 870: Spatial variability detected with std = 0.544\nGene 871: Spatial variability detected with std = 0.532\nGene 874: Spatial variability detected with std = 0.522\nGene 881: Spatial variability detected with std = 0.506\nGene 886: Spatial variability detected with std = 0.506\nGene 902: Spatial variability detected with std = 0.583\nGene 904: Spatial variability detected with std = 0.501\nGene 905: Spatial variability detected with std = 0.500\nGene 907: Spatial variability detected with std = 0.576\nGene 908: Spatial variability detected with std = 0.568\nGene 914: Spatial variability detected with std = 0.554\nGene 915: Spatial variability detected with std = 0.552\nGene 917: Spatial variability detected with std = 0.502\nGene 920: Spatial variability detected with std = 0.547\nGene 921: Spatial variability detected with std = 0.545\nGene 924: Spatial variability detected with std = 0.509\nGene 930: Spatial variability detected w",
                "lineage": "21001"
            }
        ],
        "211": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import pairwise_distances\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    distance_matrix = pairwise_distances(spatial_coords)\n    affinity_matrix = np.exp(-distance_matrix / np.std(distance_matrix))\n\n    graph = nx.from_numpy_array(affinity_matrix)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = np.argsort(affinity_matrix[gene_idx])[:10]\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=0)\n        std_exp_neighbor = np.std(neighbor_exp, axis=0)\n        spatial_var_score[gene_idx] = 1 if std_exp_neighbor > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.3760301650404798,
                "model_info": "",
                "lineage": "21101"
            }
        ],
        "212": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.model_selection import KFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    kf = KFold(n_splits=5)\n\n    for gene_idx in range(num_genes):\n        cv_scores = []\n        for train_index, test_index in kf.split(spatial_coords):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords[test_index], return_distance=False)\n            neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n            mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n            std_exp_neighbor = np.std(neighbor_exp, axis=1)\n            cv_scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(cv_scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.7825759441707718,
                "model_info": "",
                "lineage": "21201"
            }
        ],
        "213": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        z_scores = zscore(mean_exp_neighbor)\n        spatial_var_score[gene_idx] = 1 if np.std(z_scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "21301"
            }
        ],
        "214": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "21401"
            }
        ],
        "215": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    spatial_distance_matrix = pairwise_distances(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = np.argsort(spatial_distance_matrix[:, gene_idx])[:10]\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=0)\n        std_exp_neighbor = np.std(neighbor_exp, axis=0)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "21501"
            }
        ],
        "216": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "21601"
            }
        ],
        "217": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nimport logging\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    logging.info(f\"Dataset Statistics: {num_genes} genes, {spatial_coords.shape[0]} cells\")\n    logging.info(f\"Spatial Coordinates Range: Min {spatial_coords.min(axis=0)}, Max {spatial_coords.max(axis=0)}\")\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_exp_neighbor = np.std(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n        if gene_idx < 10:\n            logging.info(f\"Gene {gene_idx}: Mean Neighbor Exp = {np.mean(mean_exp_neighbor):.4f}, Std Neighbor Exp = {std_exp_neighbor.mean():.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "21701"
            }
        ],
        "218": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "21801"
            }
        ],
        "219": [],
        "220": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import pearsonr\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        correlation, _ = pearsonr(scaled_gene_expression[:, gene_idx], mean_exp_neighbor)\n        spatial_var_score[gene_idx] = 1 if correlation > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "22001"
            }
        ],
        "221": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import ttest_ind\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    for cluster in np.unique(adata.obs[\"annotation\"]):\n        cluster_mask = adata.obs[\"annotation\"] == cluster\n        for gene_idx in range(num_genes):\n            t_stat, p_val = ttest_ind(scaled_gene_expression[cluster_mask, gene_idx], scaled_gene_expression[~cluster_mask, gene_idx], equal_var=False)\n            if p_val < 0.05:\n                spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.27831240249080336,
                "model_info": "",
                "lineage": "22101"
            }
        ],
        "222": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    neighbor_exp_all = np.mean(scaled_gene_expression, axis=0)\n    spatial_var_score += (neighbor_exp_all > np.percentile(neighbor_exp_all, 75)).astype(int)\n\n    spatial_var_score = np.clip(spatial_var_score, 0, 1)\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.6461405781718282,
                "model_info": "",
                "lineage": "22201"
            }
        ],
        "223": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    variance_threshold = np.mean(spatial_var_score)  # Adjusted threshold based on mean\n    spatial_var_score = (spatial_var_score > variance_threshold).astype(int)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "22301"
            }
        ],
        "224": [],
        "225": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=min(10, num_genes))\n    reduced_expression = pca.fit_transform(scaled_gene_expression)\n\n    dbscan = DBSCAN(eps=0.5, min_samples=5)\n    cluster_labels = dbscan.fit_predict(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(min(num_genes, reduced_expression.shape[1])):\n        ridge.fit(spatial_coords, reduced_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = reduced_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 and cluster_labels[gene_idx] != -1 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "22501"
            }
        ],
        "226": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import ttest_ind\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        t_stat, p_value = ttest_ind(scaled_gene_expression[:, gene_idx][adata.obs[\"annotation\"] == \"cluster1\"],\n                                     scaled_gene_expression[:, gene_idx][adata.obs[\"annotation\"] == \"cluster2\"])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 and p_value < 0.05 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "22601"
            }
        ],
        "227": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    log_transformer = FunctionTransformer(np.log1p, validate=True)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.8002267080745341,
                "model_info": "",
                "lineage": "22701"
            }
        ],
        "228": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.model_selection import cross_val_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    fold_scores = []\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        \n        fold_score = cross_val_score(ridge, spatial_coords, scaled_gene_expression[:, gene_idx], cv=5)\n        fold_scores.append(fold_score)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    mean_score = np.mean(fold_scores, axis=0)\n    std_score = np.std(fold_scores, axis=0)\n    print(f\"Mean CV Scores: {mean_score}, Std CV Scores: {std_score}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Mean CV Scores: [-0.05322157 -0.00186612 -0.00308238 -0.00775693 -0.07451434], Std CV Scores: [0.13556196 0.07654097 0.03474489 0.04064606 0.20014451]",
                "lineage": "22801"
            }
        ],
        "229": [],
        "230": [],
        "231": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "23101"
            }
        ],
        "232": [],
        "233": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Model Configuration: RidgeCV with alphas={np.logspace(-3, 3, 7)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Model Configuration: RidgeCV with alphas=[1.e-03 1.e-02 1.e-01 1.e+00 1.e+01 1.e+02 1.e+03]",
                "lineage": "23301"
            }
        ],
        "234": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    spatial_coords_rotated = np.dot(spatial_coords, np.array([[0, -1], [1, 0]]))\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords_rotated, scaled_gene_expression[:, gene_idx])\n        neighbor_exp_rotated = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor_rotated = np.mean(neighbor_exp_rotated, axis=1)\n        spatial_var_score[gene_idx] += 1 if np.std(mean_exp_neighbor_rotated) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = (spatial_var_score > 0).astype(int)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "23401"
            }
        ],
        "235": [],
        "236": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    neighbor_indices = np.argsort(dist_matrix, axis=1)[:, 1:11]\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8207217827341606,
                "model_info": "",
                "lineage": "23601"
            }
        ],
        "237": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.model_selection import KFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    kf = KFold(n_splits=5)\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in kf.split(spatial_coords):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n            mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n            scores.append(np.std(mean_exp_neighbor[test_index]))\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7825759441707718,
                "model_info": "",
                "lineage": "23701"
            }
        ],
        "238": [],
        "239": [],
        "240": [],
        "241": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    low_confidence_count = 0\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        if np.std(mean_exp_neighbor) > 0.5:\n            spatial_var_score[gene_idx] = 1\n        else:\n            spatial_var_score[gene_idx] = 0\n            low_confidence_count += 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Low-confidence predictions: {low_confidence_count / num_genes * 100:.2f}%\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Low-confidence predictions: 92.29%",
                "lineage": "24101"
            }
        ],
        "242": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    noise = np.random.normal(0, 0.1, scaled_gene_expression.shape)\n    noisy_gene_expression = scaled_gene_expression + noise\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, noisy_gene_expression[:, gene_idx])\n        neighbor_exp = noisy_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8186124965438507,
                "model_info": "",
                "lineage": "24201"
            }
        ],
        "243": [],
        "244": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    dbscan = DBSCAN(eps=0.5, min_samples=5)\n\n    cluster_labels = dbscan.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        if len(set(cluster_labels)) > 1:\n            cluster_means = []\n            for label in set(cluster_labels):\n                if label != -1:\n                    cluster_means.append(np.mean(scaled_gene_expression[cluster_labels == label, gene_idx]))\n            if len(cluster_means) > 1:\n                spatial_var_score[gene_idx] = 1 if np.std(cluster_means) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "24401"
            }
        ],
        "245": [],
        "246": [],
        "247": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import f1_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    if 'true_labels' in adata.var.columns:\n        f1 = f1_score(adata.var['true_labels'], spatial_var_score)\n        print(f\"F1 Score for spatially variable gene detection: {f1}\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "24701"
            }
        ],
        "248": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    spatial_var_score = np.where(spatial_var_score == 1, 1, 0)\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "24801"
            }
        ],
        "249": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    spatial_var_score = np.where(spatial_var_score > 0, 1, 0)\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "24901"
            }
        ],
        "250": [],
        "251": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    log_transformed_expression = np.log1p(gene_expression)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_transformed_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8002267080745341,
                "model_info": "",
                "lineage": "25101"
            }
        ],
        "252": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.utils.validation import check_is_fitted\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        check_is_fitted(ridge)\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    if np.sum(spatial_var_score) < 0.1 * num_genes:\n        print(\"Warning: Insufficient training data volume for reliable spatial variability detection.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Warning: Insufficient training data volume for reliable spatial variability detection.",
                "lineage": "25201"
            }
        ],
        "253": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n    voting_ridge = VotingRegressor(estimators=[('ridge{}'.format(i), ridge_models[i]) for i in range(5)])\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        voting_ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "25301"
            }
        ],
        "254": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n    voting_regressor = VotingRegressor(estimators=[('ridge' + str(i), model) for i, model in enumerate(ridge_models)])\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        voting_regressor.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "25401"
            }
        ],
        "255": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices[:, 1:], gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "25501"
            }
        ],
        "256": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    correlations = np.corrcoef(scaled_gene_expression, rowvar=False)\n    highly_correlated_pairs = np.argwhere(np.abs(correlations) > 0.9)\n    print(\"Highly correlated feature pairs:\", highly_correlated_pairs)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Highly correlated feature pairs: [[   0    0]\n [   1    1]\n [   2    2]\n ...\n [1047 1047]\n [1048 1048]\n [1049 1049]]",
                "lineage": "25601"
            }
        ],
        "257": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        print(f\"Gene {gene_idx}: Trainable parameters = {ridge.coef_.size}, Spatial var score = {spatial_var_score[gene_idx]}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Gene 0: Trainable parameters = 2, Spatial var score = 0.0\nGene 1: Trainable parameters = 2, Spatial var score = 0.0\nGene 2: Trainable parameters = 2, Spatial var score = 0.0\nGene 3: Trainable parameters = 2, Spatial var score = 0.0\nGene 4: Trainable parameters = 2, Spatial var score = 0.0\nGene 5: Trainable parameters = 2, Spatial var score = 0.0\nGene 6: Trainable parameters = 2, Spatial var score = 0.0\nGene 7: Trainable parameters = 2, Spatial var score = 0.0\nGene 8: Trainable parameters = 2, Spatial var score = 0.0\nGene 9: Trainable parameters = 2, Spatial var score = 0.0\nGene 10: Trainable parameters = 2, Spatial var score = 0.0\nGene 11: Trainable parameters = 2, Spatial var score = 0.0\nGene 12: Trainable parameters = 2, Spatial var score = 0.0\nGene 13: Trainable parameters = 2, Spatial var score = 0.0\nGene 14: Trainable parameters = 2, Spatial var score = 0.0\nGene 15: Trainable parameters = 2, Spatial var score = 0.0\nGene 16: Trainable parameters = 2, Spatial var score = 0.0\nGene 17: Trainable parameters = 2, Spatial var score = 0.0\nGene 18: Trainable parameters = 2, Spatial var score = 0.0\nGene 19: Trainable parameters = 2, Spatial var score = 0.0\nGene 20: Trainable parameters = 2, Spatial var score = 0.0\nGene 21: Trainable parameters = 2, Spatial var score = 0.0\nGene 22: Trainable parameters = 2, Spatial var score = 0.0\nGene 23: Trainable parameters = 2, Spatial var score = 0.0\nGene 24: Trainable parameters = 2, Spatial var score = 0.0\nGene 25: Trainable parameters = 2, Spatial var score = 0.0\nGene 26: Trainable parameters = 2, Spatial var score = 0.0\nGene 27: Trainable parameters = 2, Spatial var score = 0.0\nGene 28: Trainable parameters = 2, Spatial var score = 0.0\nGene 29: Trainable parameters = 2, Spatial var score = 0.0\nGene 30: Trainable parameters = 2, Spatial var score = 0.0\nGene 31: Trainable parameters = 2, Spatial var score = 0.0\nGene 32: Trainable parameters = 2, Spatial var score = 0.0\nGene 33: Trainable parameters = 2, Spatial var score = 0.0\nGene",
                "lineage": "25701"
            }
        ],
        "258": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.model_selection import StratifiedKFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    skf = StratifiedKFold(n_splits=5)\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = scaled_gene_expression[neighbor_indices[test_index], gene_idx]\n            mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8201309523809523,
                "model_info": "",
                "lineage": "25801"
            }
        ],
        "259": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    spatial_smoothness_penalty = np.zeros(num_genes)\n    for gene_idx in range(num_genes):\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        spatial_smoothness_penalty[gene_idx] = np.mean(np.abs(neighbor_exp - neighbor_exp.mean(axis=1, keepdims=True)))\n\n    spatial_var_score = np.where(spatial_smoothness_penalty < 0.1, spatial_var_score, 0)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "25901"
            }
        ],
        "260": [],
        "261": [],
        "262": [],
        "263": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    spatial_var_score = np.where(spatial_var_score == 1, 1, 0)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "26301"
            }
        ],
        "264": [],
        "265": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    distance_matrix = pairwise_distances(spatial_coords)\n    neighbor_indices = np.argsort(distance_matrix, axis=1)[:, 1:11]\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.82178526570722,
                "model_info": "",
                "lineage": "26501"
            }
        ],
        "266": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_neighbor = np.mean(scaled_gene_expression[neighbor_indices, gene_idx], axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    unique_annotations = np.unique(adata.obs[\"annotation\"])\n    for annotation in unique_annotations:\n        annotation_mask = adata.obs[\"annotation\"] == annotation\n        annotation_coords = spatial_coords[annotation_mask]\n        annotation_exp = scaled_gene_expression[annotation_mask]\n\n        neighbor_indices_annotation = NearestNeighbors(n_neighbors=10).fit(annotation_coords).kneighbors(annotation_coords, return_distance=False)\n\n        for gene_idx in range(num_genes):\n            ridge.fit(annotation_coords, annotation_exp[:, gene_idx])\n            mean_exp_neighbor = np.mean(annotation_exp[neighbor_indices_annotation, gene_idx], axis=1)\n            if np.std(mean_exp_neighbor) > 0.5:\n                spatial_var_score[gene_idx] = 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.5944591966424367,
                "model_info": "",
                "lineage": "26601"
            }
        ],
        "267": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=min(10, spatial_coords.shape[0], spatial_coords.shape[1]))\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(reduced_coords).kneighbors(reduced_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(reduced_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8207217827341606,
                "model_info": "",
                "lineage": "26701"
            }
        ],
        "268": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.cluster import AgglomerativeClustering\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    clustering = AgglomerativeClustering(n_clusters=5).fit(spatial_coords)\n    clustered_coords = clustering.labels_\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = np.array([np.mean(scaled_gene_expression[clustered_coords == cluster, gene_idx]) for cluster in np.unique(clustered_coords)])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_cluster) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "26801"
            }
        ],
        "269": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    log_transformer = FunctionTransformer(np.log1p, validate=True)\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(log_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8002267080745341,
                "model_info": "",
                "lineage": "26901"
            }
        ],
        "270": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    robust_scaler = RobustScaler()\n    scaled_gene_expression = robust_scaler.fit_transform(gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7178448420598733,
                "model_info": "",
                "lineage": "27001"
            }
        ],
        "271": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_ratio = np.var(mean_exp_neighbor) / np.var(scaled_gene_expression[:, gene_idx])\n        spatial_var_score[gene_idx] = 1 if spatial_var_ratio > 0.1 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.2766987781954887,
                "model_info": "",
                "lineage": "27101"
            }
        ],
        "272": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.preprocessing import RobustScaler\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    robust_scaler = RobustScaler()\n    scaled_gene_expression = robust_scaler.fit_transform(gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7178448420598733,
                "model_info": "",
                "lineage": "27201"
            }
        ],
        "273": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > np.std(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "27301"
            }
        ],
        "274": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    spatial_graph = nx.Graph()\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    for i in range(len(spatial_coords)):\n        for j in range(len(spatial_coords)):\n            if i != j:\n                spatial_graph.add_edge(i, j, weight=distances[i, j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = [list(spatial_graph.neighbors(i)) for i in range(len(spatial_coords))]\n        neighbor_exp = [scaled_gene_expression[indices, gene_idx] for indices in neighbor_indices]\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "27401"
            }
        ],
        "275": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        if len(mean_exp_neighbor) > 1:\n            anova_result = f_oneway(*neighbor_exp.T)\n            spatial_var_score[gene_idx] = 1 if anova_result.pvalue < 0.05 else 0\n        else:\n            spatial_var_score[gene_idx] = 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7218142671130953,
                "model_info": "",
                "lineage": "27501"
            }
        ],
        "276": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.spatial import distance_matrix\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    neighbor_indices = np.argsort(dist_matrix, axis=1)[:, 1:11]\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        z_scores = zscore(mean_exp_neighbor)\n        spatial_var_score[gene_idx] = 1 if np.std(z_scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "27601"
            }
        ],
        "277": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    logging.info(f\"Device: {np.__version__}, Library: {RidgeCV.__module__}\")\n\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        std_dev = np.std(mean_exp_neighbor)\n        if std_dev > 0.5:\n            spatial_var_score[gene_idx] = 1\n        else:\n            logging.warning(f\"Gene index {gene_idx} violates spatial variability assumption with std_dev: {std_dev}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "27701"
            }
        ],
        "278": [],
        "279": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    distance_matrix = pairwise_distances(spatial_coords)\n    graph = nx.from_numpy_array(distance_matrix)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = list(graph.neighbors(gene_idx))\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=0)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "27901"
            }
        ],
        "280": [],
        "281": [
            {
                "code": "import numpy as np\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = QuantileTransformer().fit_transform(gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "28101"
            }
        ],
        "282": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import pairwise_distances\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > np.std(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "28201"
            }
        ],
        "283": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if zscore(mean_exp_neighbor).std() > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "28301"
            }
        ],
        "284": [],
        "285": [],
        "286": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_variance = np.var(mean_exp_neighbor)\n        total_variance = np.var(scaled_gene_expression[:, gene_idx])\n        variance_ratio = spatial_variance / total_variance if total_variance > 0 else 0\n        spatial_var_score[gene_idx] = 1 if variance_ratio > 0.1 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.2766987781954887,
                "model_info": "",
                "lineage": "28601"
            }
        ],
        "287": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    spatial_graph = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        spatial_graph.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords - spatial_coords[i], axis=1)\n        neighbors = np.argsort(distances)[1:11]\n        for neighbor in neighbors:\n            spatial_graph.add_edge(i, neighbor, weight=distances[neighbor])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = [scaled_gene_expression[j, gene_idx] for j in spatial_graph.neighbors(i)]\n        mean_exp_neighbor = np.mean(neighbor_exp)\n        spatial_var_score[gene_idx] = 1 if np.std(neighbor_exp) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.3705275351296795,
                "model_info": "",
                "lineage": "28701"
            }
        ],
        "288": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    dbscan = DBSCAN(eps=0.5, min_samples=5).fit(spatial_coords)\n    unique_labels = set(dbscan.labels_)\n    cluster_means = {}\n\n    for label in unique_labels:\n        if label != -1:\n            indices = np.where(dbscan.labels_ == label)[0]\n            cluster_means[label] = np.mean(scaled_gene_expression[indices], axis=0)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n        mean_exp_neighbor = np.mean(scaled_gene_expression[neighbor_indices, gene_idx], axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "28801"
            }
        ],
        "289": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    z_scores = zscore(scaled_gene_expression, axis=0)\n    outlier_counts = np.sum(np.abs(z_scores) > 3, axis=0)\n    \n    print(\"Outlier counts based on z-score analysis:\", outlier_counts)\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Outlier counts based on z-score analysis: [ 0  0 88 ...  0 65  0]",
                "lineage": "28901"
            }
        ],
        "290": [],
        "291": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import confusion_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    labels = (spatial_var_score > 0.5).astype(int)\n    cm = confusion_matrix(labels, spatial_var_score)\n    print(\"Confusion Matrix:\\n\", cm)\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Confusion Matrix:\n [[969   0]\n [  0  81]]",
                "lineage": "29101"
            }
        ],
        "292": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        for j in range(i + 1, spatial_coords.shape[0]):\n            distance = np.linalg.norm(spatial_coords[i] - spatial_coords[j])\n            G.add_edge(i, j, weight=distance)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = [scaled_gene_expression[list(G.neighbors(i)), gene_idx] for i in range(spatial_coords.shape[0])]\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "29201"
            }
        ],
        "293": [],
        "294": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    if np.any(np.isnan(gene_expression)):\n        print(\"Warning: Missing values detected in gene expression data.\")\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    \n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Spatially variable genes identified: {np.sum(spatial_var_score)} out of {num_genes}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Spatially variable genes identified: 81.0 out of 1050",
                "lineage": "29401"
            }
        ],
        "295": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Spatially Variable Genes Count: {np.sum(spatial_var_score)}\")\n    print(f\"Spatially Variable Genes Proportion: {np.sum(spatial_var_score) / num_genes:.2f}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Spatially Variable Genes Count: 81.0\nSpatially Variable Genes Proportion: 0.08",
                "lineage": "29501"
            }
        ],
        "296": [],
        "297": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = RobustScaler(with_centering=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7204865940511103,
                "model_info": "",
                "lineage": "29701"
            }
        ],
        "298": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        \n        print(f\"Gene {gene_idx}: Validation Score = {ridge.score(spatial_coords, scaled_gene_expression[:, gene_idx])}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Gene 0: Validation Score = 0.002104973572713331\nGene 1: Validation Score = 0.00012159220534835313\nGene 2: Validation Score = 7.695769445259515e-05\nGene 3: Validation Score = 0.0006850679996541764\nGene 4: Validation Score = 0.0004969324370028838\nGene 5: Validation Score = 0.000660999416895458\nGene 6: Validation Score = 0.0027586902578669026\nGene 7: Validation Score = 0.00019988879504251322\nGene 8: Validation Score = 0.0020423959516708834\nGene 9: Validation Score = 0.0008720192063169652\nGene 10: Validation Score = 0.0005412507163731206\nGene 11: Validation Score = 0.0027399496175624094\nGene 12: Validation Score = 0.0025324229693536315\nGene 13: Validation Score = 0.000522775963555322\nGene 14: Validation Score = 0.002740763180325012\nGene 15: Validation Score = 0.0007228645227486119\nGene 16: Validation Score = 0.0003171133370444279\nGene 17: Validation Score = 0.0008089102034454232\nGene 18: Validation Score = 0.0006803414968564736\nGene 19: Validation Score = 0.0008763882462480277\nGene 20: Validation Score = 0.001328813066863499\nGene 21: Validation Score = 0.0007480936633594837\nGene 22: Validation Score = 0.0004890887342168249\nGene 23: Validation Score = 0.002435450028993369\nGene 24: Validation Score = 0.00068201966198711\nGene 25: Validation Score = 0.00106336892062886\nGene 26: Validation Score = 0.0032742745077345425\nGene 27: Validation Score = 0.00047738724785084674\nGene 28: Validation Score = 0.0026151151943175632\nGene 29: Validation Score = 0.00017446240645269118\nGene 30: Validation Score = 0.0019916931697260276\nGene 31: Validation Score = 0.0018149749688539663\nGene 32: Validation Score = 0.0013867387063775105\nGene 33: Validation Score = 0.00015842052323078448\nGene 34: Validation Score = 0.0013822660818054722\nGene 35: Validation Score = 0.0008456778095029538\nGene 36: Validation Score = 0.0002637730896045687\nGene 37: Validation Score = 0.0018481962458133383\nGene 38: Validation Score = 0.0008040333772633135\nGene 39: Validation Score = 0.0020324357274699167\nGene 40: Valida",
                "lineage": "29801"
            }
        ],
        "299": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        f_stat, p_value = f_oneway(mean_exp_neighbor, scaled_gene_expression[:, gene_idx])\n        spatial_var_score[gene_idx] = 1 if p_value < 0.05 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "29901"
            }
        ],
        "300": [],
        "301": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import pearsonr\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        correlation, _ = pearsonr(mean_exp_neighbor, scaled_gene_expression[:, gene_idx])\n        spatial_var_score[gene_idx] = 1 if correlation > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "30101"
            }
        ],
        "302": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    pca = PCA(n_components=2)\n    reduced_spatial_coords = pca.fit_transform(spatial_coords)\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(reduced_spatial_coords).kneighbors(reduced_spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(reduced_spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8207217827341606,
                "model_info": "",
                "lineage": "30201"
            }
        ],
        "303": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    logging.info(\"Starting the model for identifying spatially variable genes.\")\n    \n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n    \n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    logging.info(\"Model completed. Spatial variable scores computed for all genes.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "30301"
            }
        ],
        "304": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    distance_matrix = pairwise_distances(spatial_coords)\n    neighbor_indices = np.argsort(distance_matrix, axis=1)[:, 1:11]\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.82178526570722,
                "model_info": "",
                "lineage": "30401"
            }
        ],
        "305": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import KMeans\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    kmeans = KMeans(n_clusters=5)\n    cluster_labels = kmeans.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        cluster_means = [np.mean(scaled_gene_expression[cluster_labels == i, gene_idx]) for i in range(5)]\n        spatial_var_score[gene_idx] = 1 if np.std(cluster_means) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "30501"
            }
        ],
        "306": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "30601"
            }
        ],
        "307": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    neighbor_indices = np.argsort(dist_matrix, axis=1)[:, 1:11]\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8207217827341606,
                "model_info": "",
                "lineage": "30701"
            }
        ],
        "308": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        variance_ratio = np.var(mean_exp_neighbor) / (np.var(mean_exp_neighbor) + np.var(scaled_gene_expression[:, gene_idx]))\n        spatial_var_score[gene_idx] = 1 if variance_ratio > 0.1 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.40017721461118627,
                "model_info": "",
                "lineage": "30801"
            }
        ],
        "309": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > np.mean(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.46734261615690753,
                "model_info": "",
                "lineage": "30901"
            }
        ],
        "310": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    spatial_distance_matrix = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    neighbor_indices = np.argsort(spatial_distance_matrix, axis=1)[:, 1:11]\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8207217827341606,
                "model_info": "",
                "lineage": "31001"
            }
        ],
        "311": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    dbscan = DBSCAN(eps=0.5, min_samples=5)\n    cluster_labels = dbscan.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        cluster_means = []\n        for cluster in np.unique(cluster_labels):\n            if cluster != -1:\n                cluster_mask = (cluster_labels == cluster)\n                if np.any(cluster_mask):\n                    ridge.fit(spatial_coords[cluster_mask], scaled_gene_expression[cluster_mask, gene_idx])\n                    cluster_means.append(ridge.predict(spatial_coords[cluster_mask]))\n        if cluster_means:\n            mean_exp_cluster = np.concatenate(cluster_means)\n            spatial_var_score[gene_idx] = 1 if np.std(mean_exp_cluster) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "31101"
            }
        ],
        "312": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    high_variance_genes = np.where(spatial_var_score == 1)[0]\n\n    if len(high_variance_genes) > 0:\n        ridge.fit(spatial_coords, scaled_gene_expression[:, high_variance_genes])\n        for gene_idx in high_variance_genes:\n            neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n            mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n            spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "31201"
            }
        ],
        "313": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    high_variance_genes = np.where(spatial_var_score == 1)[0]\n    if len(high_variance_genes) > 0:\n        ridge.fit(spatial_coords, scaled_gene_expression[:, high_variance_genes])\n    \n    print(f\"Trainable vs Frozen Parameters Ratio: {np.sum(ridge.coef_ != 0)}/{len(ridge.coef_)}\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Trainable vs Frozen Parameters Ratio: 162/81",
                "lineage": "31301"
            }
        ],
        "314": [],
        "315": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    spatial_var_score_combined = np.zeros(num_genes)\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score_combined[gene_idx] = np.std(mean_exp_neighbor)\n\n    adata.var['pred_spatial_var_score_combined'] = (spatial_var_score_combined > 0.5).astype(int)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "31501"
            }
        ],
        "316": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        \n        if gene_idx % 100 == 0:\n            print(f\"Processing gene {gene_idx}/{num_genes}: Spatial variability score computed.\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Model completed: Spatial variability scores assigned to genes.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Processing gene 0/1050: Spatial variability score computed.\nProcessing gene 100/1050: Spatial variability score computed.\nProcessing gene 200/1050: Spatial variability score computed.\nProcessing gene 300/1050: Spatial variability score computed.\nProcessing gene 400/1050: Spatial variability score computed.\nProcessing gene 500/1050: Spatial variability score computed.\nProcessing gene 600/1050: Spatial variability score computed.\nProcessing gene 700/1050: Spatial variability score computed.\nProcessing gene 800/1050: Spatial variability score computed.\nProcessing gene 900/1050: Spatial variability score computed.\nProcessing gene 1000/1050: Spatial variability score computed.\nModel completed: Spatial variability scores assigned to genes.",
                "lineage": "31601"
            }
        ],
        "317": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    unique_annotations = np.unique(adata.obs[\"annotation\"])\n    for annotation in unique_annotations:\n        idx = adata.obs[\"annotation\"] == annotation\n        ridge.fit(spatial_coords[idx], scaled_gene_expression[idx, :])\n        for gene_idx in range(num_genes):\n            neighbor_exp = scaled_gene_expression[neighbor_indices[idx], gene_idx]\n            mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n            spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else spatial_var_score[gene_idx]\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.5909830531225879,
                "model_info": "",
                "lineage": "31701"
            }
        ],
        "318": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = quantile_transformer.fit_transform(gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "31801"
            }
        ],
        "319": [],
        "320": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        \n        if gene_idx % 100 == 0:\n            print(f\"Gene {gene_idx}, Spatial Variability Score: {spatial_var_score[gene_idx]}, Ridge Coefficients: {ridge.coef_}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Gene 0, Spatial Variability Score: 0.0, Ridge Coefficients: [ 0.00493977 -0.00019067]\nGene 100, Spatial Variability Score: 0.0, Ridge Coefficients: [ 0.00053383 -0.00050984]\nGene 200, Spatial Variability Score: 0.0, Ridge Coefficients: [-0.00338182 -0.00709066]\nGene 300, Spatial Variability Score: 0.0, Ridge Coefficients: [-0.00537431 -0.00734489]\nGene 400, Spatial Variability Score: 0.0, Ridge Coefficients: [-0.00792638 -0.00548549]\nGene 500, Spatial Variability Score: 0.0, Ridge Coefficients: [ 0.00047985 -0.01308893]\nGene 600, Spatial Variability Score: 0.0, Ridge Coefficients: [-0.01181115 -0.01005552]\nGene 700, Spatial Variability Score: 0.0, Ridge Coefficients: [-0.00999889 -0.01178038]\nGene 800, Spatial Variability Score: 0.0, Ridge Coefficients: [-0.00725104 -0.01436985]\nGene 900, Spatial Variability Score: 0.0, Ridge Coefficients: [-0.00809866 -0.01301389]\nGene 1000, Spatial Variability Score: 0.0, Ridge Coefficients: [-0.01170032 -0.01914685]",
                "lineage": "32001"
            }
        ],
        "321": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        print(f\"Gene {gene_idx}: Spatial Var Score = {spatial_var_score[gene_idx]}, Mean Neighbor Exp Std = {np.std(mean_exp_neighbor)}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "Gene 0: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3159037724070067\nGene 1: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.324190876811156\nGene 2: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.30050799577985676\nGene 3: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3261664113434981\nGene 4: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3083679874506458\nGene 5: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.30968570056850053\nGene 6: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.31822582791574205\nGene 7: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.2906456125606465\nGene 8: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.314403838739803\nGene 9: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.31910749553314144\nGene 10: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.30179453417763347\nGene 11: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.2965546341246464\nGene 12: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.32903888637896506\nGene 13: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.30593731377523875\nGene 14: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3346774314760423\nGene 15: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3129255545975676\nGene 16: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.30661119253055186\nGene 17: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3310269070857462\nGene 18: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.32240194059580934\nGene 19: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3195259332004335\nGene 20: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.2958796001616529\nGene 21: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3483280417375035\nGene 22: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.30502791945116847\nGene 23: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3179718096168348\nGene 24: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.31391268930929106\nGene 25: Spatial Var Score = 0.0, Mean Neighbor Exp Std = 0.3124438594761509",
                "lineage": "32101"
            }
        ],
        "322": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    logging.info(\"Model layers: Frozen - [], Trainable - [RidgeCV]\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8263345286371695,
                "model_info": "",
                "lineage": "32201"
            }
        ],
        "323": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.neighbors import NearestNeighbors\nfrom scipy.stats import pearsonr\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    neighbor_indices = NearestNeighbors(n_neighbors=10).fit(spatial_coords).kneighbors(spatial_coords, return_distance=False)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = scaled_gene_expression[neighbor_indices, gene_idx]\n        mean_exp_neighbor = np.mean(neighbor_exp, axis=1)\n        corr_coef, _ = pearsonr(mean_exp_neighbor, scaled_gene_expression[:, gene_idx])\n        spatial_var_score[gene_idx] = 1 if corr_coef > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8098363415258576,
                "model_info": "",
                "lineage": "32301"
            }
        ],
        "324": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    clustering = DBSCAN(eps=0.5, min_samples=5).fit(spatial_coords)\n    unique_labels = set(clustering.labels_)\n    cluster_means = np.zeros((len(unique_labels), num_genes))\n\n    for label in unique_labels:\n        if label != -1:\n            cluster_indices = np.where(clustering.labels_ == label)[0]\n            cluster_means[label] = np.mean(scaled_gene_expression[cluster_indices], axis=0)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        mean_exp_cluster = cluster_means[clustering.labels_, gene_idx]\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_cluster) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "32401"
            }
        ],
        "325": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXX.py",
                "accuracy": 0.8305246465018403,
                "model_info": "",
                "lineage": "32501"
            }
        ],
        "326": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(zscore(mean_exp_neighbor)) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "32601"
            }
        ],
        "327": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import KFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    kf = KFold(n_splits=5)\n    for gene_idx in range(num_genes):\n        predictions = []\n        for train_index, test_index in kf.split(spatial_coords):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            predictions.append(ridge.predict(spatial_coords[test_index]).flatten())\n        if predictions:\n            mean_pred = np.concatenate(predictions)\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n        mean_exp_neighbor = np.array([np.mean(exp) if len(exp) > 0 else 0 for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.8305246465018403,
                "model_info": "",
                "lineage": "32701"
            }
        ],
        "328": [],
        "329": [],
        "330": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n        \n        if np.isnan(spatial_var_score[gene_idx]) or np.isinf(spatial_var_score[gene_idx]):\n            print(f\"Warning: NaN or Inf encountered for gene index {gene_idx}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    print(f\"Mean before scaling: {np.mean(gene_expression, axis=0)}\")\n    print(f\"Std before scaling: {np.std(gene_expression, axis=0)}\")\n    print(f\"Min before scaling: {np.min(gene_expression, axis=0)}\")\n    print(f\"Max before scaling: {np.max(gene_expression, axis=0)}\")\n    print(f\"Mean after scaling: {np.mean(scaled_gene_expression, axis=0)}\")\n    print(f\"Std after scaling: {np.std(scaled_gene_expression, axis=0)}\")\n    print(f\"Min after scaling: {np.min(scaled_gene_expression, axis=0)}\")\n    print(f\"Max after scaling: {np.max(scaled_gene_expression, axis=0)}\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.8305246465018403,
                "model_info": "Mean before scaling: [2.43863816 2.53760887 0.09580364 ... 0.4631829  0.05621536 0.91132225]\nStd before scaling: [1.63177923 1.72815252 0.40131194 ... 0.79389895 0.25011274 1.04228421]\nMin before scaling: [0. 0. 0. ... 0. 0. 0.]\nMax before scaling: [10. 10.  5. ...  7.  2.  7.]\nMean after scaling: [1.69520231 1.70045558 0.27362924 ... 0.69781234 0.23292332 1.08818184]\nStd after scaling: [1. 1. 1. ... 1. 1. 1.]\nMin after scaling: [0. 0. 0. ... 0. 0. 0.]\nMax after scaling: [3.42605715 3.43216112 4.06725948 ... 2.53104615 4.64186341 2.68683865]",
                "lineage": "33001"
            }
        ],
        "331": [],
        "332": [],
        "333": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > np.mean(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.47057201862184317,
                "model_info": "",
                "lineage": "33301"
            }
        ],
        "334": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > np.std(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "33401"
            }
        ],
        "335": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = np.array([np.mean([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)]) for i in range(spatial_coords.shape[0])])\n        spatial_var_score[gene_idx] = 1 if np.std(neighbor_exp) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Processed {num_genes} genes. Spatially variable genes identified: {np.sum(spatial_var_score)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.8305246465018403,
                "model_info": "Processed 1050 genes. Spatially variable genes identified: 72.0",
                "lineage": "33501"
            }
        ],
        "336": [],
        "337": [],
        "338": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.cluster import AgglomerativeClustering\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    clustering = AgglomerativeClustering(n_clusters=None, distance_threshold=0.5)\n    cluster_labels = clustering.fit_predict(spatial_coords)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        cluster_means = []\n        for cluster in np.unique(cluster_labels):\n            cluster_indices = np.where(cluster_labels == cluster)[0]\n            cluster_means.append(np.mean(scaled_gene_expression[cluster_indices, gene_idx]))\n        spatial_var_score[gene_idx] = 1 if np.std(cluster_means) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "33801"
            }
        ],
        "339": [],
        "340": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearby_indices = np.argsort(distances)[:11]\n        for j in nearby_indices[1:]:\n            weight = np.exp(-distances[j])\n            G.add_edge(i, j, weight=weight)\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.8305246465018403,
                "model_info": "",
                "lineage": "34001"
            }
        ],
        "341": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            exp = [scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)]\n            if len(exp) > 0:\n                neighbor_exp.append(exp)\n        \n        if len(neighbor_exp) > 1:\n            f_stat, p_value = f_oneway(*neighbor_exp)\n            spatial_var_score[gene_idx] = 1 if p_value < 0.05 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.35679778980420207,
                "model_info": "",
                "lineage": "34101"
            }
        ],
        "342": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = quantile_transformer.fit_transform(gene_expression)\n\n    ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    for gene_idx in range(num_genes):\n        ridge.fit(spatial_coords, scaled_gene_expression[:, gene_idx])\n        neighbor_exp = []\n        for i in range(spatial_coords.shape[0]):\n            neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n        mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n        spatial_var_score[gene_idx] = 1 if np.std(mean_exp_neighbor) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "34201"
            }
        ],
        "343": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "34301"
            }
        ],
        "344": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.decomposition import PCA\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=2)\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    G = nx.Graph()\n    for i in range(reduced_coords.shape[0]):\n        G.add_node(i, coords=reduced_coords[i])\n    \n    for i in range(reduced_coords.shape[0]):\n        distances = np.linalg.norm(reduced_coords[i] - reduced_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(reduced_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(reduced_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.826992784992785,
                "model_info": "",
                "lineage": "34401"
            }
        ],
        "345": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > np.std(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "34501"
            }
        ],
        "346": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=dist_matrix[i][j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "34601"
            }
        ],
        "347": [],
        "348": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp if len(exp) > 0])\n            scores.append(np.std(mean_exp_neighbor) if mean_exp_neighbor.size > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "34801"
            }
        ],
        "349": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    if np.any(spatial_var_score == 1):\n        print(\"Warning: Some genes exhibit spatial variability assumptions.\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Warning: Some genes exhibit spatial variability assumptions.",
                "lineage": "34901"
            }
        ],
        "350": [],
        "351": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        ridge_models = []\n        for _ in range(5):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge_models.append(ridge)\n\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            for ridge in ridge_models:\n                ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "35101"
            }
        ],
        "352": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if gene_idx % 10 == 0: \n            print(f\"Gene {gene_idx}: Mean Score = {np.mean(scores):.4f}, Std Dev = {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Mean Score = 0.3077, Std Dev = 0.0033\nGene 10: Mean Score = 0.2980, Std Dev = 0.0121\nGene 20: Mean Score = 0.2937, Std Dev = 0.0102\nGene 30: Mean Score = 0.2933, Std Dev = 0.0112\nGene 40: Mean Score = 0.3035, Std Dev = 0.0182\nGene 50: Mean Score = 0.3241, Std Dev = 0.0068\nGene 60: Mean Score = 0.3137, Std Dev = 0.0101\nGene 70: Mean Score = 0.3093, Std Dev = 0.0108\nGene 80: Mean Score = 0.3105, Std Dev = 0.0085\nGene 90: Mean Score = 0.3164, Std Dev = 0.0258\nGene 100: Mean Score = 0.2997, Std Dev = 0.0207\nGene 110: Mean Score = 0.2983, Std Dev = 0.0113\nGene 120: Mean Score = 0.2973, Std Dev = 0.0146\nGene 130: Mean Score = 0.3292, Std Dev = 0.0076\nGene 140: Mean Score = 0.3165, Std Dev = 0.0254\nGene 150: Mean Score = 0.3215, Std Dev = 0.0154\nGene 160: Mean Score = 0.3131, Std Dev = 0.0139\nGene 170: Mean Score = 0.3326, Std Dev = 0.0219\nGene 180: Mean Score = 0.3211, Std Dev = 0.0068\nGene 190: Mean Score = 0.3050, Std Dev = 0.0264\nGene 200: Mean Score = 0.3348, Std Dev = 0.0126\nGene 210: Mean Score = 0.3134, Std Dev = 0.0061\nGene 220: Mean Score = 0.3682, Std Dev = 0.0146\nGene 230: Mean Score = 0.3127, Std Dev = 0.0143\nGene 240: Mean Score = 0.3106, Std Dev = 0.0162\nGene 250: Mean Score = 0.3139, Std Dev = 0.0112\nGene 260: Mean Score = 0.3089, Std Dev = 0.0125\nGene 270: Mean Score = 0.3236, Std Dev = 0.0130\nGene 280: Mean Score = 0.3120, Std Dev = 0.0092\nGene 290: Mean Score = 0.3223, Std Dev = 0.0216\nGene 300: Mean Score = 0.3423, Std Dev = 0.0134\nGene 310: Mean Score = 0.3264, Std Dev = 0.0120\nGene 320: Mean Score = 0.3864, Std Dev = 0.0083\nGene 330: Mean Score = 0.3447, Std Dev = 0.0084\nGene 340: Mean Score = 0.2974, Std Dev = 0.0152\nGene 350: Mean Score = 0.3114, Std Dev = 0.0200\nGene 360: Mean Score = 0.3284, Std Dev = 0.0163\nGene 370: Mean Score = 0.3297, Std Dev = 0.0133\nGene 380: Mean Score = 0.3395, Std Dev = 0.0134\nGene 390: Mean Score = 0.2889, Std Dev = 0.0124\nGene 400: Mean Score = 0.3206, Std Dev = 0.0071\nGene 410: Mean Score = 0.3443, Std Dev = 0.",
                "lineage": "35201"
            }
        ],
        "353": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        if gene_idx % 10 == 0:  # Print diagnostic information every 10 genes\n            print(f\"Gene {gene_idx}: Mean Score = {np.mean(scores):.4f}, Std Dev = {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Mean Score = 0.3077, Std Dev = 0.0033\nGene 10: Mean Score = 0.2980, Std Dev = 0.0121\nGene 20: Mean Score = 0.2937, Std Dev = 0.0102\nGene 30: Mean Score = 0.2933, Std Dev = 0.0112\nGene 40: Mean Score = 0.3035, Std Dev = 0.0182\nGene 50: Mean Score = 0.3241, Std Dev = 0.0068\nGene 60: Mean Score = 0.3137, Std Dev = 0.0101\nGene 70: Mean Score = 0.3093, Std Dev = 0.0108\nGene 80: Mean Score = 0.3105, Std Dev = 0.0085\nGene 90: Mean Score = 0.3164, Std Dev = 0.0258\nGene 100: Mean Score = 0.2997, Std Dev = 0.0207\nGene 110: Mean Score = 0.2983, Std Dev = 0.0113\nGene 120: Mean Score = 0.2973, Std Dev = 0.0146\nGene 130: Mean Score = 0.3292, Std Dev = 0.0076\nGene 140: Mean Score = 0.3165, Std Dev = 0.0254\nGene 150: Mean Score = 0.3215, Std Dev = 0.0154\nGene 160: Mean Score = 0.3131, Std Dev = 0.0139\nGene 170: Mean Score = 0.3326, Std Dev = 0.0219\nGene 180: Mean Score = 0.3211, Std Dev = 0.0068\nGene 190: Mean Score = 0.3050, Std Dev = 0.0264\nGene 200: Mean Score = 0.3348, Std Dev = 0.0126\nGene 210: Mean Score = 0.3134, Std Dev = 0.0061\nGene 220: Mean Score = 0.3682, Std Dev = 0.0146\nGene 230: Mean Score = 0.3127, Std Dev = 0.0143\nGene 240: Mean Score = 0.3106, Std Dev = 0.0162\nGene 250: Mean Score = 0.3139, Std Dev = 0.0112\nGene 260: Mean Score = 0.3089, Std Dev = 0.0125\nGene 270: Mean Score = 0.3236, Std Dev = 0.0130\nGene 280: Mean Score = 0.3120, Std Dev = 0.0092\nGene 290: Mean Score = 0.3223, Std Dev = 0.0216\nGene 300: Mean Score = 0.3423, Std Dev = 0.0134\nGene 310: Mean Score = 0.3264, Std Dev = 0.0120\nGene 320: Mean Score = 0.3864, Std Dev = 0.0083\nGene 330: Mean Score = 0.3447, Std Dev = 0.0084\nGene 340: Mean Score = 0.2974, Std Dev = 0.0152\nGene 350: Mean Score = 0.3114, Std Dev = 0.0200\nGene 360: Mean Score = 0.3284, Std Dev = 0.0163\nGene 370: Mean Score = 0.3297, Std Dev = 0.0133\nGene 380: Mean Score = 0.3395, Std Dev = 0.0134\nGene 390: Mean Score = 0.2889, Std Dev = 0.0124\nGene 400: Mean Score = 0.3206, Std Dev = 0.0071\nGene 410: Mean Score = 0.3443, Std Dev = 0.",
                "lineage": "35301"
            }
        ],
        "354": [],
        "355": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp if len(exp) > 0])\n            if len(mean_exp_neighbor) > 0:\n                scores.append(np.std(mean_exp_neighbor))\n\n        if len(scores) > 1:\n            predictions = ridge.predict(spatial_coords[train_index])\n            if len(np.unique(adata.obs[\"annotation\"])) > 1:\n                silhouette_avg = silhouette_score(scaled_gene_expression[train_index], adata.obs[\"annotation\"][train_index])\n                spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 and silhouette_avg > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "35501"
            }
        ],
        "356": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial.distance import pdist, squareform\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            spatial_distances = pdist(mean_exp_neighbor.reshape(-1, 1), metric='euclidean')\n            spatial_var_score[gene_idx] = np.std(squareform(spatial_distances))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "35601"
            }
        ],
        "357": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    print(\"Feature distributions before scaling: mean={}, std={}, min={}, max={}\".format(\n        np.mean(gene_expression, axis=0), np.std(gene_expression, axis=0), np.min(gene_expression, axis=0), np.max(gene_expression, axis=0)))\n    \n    print(\"Feature distributions after scaling: mean={}, std={}, min={}, max={}\".format(\n        np.mean(scaled_gene_expression, axis=0), np.std(scaled_gene_expression, axis=0), np.min(scaled_gene_expression, axis=0), np.max(scaled_gene_expression, axis=0)))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Feature distributions before scaling: mean=[2.43863816 2.53760887 0.09580364 ... 0.4631829  0.05621536 0.91132225], std=[1.63177923 1.72815252 0.40131194 ... 0.79389895 0.25011274 1.04228421], min=[0. 0. 0. ... 0. 0. 0.], max=[10. 10.  5. ...  7.  2.  7.]\nFeature distributions after scaling: mean=[1.69520231 1.70045558 0.27362924 ... 0.69781234 0.23292332 1.08818184], std=[1. 1. 1. ... 1. 1. 1.], min=[0. 0. 0. ... 0. 0. 0.], max=[3.42605715 3.43216112 4.06725948 ... 2.53104615 4.64186341 2.68683865]",
                "lineage": "35701"
            }
        ],
        "358": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            spatial_variance = np.std(mean_exp_neighbor)\n            scores.append(spatial_variance)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "35801"
            }
        ],
        "359": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    print(f\"Data completeness assumption: Missing value tolerance set to {np.isnan(gene_expression).sum()} missing values.\")\n    print(f\"Spatial variable score threshold: {0.5}. Total genes assessed: {num_genes}.\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Data completeness assumption: Missing value tolerance set to 0 missing values.\nSpatial variable score threshold: 0.5. Total genes assessed: 1050.",
                "lineage": "35901"
            }
        ],
        "360": [],
        "361": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        for j in nearest_indices[i]:\n            G.add_edge(i, j, weight=distances[i, j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "36101"
            }
        ],
        "362": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp if len(exp) > 0])\n            scores.append(np.std(mean_exp_neighbor) if len(mean_exp_neighbor) > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "36201"
            }
        ],
        "363": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            spatial_distance = np.array([np.linalg.norm(spatial_coords[i] - spatial_coords[j]) for j in G.neighbors(i)])\n            scores.append(np.std(mean_exp_neighbor) / (np.mean(spatial_distance) + 1e-10))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "36301"
            }
        ],
        "364": [],
        "365": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:12]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=np.exp(-distances[j]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp if len(exp) > 0])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.82646992481203,
                "model_info": "",
                "lineage": "36501"
            }
        ],
        "366": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        logging.info(f\"Gene index: {gene_idx}, Score: {spatial_var_score[gene_idx]}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "36601"
            }
        ],
        "367": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial.distance import pdist, squareform\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    distances = squareform(pdist(spatial_coords))\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    \n    for i in range(spatial_coords.shape[0]):\n        for j in nearest_indices[i]:\n            G.add_edge(i, j, weight=distances[i, j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "36701"
            }
        ],
        "368": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            spatial_variance = np.var(mean_exp_neighbor)\n            total_variance = np.var(scaled_gene_expression[train_index, gene_idx])\n            variance_ratio = spatial_variance / total_variance if total_variance > 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "36801"
            }
        ],
        "369": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            spatial_var = np.var(mean_exp_neighbor)\n            total_var = np.var(scaled_gene_expression[train_index, gene_idx])\n            variance_ratio = spatial_var / (total_var + 1e-10)\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "36901"
            }
        ],
        "370": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    performance_snapshots = []\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if gene_idx % 10 == 0:\n            performance_snapshots.append((gene_idx, np.mean(scores)))\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Performance Snapshots:\", performance_snapshots)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Performance Snapshots: [(0, 0.3076987827178844), (10, 0.29804102625208373), (20, 0.2936692710532388), (30, 0.29326599495450884), (40, 0.30351980685991753), (50, 0.32407288940552925), (60, 0.313660564430896), (70, 0.3092663130744742), (80, 0.3104505439412534), (90, 0.3163682917990721), (100, 0.29973450704378674), (110, 0.2982639258321291), (120, 0.2973166020777345), (130, 0.3292451175106382), (140, 0.3165316219796008), (150, 0.32145713230925577), (160, 0.3130862225286304), (170, 0.332594922419549), (180, 0.32105003245112246), (190, 0.3050021042897689), (200, 0.334822018758849), (210, 0.3134121648960916), (220, 0.3681676170530013), (230, 0.31269187374526625), (240, 0.3105654151816231), (250, 0.31389970248335197), (260, 0.30886519781138577), (270, 0.323644997655628), (280, 0.3120244048616689), (290, 0.32226406733377194), (300, 0.3422914819080664), (310, 0.3264105830384979), (320, 0.38638421329863776), (330, 0.34470405309265867), (340, 0.29744604066411684), (350, 0.3114295454555274), (360, 0.32841018026959695), (370, 0.32969483620921697), (380, 0.3395147144145939), (390, 0.28891763885937455), (400, 0.32064910056052853), (410, 0.34425406942204684), (420, 0.4095436710302593), (430, 0.3480212434262518), (440, 0.32194799680751685), (450, 0.3173076288396053), (460, 0.36408900803996297), (470, 0.3648154976181933), (480, 0.34741871935075475), (490, 0.33074478170151606), (500, 0.35318097135076576), (510, 0.3798448956453195), (520, 0.3592249621046556), (530, 0.37194656355990297), (540, 0.3095900105922229), (550, 0.3219067085569264), (560, 0.35837345381084906), (570, 0.40452245850967056), (580, 0.3490114820288507), (590, 0.33088195069129767), (600, 0.37692320059188533), (610, 0.3811412351108142), (620, 0.40232724577314094), (630, 0.42463848044437036), (640, 0.3342385201927004), (650, 0.379662777331186), (660, 0.402179941428804), (670, 0.42602668283637934), (680, 0.3987020706220393), (690, 0.3386258718405284), (700, 0.39932086636965697), (710, 0.40811861159576857), (720, 0.4942899",
                "lineage": "37001"
            }
        ],
        "371": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            spatial_var = np.var(mean_exp_neighbor)\n            total_var = np.var(scaled_gene_expression[train_index, gene_idx])\n            variance_ratio = spatial_var / total_var if total_var > 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.1 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.33564183060999087,
                "model_info": "",
                "lineage": "37101"
            }
        ],
        "372": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=2)\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    G = nx.Graph()\n    for i in range(reduced_coords.shape[0]):\n        G.add_node(i, coords=reduced_coords[i])\n    \n    for i in range(reduced_coords.shape[0]):\n        distances = np.linalg.norm(reduced_coords[i] - reduced_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(reduced_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(reduced_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.826992784992785,
                "model_info": "",
                "lineage": "37201"
            }
        ],
        "373": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Constraints: gene expression scaled, spatial coords used for neighbor analysis.\")\n    print(f\"Summary: Processed {num_genes} genes; spatial variability identified for {np.sum(spatial_var_score)} genes.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Constraints: gene expression scaled, spatial coords used for neighbor analysis.\nSummary: Processed 1050 genes; spatial variability identified for 70.0 genes.",
                "lineage": "37301"
            }
        ],
        "374": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:12]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=np.exp(-distances[j]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) if len(exp) > 0 else 0 for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.82646992481203,
                "model_info": "",
                "lineage": "37401"
            }
        ],
        "375": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            z_scores = zscore(mean_exp_neighbor)\n            scores.append(np.std(z_scores))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "37501"
            }
        ],
        "376": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    missing_values_count = np.sum(np.isnan(gene_expression), axis=0)\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Missing values per feature post-imputation: {missing_values_count}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Missing values per feature post-imputation: [0 0 0 ... 0 0 0]",
                "lineage": "37601"
            }
        ],
        "377": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    early_stopping_counter = 0\n    patience = 5\n    best_score = -np.inf\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        current_score = np.mean(scores)\n        if current_score > best_score:\n            best_score = current_score\n            early_stopping_counter = 0\n        else:\n            early_stopping_counter += 1\n\n        if early_stopping_counter >= patience:\n            break\n\n        spatial_var_score[gene_idx] = 1 if current_score > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Early stopping counter: {early_stopping_counter}, Best score: {best_score}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "Early stopping counter: 5, Best score: 0.31657257675803196",
                "lineage": "37701"
            }
        ],
        "378": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) if len(exp) > 0 else 0 for exp in neighbor_exp])\n            scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "37801"
            }
        ],
        "379": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    for i in range(spatial_coords.shape[0]):\n        G.add_node(i, coords=spatial_coords[i])\n    \n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        for j in nearest_indices:\n            G.add_edge(i, j, weight=distances[j])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbor_exp.append([scaled_gene_expression[j, gene_idx] for j in G.neighbors(i)])\n            mean_exp_neighbor = np.array([np.mean(exp) for exp in neighbor_exp if len(exp) > 0])\n            if len(mean_exp_neighbor) > 0:\n                scores.append(np.std(mean_exp_neighbor))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "37901"
            }
        ],
        "380": [],
        "381": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Trainable vs Frozen Parameters Ratio: {np.sum(ridge.coef_ != 0)}/{ridge.coef_.size}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Trainable vs Frozen Parameters Ratio: 2/2",
                "lineage": "38101"
            }
        ],
        "382": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Trainable vs Frozen Parameters Ratio: {np.sum(ridge.coef_ != 0)}/{ridge.coef_.size}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Trainable vs Frozen Parameters Ratio: 2/2",
                "lineage": "38201"
            }
        ],
        "383": [],
        "384": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "38401"
            }
        ],
        "385": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = RobustScaler(with_centering=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7204865940511103,
                "model_info": "",
                "lineage": "38501"
            }
        ],
        "386": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords[np.newaxis, :], axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "38601"
            }
        ],
        "387": [],
        "388": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "38801"
            }
        ],
        "389": [],
        "390": [],
        "391": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    edges = [(i, j, {'weight': distances[i, j]}) for i in range(spatial_coords.shape[0]) for j in nearest_indices[i]]\n    G.add_edges_from(edges)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_indices = list(G.neighbors(test_index[0]))\n            neighbor_exp = np.mean(scaled_gene_expression[neighbor_indices, gene_idx], axis=0)\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Partial dependence estimates for top features: {np.argsort(spatial_var_score)[-10:]}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "Partial dependence estimates for top features: [1041 1042 1043 1044 1045 1046 1047 1048 1049    0]",
                "lineage": "39101"
            }
        ],
        "392": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "39201"
            }
        ],
        "393": [],
        "394": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            neighbor_exp_z = (neighbor_exp - np.mean(neighbor_exp)) / np.std(neighbor_exp) if np.std(neighbor_exp) > 0 else np.zeros_like(neighbor_exp)\n            scores.append(np.std(neighbor_exp_z))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "39401"
            }
        ],
        "395": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = quantile_transformer.fit_transform(gene_expression)\n\n    robust_scaler = RobustScaler(with_centering=False)\n    scaled_gene_expression = robust_scaler.fit_transform(scaled_gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7204865940511103,
                "model_info": "",
                "lineage": "39501"
            }
        ],
        "396": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "39601"
            }
        ],
        "397": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if G.neighbors(i)])\n            scores.append(np.std(neighbor_exp) if neighbor_exp.size > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "39701"
            }
        ],
        "398": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            noise_reduced_exp = np.clip(neighbor_exp, a_min=0, a_max=None)\n            scores.append(np.std(noise_reduced_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "39801"
            }
        ],
        "399": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    edges = [(i, j, {'weight': distances[i, j]}) for i in range(spatial_coords.shape[0]) for j in nearest_indices[i]]\n    G.add_edges_from(edges)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        if gene_idx % 10 == 0:\n            print(f'Gene {gene_idx}: Mean Score = {np.mean(scores):.4f}, Std Dev of Neighbor Expression = {np.std(neighbor_exp):.4f}')\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Mean Score = 0.3077, Std Dev of Neighbor Expression = 0.3109\nGene 10: Mean Score = 0.2980, Std Dev of Neighbor Expression = 0.3103\nGene 20: Mean Score = 0.2937, Std Dev of Neighbor Expression = 0.3017\nGene 30: Mean Score = 0.2933, Std Dev of Neighbor Expression = 0.2971\nGene 40: Mean Score = 0.3035, Std Dev of Neighbor Expression = 0.3029\nGene 50: Mean Score = 0.3241, Std Dev of Neighbor Expression = 0.3344\nGene 60: Mean Score = 0.3137, Std Dev of Neighbor Expression = 0.3271\nGene 70: Mean Score = 0.3093, Std Dev of Neighbor Expression = 0.3259\nGene 80: Mean Score = 0.3105, Std Dev of Neighbor Expression = 0.3253\nGene 90: Mean Score = 0.3164, Std Dev of Neighbor Expression = 0.3149\nGene 100: Mean Score = 0.2997, Std Dev of Neighbor Expression = 0.2933\nGene 110: Mean Score = 0.2983, Std Dev of Neighbor Expression = 0.3041\nGene 120: Mean Score = 0.2973, Std Dev of Neighbor Expression = 0.2821\nGene 130: Mean Score = 0.3292, Std Dev of Neighbor Expression = 0.3297\nGene 140: Mean Score = 0.3165, Std Dev of Neighbor Expression = 0.3336\nGene 150: Mean Score = 0.3215, Std Dev of Neighbor Expression = 0.3141\nGene 160: Mean Score = 0.3131, Std Dev of Neighbor Expression = 0.3271\nGene 170: Mean Score = 0.3326, Std Dev of Neighbor Expression = 0.3430\nGene 180: Mean Score = 0.3211, Std Dev of Neighbor Expression = 0.3262\nGene 190: Mean Score = 0.3050, Std Dev of Neighbor Expression = 0.3175\nGene 200: Mean Score = 0.3348, Std Dev of Neighbor Expression = 0.3426\nGene 210: Mean Score = 0.3134, Std Dev of Neighbor Expression = 0.3158\nGene 220: Mean Score = 0.3682, Std Dev of Neighbor Expression = 0.3941\nGene 230: Mean Score = 0.3127, Std Dev of Neighbor Expression = 0.3306\nGene 240: Mean Score = 0.3106, Std Dev of Neighbor Expression = 0.3264\nGene 250: Mean Score = 0.3139, Std Dev of Neighbor Expression = 0.3180\nGene 260: Mean Score = 0.3089, Std Dev of Neighbor Expression = 0.2946\nGene 270: Mean Score = 0.3236, Std Dev of Neighbor Expression = 0.3028\nGene 280: Mean Score = ",
                "lineage": "39901"
            }
        ],
        "400": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            spatial_variance = np.var(scaled_gene_expression[train_index, gene_idx])\n            total_variance = np.var(scaled_gene_expression[:, gene_idx])\n            if total_variance > 0:\n                variance_ratio = spatial_variance / total_variance\n                scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "40001"
            }
        ],
        "401": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = quantile_transformer.fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "40101"
            }
        ],
        "402": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom tqdm import tqdm\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    if len(spatial_coords) < 50:\n        print(\"Warning: Insufficient training data volume for reliable model performance.\")\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in tqdm(range(num_genes), desc=\"Processing genes\"):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene {gene_idx}: Score = {np.mean(scores):.4f}, Spatial Var = {spatial_var_score[gene_idx]}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Score = 0.3077, Spatial Var = 0.0\nGene 1: Score = 0.3134, Spatial Var = 0.0\nGene 2: Score = 0.2974, Spatial Var = 0.0\nGene 3: Score = 0.3166, Spatial Var = 0.0\nGene 4: Score = 0.3027, Spatial Var = 0.0\nGene 5: Score = 0.3069, Spatial Var = 0.0\nGene 6: Score = 0.3065, Spatial Var = 0.0\nGene 7: Score = 0.2857, Spatial Var = 0.0\nGene 8: Score = 0.3077, Spatial Var = 0.0\nGene 9: Score = 0.3115, Spatial Var = 0.0\nGene 10: Score = 0.2980, Spatial Var = 0.0\nGene 11: Score = 0.2976, Spatial Var = 0.0\nGene 12: Score = 0.3150, Spatial Var = 0.0\nGene 13: Score = 0.3042, Spatial Var = 0.0\nGene 14: Score = 0.3214, Spatial Var = 0.0\nGene 15: Score = 0.2985, Spatial Var = 0.0\nGene 16: Score = 0.2991, Spatial Var = 0.0\nGene 17: Score = 0.3161, Spatial Var = 0.0\nGene 18: Score = 0.3175, Spatial Var = 0.0\nGene 19: Score = 0.3075, Spatial Var = 0.0\nGene 20: Score = 0.2937, Spatial Var = 0.0\nGene 21: Score = 0.3337, Spatial Var = 0.0\nGene 22: Score = 0.2962, Spatial Var = 0.0\nGene 23: Score = 0.3114, Spatial Var = 0.0\nGene 24: Score = 0.3075, Spatial Var = 0.0\nGene 25: Score = 0.2973, Spatial Var = 0.0\nGene 26: Score = 0.3127, Spatial Var = 0.0\nGene 27: Score = 0.3011, Spatial Var = 0.0\nGene 28: Score = 0.2885, Spatial Var = 0.0\nGene 29: Score = 0.3047, Spatial Var = 0.0\nGene 30: Score = 0.2933, Spatial Var = 0.0\nGene 31: Score = 0.3164, Spatial Var = 0.0\nGene 32: Score = 0.3081, Spatial Var = 0.0\nGene 33: Score = 0.3067, Spatial Var = 0.0\nGene 34: Score = 0.2998, Spatial Var = 0.0\nGene 35: Score = 0.3135, Spatial Var = 0.0\nGene 36: Score = 0.3065, Spatial Var = 0.0\nGene 37: Score = 0.3159, Spatial Var = 0.0\nGene 38: Score = 0.3146, Spatial Var = 0.0\nGene 39: Score = 0.2796, Spatial Var = 0.0\nGene 40: Score = 0.3035, Spatial Var = 0.0\nGene 41: Score = 0.2985, Spatial Var = 0.0\nGene 42: Score = 0.3085, Spatial Var = 0.0\nGene 43: Score = 0.2920, Spatial Var = 0.0\nGene 44: Score = 0.3026, Spatial Var = 0.0\nGene 45: Score = 0.3057, Spatial Var = 0.0\nGene 46: Score = 0.3295, Spatial",
                "lineage": "40201"
            }
        ],
        "403": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = [scaled_gene_expression[list(G.neighbors(i)), gene_idx] for i in test_index]\n            f_stat, p_value = f_oneway(*[exp for exp in neighbor_exp if exp.size > 0])\n            scores.append(p_value)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) < 0.05 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.47706270557450814,
                "model_info": "",
                "lineage": "40301"
            }
        ],
        "404": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    noise = np.random.normal(0, 0.1, gene_expression.shape)\n    noisy_gene_expression = gene_expression + noise\n    scaled_noisy_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(noisy_gene_expression))\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_noisy_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_noisy_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7454741947120979,
                "model_info": "",
                "lineage": "40401"
            }
        ],
        "405": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        if (gene_idx + 1) % 10 == 0:\n            print(f\"Epoch: {gene_idx + 1}, Loss: {np.mean(scores):.4f}, Validation Score: {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Epoch: 10, Loss: 0.3115, Validation Score: 0.0156\nEpoch: 20, Loss: 0.3075, Validation Score: 0.0131\nEpoch: 30, Loss: 0.3047, Validation Score: 0.0115\nEpoch: 40, Loss: 0.2796, Validation Score: 0.0101\nEpoch: 50, Loss: 0.3192, Validation Score: 0.0128\nEpoch: 60, Loss: 0.2953, Validation Score: 0.0052\nEpoch: 70, Loss: 0.2981, Validation Score: 0.0090\nEpoch: 80, Loss: 0.3140, Validation Score: 0.0102\nEpoch: 90, Loss: 0.3165, Validation Score: 0.0187\nEpoch: 100, Loss: 0.3144, Validation Score: 0.0114\nEpoch: 110, Loss: 0.3219, Validation Score: 0.0134\nEpoch: 120, Loss: 0.3184, Validation Score: 0.0199\nEpoch: 130, Loss: 0.3027, Validation Score: 0.0198\nEpoch: 140, Loss: 0.3259, Validation Score: 0.0175\nEpoch: 150, Loss: 0.2991, Validation Score: 0.0128\nEpoch: 160, Loss: 0.3031, Validation Score: 0.0069\nEpoch: 170, Loss: 0.2956, Validation Score: 0.0055\nEpoch: 180, Loss: 0.3161, Validation Score: 0.0139\nEpoch: 190, Loss: 0.2837, Validation Score: 0.0061\nEpoch: 200, Loss: 0.3215, Validation Score: 0.0078\nEpoch: 210, Loss: 0.3492, Validation Score: 0.0165\nEpoch: 220, Loss: 0.3010, Validation Score: 0.0124\nEpoch: 230, Loss: 0.3146, Validation Score: 0.0093\nEpoch: 240, Loss: 0.3096, Validation Score: 0.0140\nEpoch: 250, Loss: 0.3138, Validation Score: 0.0099\nEpoch: 260, Loss: 0.3318, Validation Score: 0.0061\nEpoch: 270, Loss: 0.3137, Validation Score: 0.0140\nEpoch: 280, Loss: 0.3252, Validation Score: 0.0086\nEpoch: 290, Loss: 0.3035, Validation Score: 0.0111\nEpoch: 300, Loss: 0.3141, Validation Score: 0.0130\nEpoch: 310, Loss: 0.3437, Validation Score: 0.0100\nEpoch: 320, Loss: 0.3323, Validation Score: 0.0153\nEpoch: 330, Loss: 0.3260, Validation Score: 0.0104\nEpoch: 340, Loss: 0.3298, Validation Score: 0.0165\nEpoch: 350, Loss: 0.3360, Validation Score: 0.0131\nEpoch: 360, Loss: 0.3455, Validation Score: 0.0090\nEpoch: 370, Loss: 0.3374, Validation Score: 0.0174\nEpoch: 380, Loss: 0.3586, Validation Score: 0.0140\nEpoch: 390, Loss: 0.3166, Validation Score: 0.0218\nEpoch: 400, Loss: 0.",
                "lineage": "40501"
            }
        ],
        "406": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    print(f\"Dataset Statistics: Genes: {num_genes}, Cells: {spatial_coords.shape[0]}\")\n    print(f\"Feature Distributions: {np.mean(scaled_gene_expression, axis=0)}, {np.std(scaled_gene_expression, axis=0)}\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Dataset Statistics: Genes: 1050, Cells: 1263\nFeature Distributions: [1.69520231 1.70045558 0.27362924 ... 0.69781234 0.23292332 1.08818184], [1. 1. 1. ... 1. 1. 1.]",
                "lineage": "40601"
            }
        ],
        "407": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    edges = [(i, j, {'weight': distances[i, j]}) for i in range(spatial_coords.shape[0]) for j in nearest_indices[i]]\n    G.add_edges_from(edges)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    misclassified_instances = []\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        for idx in test_index:\n            predicted_prob = ridge.predict(spatial_coords[idx].reshape(1, -1))\n            if spatial_var_score[gene_idx] == 0 and predicted_prob > 0.5:\n                misclassified_instances.append((idx, predicted_prob))\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Misclassified Instances (Index, Predicted Probability):\", misclassified_instances)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Misclassified Instances (Index, Predicted Probability): [(0, array([1.68402445])), (18, array([1.67361436])), (20, array([1.68215211])), (23, array([1.69495874])), (39, array([1.65039763])), (43, array([1.66747314])), (48, array([1.68881752])), (53, array([1.71016189])), (58, array([1.73150627])), (63, array([1.75285065])), (66, array([1.63998754])), (67, array([1.64425641])), (79, array([1.69548292])), (81, array([1.70402067])), (82, array([1.70828955])), (84, array([1.7168273])), (88, array([1.7339028])), (93, array([1.75524718])), (95, array([1.76378493])), (107, array([1.6722662])), (109, array([1.68080395])), (110, array([1.68507283])), (115, array([1.7064172])), (120, array([1.72776158])), (125, array([1.74910596])), (126, array([1.75337484])), (134, array([1.6277051])), (137, array([1.64051172])), (140, array([1.65331835])), (148, array([1.68746936])), (156, array([1.72162036])), (157, array([1.72588924])), (167, array([1.76857799])), (175, array([1.63010163])), (179, array([1.64717713])), (183, array([1.66425263])), (189, array([1.68986589])), (194, array([1.71121027])), (200, array([1.73682352])), (204, array([1.75389902])), (210, array([1.77951228])), (213, array([1.7923189])), (217, array([1.62822928])), (221, array([1.64530478])), (225, array([1.66238029])), (226, array([1.66664916])), (228, array([1.67518691])), (229, array([1.67945579])), (231, array([1.68799354])), (235, array([1.70506904])), (242, array([1.73495117])), (243, array([1.73922005])), (250, array([1.76910218])), (251, array([1.77337106])), (259, array([1.61781918])), (261, array([1.62635694])), (280, array([1.70746558])), (281, array([1.71173445])), (282, array([1.71600333])), (288, array([1.74161658])), (293, array([1.76296096])), (298, array([1.78430534])), (305, array([1.62021572])), (309, array([1.63729122])), (311, array([1.64582897])), (312, array([1.65009785])), (313, array([1.65436672])), (315, array([1.66290447])), (320, array([1.68424885])), (321, array([1.68851773])), (326, arr",
                "lineage": "40701"
            }
        ],
        "408": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        if gene_idx % 10 == 0:\n            print(f\"Processed gene {gene_idx}/{num_genes}, current mean score: {np.mean(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Processed gene 0/1050, current mean score: 0.3077\nProcessed gene 10/1050, current mean score: 0.2980\nProcessed gene 20/1050, current mean score: 0.2937\nProcessed gene 30/1050, current mean score: 0.2933\nProcessed gene 40/1050, current mean score: 0.3035\nProcessed gene 50/1050, current mean score: 0.3241\nProcessed gene 60/1050, current mean score: 0.3137\nProcessed gene 70/1050, current mean score: 0.3093\nProcessed gene 80/1050, current mean score: 0.3105\nProcessed gene 90/1050, current mean score: 0.3164\nProcessed gene 100/1050, current mean score: 0.2997\nProcessed gene 110/1050, current mean score: 0.2983\nProcessed gene 120/1050, current mean score: 0.2973\nProcessed gene 130/1050, current mean score: 0.3292\nProcessed gene 140/1050, current mean score: 0.3165\nProcessed gene 150/1050, current mean score: 0.3215\nProcessed gene 160/1050, current mean score: 0.3131\nProcessed gene 170/1050, current mean score: 0.3326\nProcessed gene 180/1050, current mean score: 0.3211\nProcessed gene 190/1050, current mean score: 0.3050\nProcessed gene 200/1050, current mean score: 0.3348\nProcessed gene 210/1050, current mean score: 0.3134\nProcessed gene 220/1050, current mean score: 0.3682\nProcessed gene 230/1050, current mean score: 0.3127\nProcessed gene 240/1050, current mean score: 0.3106\nProcessed gene 250/1050, current mean score: 0.3139\nProcessed gene 260/1050, current mean score: 0.3089\nProcessed gene 270/1050, current mean score: 0.3236\nProcessed gene 280/1050, current mean score: 0.3120\nProcessed gene 290/1050, current mean score: 0.3223\nProcessed gene 300/1050, current mean score: 0.3423\nProcessed gene 310/1050, current mean score: 0.3264\nProcessed gene 320/1050, current mean score: 0.3864\nProcessed gene 330/1050, current mean score: 0.3447\nProcessed gene 340/1050, current mean score: 0.2974\nProcessed gene 350/1050, current mean score: 0.3114\nProcessed gene 360/1050, current mean score: 0.3284\nProcessed gene 370/1050, current mean score: 0.3297\nProcessed gene 380/1050, current me",
                "lineage": "40801"
            }
        ],
        "409": [],
        "410": [],
        "411": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport tqdm\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in tqdm.tqdm(range(num_genes), desc=\"Processing genes\"):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "41101"
            }
        ],
        "412": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    G = nx.from_numpy_array(np.exp(-dist_matrix / np.mean(dist_matrix)))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if G.has_node(i)])\n            if len(neighbor_exp) > 0:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "41201"
            }
        ],
        "413": [],
        "414": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords[np.newaxis, :], axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    loss = np.mean(scores)\n    validation_score = np.std(scores)\n    print(f'Gene: {gene_idx}, Loss: {loss:.4f}, Validation Score: {validation_score:.4f}')\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene: 1049, Loss: 0.4718, Validation Score: 0.0183",
                "lineage": "41401"
            }
        ],
        "415": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if G.neighbors(i)])\n            if len(neighbor_exp) > 0:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "41501"
            }
        ],
        "416": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.corrcoef(neighbor_exp, scaled_gene_expression[test_index, gene_idx])[0, 1])\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "41601"
            }
        ],
        "417": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            spatial_var = np.var(neighbor_exp)\n            total_var = np.var(scaled_gene_expression[train_index, gene_idx])\n            variance_ratio = spatial_var / total_var if total_var > 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "41701"
            }
        ],
        "418": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:12]\n        G.add_edges_from((i, j, {'weight': np.exp(-distances[j])}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean([scaled_gene_expression[n, gene_idx] for n in G.neighbors(i) if n in train_index]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8168928571428571,
                "model_info": "",
                "lineage": "41801"
            }
        ],
        "419": [],
        "420": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "42001"
            }
        ],
        "421": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            z_scores = zscore(neighbor_exp)\n            scores.append(np.std(z_scores))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "42101"
            }
        ],
        "422": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import cKDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tree = cKDTree(spatial_coords)\n    nearest_indices = tree.query(spatial_coords, k=11)[1][:, 1:]\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': np.linalg.norm(spatial_coords[i] - spatial_coords[j])}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Trainable parameters: {sum(p.size for p in ridge.coef_)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8223100038602013,
                "model_info": "Trainable parameters: 2",
                "lineage": "42201"
            }
        ],
        "423": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    fold_scores = []\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        mean_score = np.mean(scores)\n        std_score = np.std(scores)\n        fold_scores.append((mean_score, std_score))\n        spatial_var_score[gene_idx] = 1 if mean_score > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Cross-validation fold scores (mean, std):\", fold_scores)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8245406426234717,
                "model_info": "Cross-validation fold scores (mean, std): [(0.30713183662202603, 0.0045360191567350334), (0.3156080113672206, 0.011609477848218301), (0.29651677365061446, 0.009475892174183749), (0.3172685790530515, 0.0122172987791985), (0.30168309589197195, 0.0042410129311489545), (0.30670822216272997, 0.013853621650155582), (0.3059005261708774, 0.02303012154679909), (0.28618790337017996, 0.0047456346935574175), (0.30823685179705324, 0.01448643374006779), (0.31075438063201843, 0.016681057696062547), (0.29819423252611205, 0.011172556966251237), (0.29778334548144886, 0.013684980072933681), (0.31489830026345467, 0.00659360111050373), (0.30503405846218845, 0.012290723762326797), (0.3226110578806551, 0.009448754183159163), (0.29858666861597877, 0.012571304814484797), (0.2991537652876256, 0.012953390896258804), (0.3167586655505297, 0.01917312580204092), (0.31773497463245215, 0.013930499366375299), (0.3078502106539999, 0.015102862542409444), (0.29181666916929616, 0.010254780587819859), (0.3344072947365713, 0.010038075074809924), (0.2943753347148376, 0.014867635350619036), (0.31190844474247986, 0.014185053640713206), (0.30741919293455683, 0.012092111892885829), (0.29762443346192147, 0.013480587205080502), (0.3127961224184392, 0.013498553091134341), (0.30314715387711805, 0.009839314758977015), (0.2890726765883092, 0.012544249360850834), (0.30389277264911446, 0.011308769153046204), (0.2925516337224476, 0.011200675205192811), (0.31730901592552635, 0.014436165599373132), (0.30761908132446736, 0.004686334940125084), (0.30632246881915115, 0.01570429246238881), (0.3002190379779677, 0.0053700336339070915), (0.3139234565336527, 0.013299125032354501), (0.30712761887825896, 0.011075570598025598), (0.3150046947400936, 0.015647633813284573), (0.31496810029311567, 0.006347786233823841), (0.2809426061886845, 0.009249060025406342), (0.3030915818337893, 0.018747907306092392), (0.2986373419699643, 0.006457939140235283), (0.30841984332251665, 0.010267887206956455), (0.29282522489017637, 0.01059510462177689),",
                "lineage": "42301"
            }
        ],
        "424": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    G = nx.from_numpy_array(dist_matrix < np.percentile(dist_matrix, 10))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7303214106856684,
                "model_info": "",
                "lineage": "42401"
            }
        ],
        "425": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, indices[i][j], {'weight': distances[i][j]}) for j in range(1, 10))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    low_confidence_count = 0\n    total_genes = 0\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if spatial_var_score[gene_idx] == 0:\n            low_confidence_count += 1\n        total_genes += 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Percentage of low-confidence predictions: {low_confidence_count / total_genes * 100:.2f}%\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8220823589401833,
                "model_info": "Percentage of low-confidence predictions: 91.90%",
                "lineage": "42501"
            }
        ],
        "426": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "42601"
            }
        ],
        "427": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        std_dev = np.std(scaled_gene_expression[:, gene_idx])\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > std_dev else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "42701"
            }
        ],
        "428": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import brier_score_loss\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    predicted_probabilities = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        predicted_probabilities[gene_idx] = np.mean(scores)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    ece = brier_score_loss(spatial_var_score, predicted_probabilities)\n    print(f\"Calibration Error Metric (ECE): {ece:.4f}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8220823589401833,
                "model_info": "Calibration Error Metric (ECE): 0.1531",
                "lineage": "42801"
            }
        ],
        "429": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:12]\n        weights = np.exp(-distances[nearest_indices])\n        G.add_edges_from((i, j, {'weight': weights[k]}) for k, j in enumerate(nearest_indices))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.82646992481203,
                "model_info": "",
                "lineage": "42901"
            }
        ],
        "430": [],
        "431": [],
        "432": [],
        "433": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=2)\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(reduced_coords.shape[0]))\n    for i in range(reduced_coords.shape[0]):\n        distances = np.linalg.norm(reduced_coords[i] - reduced_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(reduced_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(reduced_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826992784992785,
                "model_info": "",
                "lineage": "43301"
            }
        ],
        "434": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            spatial_variance = np.var(neighbor_exp)\n            total_variance = np.var(scaled_gene_expression[:, gene_idx])\n            variance_ratio = spatial_variance / total_variance if total_variance > 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "43401"
            }
        ],
        "435": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = ridge.predict(spatial_coords[test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "43501"
            }
        ],
        "436": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > np.std(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "43601"
            }
        ],
        "437": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    nearest_indices = np.argsort(dist_matrix, axis=1)[:, 1:11]\n    \n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp) if neighbor_exp.size > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "43701"
            }
        ],
        "438": [],
        "439": [],
        "440": [],
        "441": [],
        "442": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    print(f\"Label distribution: {np.bincount(spatial_var_score.astype(int))}\")\n    print(f\"Shapes: gene_expression {gene_expression.shape}, scaled_gene_expression {scaled_gene_expression.shape}, spatial_coords {spatial_coords.shape}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8245406426234717,
                "model_info": "Label distribution: [983  67]\nShapes: gene_expression (1263, 1050), scaled_gene_expression (1263, 1050), spatial_coords (1263, 2)",
                "lineage": "44201"
            }
        ],
        "443": [],
        "444": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = [np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if len(list(G.neighbors(i))) > 0]\n            if neighbor_exp:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "44401"
            }
        ],
        "445": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport time\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    inference_latencies = []\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            start_time = time.time()\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            inference_latencies.append(time.time() - start_time)\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Inference Latency Distribution: {np.mean(inference_latencies)}, Std: {np.std(inference_latencies)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Inference Latency Distribution: 0.0007918561299641927, Std: 5.643836690683658e-05",
                "lineage": "44501"
            }
        ],
        "446": [],
        "447": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    print(f\"Dataset statistics: {num_genes} genes, {spatial_coords.shape[0]} cells, cell types: {adata.obs['annotation'].unique()}\")\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Dataset statistics: 1050 genes, 1263 cells, cell types: ['epidermis', 'carcass', 'trachea', 'CNS', 'muscle', 'salivary gland', 'midgut', 'foregut', 'fat body', 'amnioserosa']\nCategories (10, object): ['CNS', 'amnioserosa', 'carcass', 'epidermis', ..., 'midgut', 'muscle',\n                          'salivary gland', 'trachea']",
                "lineage": "44701"
            }
        ],
        "448": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(zscore(neighbor_exp)))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "44801"
            }
        ],
        "449": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    low_confidence_count = 0\n    total_predictions = 0\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        total_predictions += 1\n        if np.mean(scores) <= 0.5:\n            low_confidence_count += 1\n\n    low_confidence_percentage = (low_confidence_count / total_predictions) * 100\n    print(f\"Low-confidence predictions percentage: {low_confidence_percentage:.2f}%\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Low-confidence predictions percentage: 93.33%",
                "lineage": "44901"
            }
        ],
        "450": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        if gene_idx % 10 == 0:  # Periodic performance snapshots\n            print(f\"Gene {gene_idx}/{num_genes}: Spatial Var Score = {spatial_var_score[gene_idx]}, Mean Score = {np.mean(scores)}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0/1050: Spatial Var Score = 0.0, Mean Score = 0.3076987827178844\nGene 10/1050: Spatial Var Score = 0.0, Mean Score = 0.29804102625208373\nGene 20/1050: Spatial Var Score = 0.0, Mean Score = 0.2936692710532388\nGene 30/1050: Spatial Var Score = 0.0, Mean Score = 0.29326599495450884\nGene 40/1050: Spatial Var Score = 0.0, Mean Score = 0.30351980685991753\nGene 50/1050: Spatial Var Score = 0.0, Mean Score = 0.32407288940552925\nGene 60/1050: Spatial Var Score = 0.0, Mean Score = 0.313660564430896\nGene 70/1050: Spatial Var Score = 0.0, Mean Score = 0.3092663130744742\nGene 80/1050: Spatial Var Score = 0.0, Mean Score = 0.3104505439412534\nGene 90/1050: Spatial Var Score = 0.0, Mean Score = 0.3163682917990721\nGene 100/1050: Spatial Var Score = 0.0, Mean Score = 0.29973450704378674\nGene 110/1050: Spatial Var Score = 0.0, Mean Score = 0.2982639258321291\nGene 120/1050: Spatial Var Score = 0.0, Mean Score = 0.2973166020777345\nGene 130/1050: Spatial Var Score = 0.0, Mean Score = 0.3292451175106382\nGene 140/1050: Spatial Var Score = 0.0, Mean Score = 0.3165316219796008\nGene 150/1050: Spatial Var Score = 0.0, Mean Score = 0.32145713230925577\nGene 160/1050: Spatial Var Score = 0.0, Mean Score = 0.3130862225286304\nGene 170/1050: Spatial Var Score = 0.0, Mean Score = 0.332594922419549\nGene 180/1050: Spatial Var Score = 0.0, Mean Score = 0.32105003245112246\nGene 190/1050: Spatial Var Score = 0.0, Mean Score = 0.3050021042897689\nGene 200/1050: Spatial Var Score = 0.0, Mean Score = 0.334822018758849\nGene 210/1050: Spatial Var Score = 0.0, Mean Score = 0.3134121648960916\nGene 220/1050: Spatial Var Score = 0.0, Mean Score = 0.3681676170530013\nGene 230/1050: Spatial Var Score = 0.0, Mean Score = 0.31269187374526625\nGene 240/1050: Spatial Var Score = 0.0, Mean Score = 0.3105654151816231\nGene 250/1050: Spatial Var Score = 0.0, Mean Score = 0.31389970248335197\nGene 260/1050: Spatial Var Score = 0.0, Mean Score = 0.30886519781138577\nGene 270/1050: Spatial Var Score = 0.0, Mean Score = 0.32364",
                "lineage": "45001"
            }
        ],
        "451": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance.squareform(distance.pdist(spatial_coords))\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.corrcoef(neighbor_exp, scaled_gene_expression[test_index, gene_idx])[0, 1])\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "45101"
            }
        ],
        "452": [],
        "453": [],
        "454": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    logging.info(f\"Spatial variable genes identified: {np.sum(spatial_var_score)} out of {num_genes}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "45401"
            }
        ],
        "455": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import AgglomerativeClustering\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = AgglomerativeClustering(n_clusters=None, distance_threshold=0.5)\n    cluster_labels = clustering.fit_predict(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            cluster_means = np.array([np.mean(scaled_gene_expression[cluster_labels == label, gene_idx]) for label in np.unique(cluster_labels)])\n            neighbor_exp = np.array([cluster_means[cluster_labels[i]] for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "45501"
            }
        ],
        "456": [],
        "457": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = quantile_transformer.fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "45701"
            }
        ],
        "458": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            std_neighbor_exp = np.std(neighbor_exp)\n            if std_neighbor_exp > 0:\n                scores.append(std_neighbor_exp)\n\n        spatial_var_score[gene_idx] = 1 if len(scores) > 0 and np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "45801"
            }
        ],
        "459": [],
        "460": [],
        "461": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    if len(adata) < 100:  # Example threshold for training data volume\n        print(\"Warning: Insufficient training data volume for reliable model performance.\")\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Final Evaluation Metrics: Spatially Variable Genes: {np.sum(spatial_var_score)}/{num_genes} ({(np.sum(spatial_var_score) / num_genes) * 100:.2f}%)\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Final Evaluation Metrics: Spatially Variable Genes: 70.0/1050 (6.67%)",
                "lineage": "46101"
            }
        ],
        "462": [],
        "463": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Hyper-parameters: alphas =\", np.logspace(-3, 3, 7))\n    print(\"Feature range constraints: gene expression scaled to [0, 1]\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8220823589401833,
                "model_info": "Hyper-parameters: alphas = [1.e-03 1.e-02 1.e-01 1.e+00 1.e+01 1.e+02 1.e+03]\nFeature range constraints: gene expression scaled to [0, 1]",
                "lineage": "46301"
            }
        ],
        "464": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import ks_2samp\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    for gene_idx in range(num_genes):\n        if len(set(scaled_gene_expression[:, gene_idx])) < 2:\n            print(f\"Gene {gene_idx}: Insufficient variability in data.\")\n        elif ks_2samp(scaled_gene_expression[:, gene_idx][adata.obs[\"annotation\"] == adata.obs[\"annotation\"].unique()[0]], \n                      scaled_gene_expression[:, gene_idx][adata.obs[\"annotation\"] == adata.obs[\"annotation\"].unique()[1]]).pvalue < 0.05:\n            print(f\"Gene {gene_idx}: Fails i.i.d. assumption.\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8245406426234717,
                "model_info": "Gene 430: Fails i.i.d. assumption.\nGene 459: Fails i.i.d. assumption.\nGene 549: Fails i.i.d. assumption.\nGene 580: Fails i.i.d. assumption.\nGene 623: Fails i.i.d. assumption.\nGene 630: Fails i.i.d. assumption.\nGene 649: Fails i.i.d. assumption.\nGene 699: Fails i.i.d. assumption.\nGene 730: Fails i.i.d. assumption.\nGene 780: Fails i.i.d. assumption.\nGene 799: Fails i.i.d. assumption.\nGene 810: Fails i.i.d. assumption.\nGene 858: Fails i.i.d. assumption.\nGene 880: Fails i.i.d. assumption.\nGene 899: Fails i.i.d. assumption.\nGene 908: Fails i.i.d. assumption.\nGene 949: Fails i.i.d. assumption.\nGene 959: Fails i.i.d. assumption.\nGene 969: Fails i.i.d. assumption.\nGene 980: Fails i.i.d. assumption.\nGene 1008: Fails i.i.d. assumption.\nGene 1030: Fails i.i.d. assumption.\nGene 1049: Fails i.i.d. assumption.",
                "lineage": "46401"
            }
        ],
        "465": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    feature_importances = []\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        feature_importances.append((gene_idx, ridge.alpha_))\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Top-k feature importances:\", sorted(feature_importances, key=lambda x: x[1], reverse=True)[:10])\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8245406426234717,
                "model_info": "Top-k feature importances: [(0, 1000.0), (1, 1000.0), (2, 1000.0), (3, 1000.0), (4, 1000.0), (5, 1000.0), (6, 1000.0), (7, 1000.0), (8, 1000.0), (9, 1000.0)]",
                "lineage": "46501"
            }
        ],
        "466": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp) if neighbor_exp.size > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "46601"
            }
        ],
        "467": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:12]\n        G.add_edges_from((i, j, {'weight': np.exp(-distances[j])}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.82646992481203,
                "model_info": "",
                "lineage": "46701"
            }
        ],
        "468": [],
        "469": [],
        "470": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if G.neighbors(i)])\n            spatial_distances = np.array([np.mean([G[i][j]['weight'] for j in G.neighbors(i)]) for i in test_index if G.neighbors(i)])\n            scores.append(np.std(neighbor_exp) / (1 + np.mean(spatial_distances)))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "47001"
            }
        ],
        "471": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Trainable parameters: {ridge.coef_.size}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Trainable parameters: 2",
                "lineage": "47101"
            }
        ],
        "472": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    if num_genes < 10:\n        print(\"Warning: Insufficient training data volume; consider adding more genes.\")\n    \n    print(f\"Dataset Statistics: Number of genes = {num_genes}, Number of cells = {spatial_coords.shape[0]}\")\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Dataset Statistics: Number of genes = 1050, Number of cells = 1263",
                "lineage": "47201"
            }
        ],
        "473": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    missing_values_count = np.sum(np.isnan(gene_expression), axis=0)\n    print(\"Missing values per feature:\", missing_values_count)\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Missing values per feature: [0 0 0 ... 0 0 0]",
                "lineage": "47301"
            }
        ],
        "474": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if len(list(G.neighbors(i))) > 0])\n            scores.append(np.std(neighbor_exp) if neighbor_exp.size > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "47401"
            }
        ],
        "475": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.corrcoef(neighbor_exp, scaled_gene_expression[test_index, gene_idx])[0, 1])\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "47501"
            }
        ],
        "476": [],
        "477": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n            if neighbor_exp:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "47701"
            }
        ],
        "478": [],
        "479": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_variance = np.var(scaled_gene_expression[:, gene_idx])\n            spatial_variance = np.var(neighbor_exp)\n            if total_variance > 0:\n                scores.append(spatial_variance / total_variance)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "47901"
            }
        ],
        "480": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        \n        if gene_idx % 10 == 0:  # Print summary every 10 genes\n            print(f\"Processed gene {gene_idx}/{num_genes}: Mean score = {np.mean(scores):.4f}, Spatial var = {spatial_var_score[gene_idx]}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Processed gene 0/1050: Mean score = 0.3077, Spatial var = 0.0\nProcessed gene 10/1050: Mean score = 0.2980, Spatial var = 0.0\nProcessed gene 20/1050: Mean score = 0.2937, Spatial var = 0.0\nProcessed gene 30/1050: Mean score = 0.2933, Spatial var = 0.0\nProcessed gene 40/1050: Mean score = 0.3035, Spatial var = 0.0\nProcessed gene 50/1050: Mean score = 0.3241, Spatial var = 0.0\nProcessed gene 60/1050: Mean score = 0.3137, Spatial var = 0.0\nProcessed gene 70/1050: Mean score = 0.3093, Spatial var = 0.0\nProcessed gene 80/1050: Mean score = 0.3105, Spatial var = 0.0\nProcessed gene 90/1050: Mean score = 0.3164, Spatial var = 0.0\nProcessed gene 100/1050: Mean score = 0.2997, Spatial var = 0.0\nProcessed gene 110/1050: Mean score = 0.2983, Spatial var = 0.0\nProcessed gene 120/1050: Mean score = 0.2973, Spatial var = 0.0\nProcessed gene 130/1050: Mean score = 0.3292, Spatial var = 0.0\nProcessed gene 140/1050: Mean score = 0.3165, Spatial var = 0.0\nProcessed gene 150/1050: Mean score = 0.3215, Spatial var = 0.0\nProcessed gene 160/1050: Mean score = 0.3131, Spatial var = 0.0\nProcessed gene 170/1050: Mean score = 0.3326, Spatial var = 0.0\nProcessed gene 180/1050: Mean score = 0.3211, Spatial var = 0.0\nProcessed gene 190/1050: Mean score = 0.3050, Spatial var = 0.0\nProcessed gene 200/1050: Mean score = 0.3348, Spatial var = 0.0\nProcessed gene 210/1050: Mean score = 0.3134, Spatial var = 0.0\nProcessed gene 220/1050: Mean score = 0.3682, Spatial var = 0.0\nProcessed gene 230/1050: Mean score = 0.3127, Spatial var = 0.0\nProcessed gene 240/1050: Mean score = 0.3106, Spatial var = 0.0\nProcessed gene 250/1050: Mean score = 0.3139, Spatial var = 0.0\nProcessed gene 260/1050: Mean score = 0.3089, Spatial var = 0.0\nProcessed gene 270/1050: Mean score = 0.3236, Spatial var = 0.0\nProcessed gene 280/1050: Mean score = 0.3120, Spatial var = 0.0\nProcessed gene 290/1050: Mean score = 0.3223, Spatial var = 0.0\nProcessed gene 300/1050: Mean score = 0.3423, Spatial var = 0.0\nProcessed gene 310/1050: Me",
                "lineage": "48001"
            }
        ],
        "481": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        \n        logging.info(f'Gene index: {gene_idx}, Mean score: {np.mean(scores)}, Std: {np.std(scores)}')\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "48101"
            }
        ],
        "482": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "48201"
            }
        ],
        "483": [],
        "484": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import DBSCAN\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = DBSCAN(eps=1.5, min_samples=5).fit(spatial_coords)\n    cluster_labels = clustering.labels_\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            cluster_means = []\n            for cluster in np.unique(cluster_labels[train_index]):\n                if cluster != -1:\n                    cluster_means.append(np.mean(scaled_gene_expression[train_index][cluster_labels[train_index] == cluster, gene_idx]))\n            neighbor_exp = np.array([np.mean(cluster_means) for i in test_index if cluster_labels[i] != -1])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "48401"
            }
        ],
        "485": [],
        "486": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.std(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > np.std(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "48601"
            }
        ],
        "487": [],
        "488": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    evaluation_metrics = []\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        evaluation_metrics.append({'gene_index': gene_idx, 'mean_score': np.mean(scores), 'std_score': np.std(scores)})\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Evaluation Metrics:\", evaluation_metrics)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Evaluation Metrics: [{'gene_index': 0, 'mean_score': 0.3076987827178844, 'std_score': 0.0033249184620461948}, {'gene_index': 1, 'mean_score': 0.3133506897429231, 'std_score': 0.0121956330264287}, {'gene_index': 2, 'mean_score': 0.2974183275280776, 'std_score': 0.008707291132307655}, {'gene_index': 3, 'mean_score': 0.31657257675803196, 'std_score': 0.011428393536573172}, {'gene_index': 4, 'mean_score': 0.3027171557893794, 'std_score': 0.0029712413427674593}, {'gene_index': 5, 'mean_score': 0.3069114096213271, 'std_score': 0.013723148824961433}, {'gene_index': 6, 'mean_score': 0.3064608397740318, 'std_score': 0.024316029922519286}, {'gene_index': 7, 'mean_score': 0.2856795244469658, 'std_score': 0.004252684267329112}, {'gene_index': 8, 'mean_score': 0.30772132368288807, 'std_score': 0.01255647631861608}, {'gene_index': 9, 'mean_score': 0.3114973073955138, 'std_score': 0.015599474489118647}, {'gene_index': 10, 'mean_score': 0.29804102625208373, 'std_score': 0.012141409807530118}, {'gene_index': 11, 'mean_score': 0.29755943385380723, 'std_score': 0.011555839332890323}, {'gene_index': 12, 'mean_score': 0.31499830151931996, 'std_score': 0.006079418550639548}, {'gene_index': 13, 'mean_score': 0.3041609315078687, 'std_score': 0.011891093395335454}, {'gene_index': 14, 'mean_score': 0.32138730328265425, 'std_score': 0.011311419936676673}, {'gene_index': 15, 'mean_score': 0.29850619757299524, 'std_score': 0.012437185641118592}, {'gene_index': 16, 'mean_score': 0.29913875360036746, 'std_score': 0.013159049951813367}, {'gene_index': 17, 'mean_score': 0.31609812235164486, 'std_score': 0.01892261605027048}, {'gene_index': 18, 'mean_score': 0.31754560312303776, 'std_score': 0.014044364041543978}, {'gene_index': 19, 'mean_score': 0.3075235435670835, 'std_score': 0.013064357212413565}, {'gene_index': 20, 'mean_score': 0.2936692710532388, 'std_score': 0.010150883366871036}, {'gene_index': 21, 'mean_score': 0.33373787145497713, 'std_score': 0.009041805940022128}, {'gene_index': 22, 'me",
                "lineage": "48801"
            }
        ],
        "489": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if len(list(G.neighbors(i))) > 0])\n            if len(neighbor_exp) > 0:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "48901"
            }
        ],
        "490": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            neighbor_exp_z = zscore(neighbor_exp)\n            scores.append(np.std(neighbor_exp_z))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "49001"
            }
        ],
        "491": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        \n        if np.mean(scores) <= 0.5:\n            print(f\"Warning: Gene index {gene_idx} shows low variability in spatial expression.\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Warning: Gene index 0 shows low variability in spatial expression.\nWarning: Gene index 1 shows low variability in spatial expression.\nWarning: Gene index 2 shows low variability in spatial expression.\nWarning: Gene index 3 shows low variability in spatial expression.\nWarning: Gene index 4 shows low variability in spatial expression.\nWarning: Gene index 5 shows low variability in spatial expression.\nWarning: Gene index 6 shows low variability in spatial expression.\nWarning: Gene index 7 shows low variability in spatial expression.\nWarning: Gene index 8 shows low variability in spatial expression.\nWarning: Gene index 9 shows low variability in spatial expression.\nWarning: Gene index 10 shows low variability in spatial expression.\nWarning: Gene index 11 shows low variability in spatial expression.\nWarning: Gene index 12 shows low variability in spatial expression.\nWarning: Gene index 13 shows low variability in spatial expression.\nWarning: Gene index 14 shows low variability in spatial expression.\nWarning: Gene index 15 shows low variability in spatial expression.\nWarning: Gene index 16 shows low variability in spatial expression.\nWarning: Gene index 17 shows low variability in spatial expression.\nWarning: Gene index 18 shows low variability in spatial expression.\nWarning: Gene index 19 shows low variability in spatial expression.\nWarning: Gene index 20 shows low variability in spatial expression.\nWarning: Gene index 21 shows low variability in spatial expression.\nWarning: Gene index 22 shows low variability in spatial expression.\nWarning: Gene index 23 shows low variability in spatial expression.\nWarning: Gene index 24 shows low variability in spatial expression.\nWarning: Gene index 25 shows low variability in spatial expression.\nWarning: Gene index 26 shows low variability in spatial expression.\nWarning: Gene index 27 shows low variability in spatial expression.\nWarning: Gene index 28 shows low variability in spatial expression.\nWarning: Gene index 29 shows low varia",
                "lineage": "49101"
            }
        ],
        "492": [],
        "493": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            if np.std(neighbor_exp) > 0:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "49301"
            }
        ],
        "494": [],
        "495": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Top-5 feature importances: {ridge.coef_[:5]}\")\n    print(f\"Number of trainable parameters: {ridge.coef_.size}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.824196673846538,
                "model_info": "Top-5 feature importances: [-0.00418881 -0.00837982]\nNumber of trainable parameters: 2",
                "lineage": "49501"
            }
        ],
        "496": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:12]\n        weights = np.exp(-distances[nearest_indices])\n        G.add_edges_from((i, j, {'weight': weights[k]}) for k, j in enumerate(nearest_indices))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean([scaled_gene_expression[n, gene_idx] for n in G.neighbors(i) if n in train_index]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8168928571428571,
                "model_info": "",
                "lineage": "49601"
            }
        ],
        "497": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    class_balance_before = np.bincount(adata.obs[\"annotation\"].cat.codes)\n    \n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"].cat.codes):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    class_balance_after = np.bincount(adata.obs[\"annotation\"].cat.codes)\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Class balance before resampling: {class_balance_before}, after resampling: {class_balance_after}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Class balance before resampling: [117  84  69 476  36  31 193  41  64 152], after resampling: [117  84  69 476  36  31 193  41  64 152]",
                "lineage": "49701"
            }
        ],
        "498": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if G.neighbors(i)])\n            if neighbor_exp.size > 0:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "49801"
            }
        ],
        "499": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    outlier_counts = np.sum(np.abs(scores) > 2)  # Z-score threshold for outliers\n    print(f\"Detected outliers: {outlier_counts}\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Detected outliers: 0",
                "lineage": "49901"
            }
        ],
        "500": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if len(list(G.neighbors(i))) > 0 else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "50001"
            }
        ],
        "501": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            local_variance = np.var(neighbor_exp)\n            total_variance = np.var(scaled_gene_expression[:, gene_idx])\n            scores.append(local_variance / total_variance if total_variance != 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "50101"
            }
        ],
        "502": [],
        "503": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    low_confidence_count = 0\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        mean_score = np.mean(scores)\n        spatial_var_score[gene_idx] = 1 if mean_score > 0.5 else 0\n        if mean_score <= 0.5:\n            low_confidence_count += 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Low-confidence predictions: {low_confidence_count}/{num_genes} ({(low_confidence_count/num_genes)*100:.2f}%)\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Low-confidence predictions: 980/1050 (93.33%)",
                "lineage": "50301"
            }
        ],
        "504": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.decomposition import PCA\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n    \n    pca = PCA(n_components=min(10, num_genes))\n    reduced_expression = pca.fit_transform(scaled_gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(min(10, num_genes)):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], reduced_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(reduced_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if G.has_node(i)])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.716502100840336,
                "model_info": "",
                "lineage": "50401"
            }
        ],
        "505": [],
        "506": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    label_distribution = {label: np.sum(adata.obs[\"annotation\"] == label) for label in np.unique(adata.obs[\"annotation\"])}\n    print(f\"Label distribution: {label_distribution}\")\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Label distribution: {'CNS': 117, 'amnioserosa': 84, 'carcass': 69, 'epidermis': 476, 'fat body': 36, 'foregut': 31, 'midgut': 193, 'muscle': 41, 'salivary gland': 64, 'trachea': 152}",
                "lineage": "50601"
            }
        ],
        "507": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene {gene_idx}: Validation Score = {np.mean(scores):.4f}, Std Dev = {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Validation Score = 0.3077, Std Dev = 0.0033\nGene 1: Validation Score = 0.3134, Std Dev = 0.0122\nGene 2: Validation Score = 0.2974, Std Dev = 0.0087\nGene 3: Validation Score = 0.3166, Std Dev = 0.0114\nGene 4: Validation Score = 0.3027, Std Dev = 0.0030\nGene 5: Validation Score = 0.3069, Std Dev = 0.0137\nGene 6: Validation Score = 0.3065, Std Dev = 0.0243\nGene 7: Validation Score = 0.2857, Std Dev = 0.0043\nGene 8: Validation Score = 0.3077, Std Dev = 0.0126\nGene 9: Validation Score = 0.3115, Std Dev = 0.0156\nGene 10: Validation Score = 0.2980, Std Dev = 0.0121\nGene 11: Validation Score = 0.2976, Std Dev = 0.0116\nGene 12: Validation Score = 0.3150, Std Dev = 0.0061\nGene 13: Validation Score = 0.3042, Std Dev = 0.0119\nGene 14: Validation Score = 0.3214, Std Dev = 0.0113\nGene 15: Validation Score = 0.2985, Std Dev = 0.0124\nGene 16: Validation Score = 0.2991, Std Dev = 0.0132\nGene 17: Validation Score = 0.3161, Std Dev = 0.0189\nGene 18: Validation Score = 0.3175, Std Dev = 0.0140\nGene 19: Validation Score = 0.3075, Std Dev = 0.0131\nGene 20: Validation Score = 0.2937, Std Dev = 0.0102\nGene 21: Validation Score = 0.3337, Std Dev = 0.0090\nGene 22: Validation Score = 0.2962, Std Dev = 0.0150\nGene 23: Validation Score = 0.3114, Std Dev = 0.0135\nGene 24: Validation Score = 0.3075, Std Dev = 0.0114\nGene 25: Validation Score = 0.2973, Std Dev = 0.0124\nGene 26: Validation Score = 0.3127, Std Dev = 0.0143\nGene 27: Validation Score = 0.3011, Std Dev = 0.0109\nGene 28: Validation Score = 0.2885, Std Dev = 0.0113\nGene 29: Validation Score = 0.3047, Std Dev = 0.0115\nGene 30: Validation Score = 0.2933, Std Dev = 0.0112\nGene 31: Validation Score = 0.3164, Std Dev = 0.0146\nGene 32: Validation Score = 0.3081, Std Dev = 0.0058\nGene 33: Validation Score = 0.3067, Std Dev = 0.0163\nGene 34: Validation Score = 0.2998, Std Dev = 0.0051\nGene 35: Validation Score = 0.3135, Std Dev = 0.0128\nGene 36: Validation Score = 0.3065, Std Dev = 0.0113\nGene 37: Validation Score = 0.3159, Std Dev = 0.0",
                "lineage": "50701"
            }
        ],
        "508": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    spatial_density = np.zeros(spatial_coords.shape[0])\n    for i in range(spatial_coords.shape[0]):\n        spatial_density[i] = len(list(G.neighbors(i)))\n\n    gene_detection_rates = np.zeros(num_genes)\n    for gene_idx in range(num_genes):\n        gene_detection_rates[gene_idx] = np.mean(scaled_gene_expression[:, gene_idx] > 0)\n\n    adata.var['gene_detection_rate'] = gene_detection_rates\n    adata.obs['spatial_density'] = spatial_density\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "50801"
            }
        ],
        "509": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import roc_auc_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    adata.uns['roc_auc'] = roc_auc_score(adata.var['pred_spatial_var_score'], spatial_var_score)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "50901"
            }
        ],
        "510": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import adjusted_rand_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "51001"
            }
        ],
        "511": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    low_confidence_count = 0\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if spatial_var_score[gene_idx] == 0:\n            low_confidence_count += 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f'Percentage of low-confidence predictions: {low_confidence_count / num_genes * 100:.2f}%')\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Percentage of low-confidence predictions: 93.33%",
                "lineage": "51101"
            }
        ],
        "512": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import pairwise_distances\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    distances = pairwise_distances(spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[nearest_indices[i], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826101443768997,
                "model_info": "",
                "lineage": "51201"
            }
        ],
        "513": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': np.exp(-distances[j])}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean([scaled_gene_expression[n, gene_idx] for n in G.neighbors(i) if n in G]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "51301"
            }
        ],
        "514": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.cluster import SpectralClustering\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = SpectralClustering(n_clusters=5, assign_labels=\"discretize\", random_state=0)\n    labels = clustering.fit_predict(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        weights = np.exp(-distances[nearest_indices])\n        G.add_edges_from((i, j, {'weight': weights[k]}) for k, j in enumerate(nearest_indices))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "51401"
            }
        ],
        "515": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = DBSCAN(eps=0.5, min_samples=5).fit(spatial_coords)\n    labels = clustering.labels_\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            cluster_means = np.array([np.mean(scaled_gene_expression[labels == label, gene_idx]) if label != -1 else 0 for label in set(labels)])\n            neighbor_exp = np.array([cluster_means[labels[i]] for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "51501"
            }
        ],
        "516": [],
        "517": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distance_matrix = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distance_matrix, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distance_matrix[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.corrcoef(neighbor_exp, scaled_gene_expression[test_index, gene_idx])[0, 1])\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "51701"
            }
        ],
        "518": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if G.degree(i) > 0])\n            if neighbor_exp.size > 0:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "51801"
            }
        ],
        "519": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            neighbor_exp_z = zscore(neighbor_exp)\n            scores.append(np.std(neighbor_exp_z))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "51901"
            }
        ],
        "520": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.decomposition import PCA\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=2)\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(reduced_coords.shape[0]))\n    for i in range(reduced_coords.shape[0]):\n        distances = np.linalg.norm(reduced_coords[i] - reduced_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(reduced_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(reduced_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826992784992785,
                "model_info": "",
                "lineage": "52001"
            }
        ],
        "521": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    if np.sum(spatial_var_score) < 10:  # Example threshold for warning\n        print(\"Warning: Insufficient spatially variable genes identified. Consider increasing training data volume.\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "52101"
            }
        ],
        "522": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    logging.info(\"Starting model with parameters: StratifiedKFold n_splits=5, RidgeCV alphas=np.logspace(-3, 3, 7)\")\n\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "52201"
            }
        ],
        "523": [],
        "524": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import SpectralClustering\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = SpectralClustering(n_clusters=10, affinity='nearest_neighbors')\n    cluster_labels = clustering.fit_predict(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[np.where(cluster_labels == cluster_label)[0], gene_idx]) \n                                      for cluster_label in np.unique(cluster_labels) if cluster_label in cluster_labels[test_index]])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7303214106856684,
                "model_info": "",
                "lineage": "52401"
            }
        ],
        "525": [],
        "526": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n                else:\n                    neighbor_exp.append(0)\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "52601"
            }
        ],
        "527": [],
        "528": [],
        "529": [],
        "530": [],
        "531": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if len(list(G.neighbors(i))) > 0 else 0 for i in test_index])\n            std_neighbor_exp = np.std(neighbor_exp[neighbor_exp > 0])\n            scores.append(std_neighbor_exp)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8112629335180499,
                "model_info": "",
                "lineage": "53101"
            }
        ],
        "532": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.corrcoef(neighbor_exp, scaled_gene_expression[test_index, gene_idx])[0, 1])\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "53201"
            }
        ],
        "533": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import f_oneway\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        anova_p_values = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(scaled_gene_expression[neighbors, gene_idx])\n            if neighbor_exp:\n                anova_result = f_oneway(*neighbor_exp)\n                anova_p_values.append(anova_result.pvalue)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(anova_p_values) < 0.05 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.47706270557450814,
                "model_info": "",
                "lineage": "53301"
            }
        ],
        "534": [],
        "535": [],
        "536": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n    \n    print(\"Gradient Clipping Statistics: Not applied in this model.\")\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8220823589401833,
                "model_info": "Gradient Clipping Statistics: Not applied in this model.",
                "lineage": "53601"
            }
        ],
        "537": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n                nearest_indices = np.argsort(distances)[1:11]\n                neighbor_exp.append(np.mean(scaled_gene_expression[nearest_indices, gene_idx]))\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8282990128858125,
                "model_info": "",
                "lineage": "53701"
            }
        ],
        "538": [],
        "539": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:12]\n        weights = np.exp(-distances[nearest_indices])\n        G.add_edges_from((i, j, {'weight': weights[k]}) for k, j in enumerate(nearest_indices))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean([scaled_gene_expression[n, gene_idx] for n in G.neighbors(i) if n in train_index]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8168928571428571,
                "model_info": "",
                "lineage": "53901"
            }
        ],
        "540": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    spatial_density = np.array([len(list(G.neighbors(i))) for i in range(spatial_coords.shape[0])])\n    gene_detection_rate = np.sum(scaled_gene_expression > 0, axis=0) / spatial_coords.shape[0]\n    \n    adata.obs['spatial_density'] = spatial_density\n    adata.var['gene_detection_rate'] = gene_detection_rate\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "54001"
            }
        ],
        "541": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            variance_ratio = np.var(neighbor_exp) / (np.var(neighbor_exp) + np.var(scaled_gene_expression[train_index, gene_idx]))\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "54101"
            }
        ],
        "542": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    low_confidence_count = 0\n    total_count = 0\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if spatial_var_score[gene_idx] == 0:\n            low_confidence_count += 1\n        total_count += 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Low-confidence predictions: {low_confidence_count / total_count * 100:.2f}%\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Low-confidence predictions: 93.05%",
                "lineage": "54201"
            }
        ],
        "543": [],
        "544": [],
        "545": [],
        "546": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n        voting_regressor = VotingRegressor(estimators=[('ridge'+str(i), ridge_models[i]) for i in range(5)])\n        \n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            voting_regressor.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "54601"
            }
        ],
        "547": [],
        "548": [],
        "549": [],
        "550": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    adata.obs[\"annotation\"] = adata.obs[\"annotation\"].astype('category')\n    label_counts = adata.obs[\"annotation\"].value_counts().values\n    print(f\"Label distribution: {label_counts / label_counts.sum()}\")\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Label distribution: [0.37688044 0.15281077 0.12034838 0.09263658 0.06650831 0.05463183\n 0.050673   0.03246239 0.02850356 0.02454473]",
                "lineage": "55001"
            }
        ],
        "551": [],
        "552": [],
        "553": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            spatial_var_score[gene_idx] = np.std(neighbor_exp)\n\n    adata.var['pred_spatial_var_score'] = (spatial_var_score > 0.5).astype(int)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826101443768997,
                "model_info": "",
                "lineage": "55301"
            }
        ],
        "554": [],
        "555": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import cKDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tree = cKDTree(spatial_coords)\n    k = 10\n    neighbors = tree.query(spatial_coords, k=k)[1]\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[neighbors[i], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8250127648926043,
                "model_info": "",
                "lineage": "55501"
            }
        ],
        "556": [],
        "557": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.preprocessing import FunctionTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = quantile_transformer.fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "55701"
            }
        ],
        "558": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': np.exp(-distances[j])}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp) if neighbor_exp.size > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "55801"
            }
        ],
        "559": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n            if neighbor_exp:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "55901"
            }
        ],
        "560": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, indices[i][j], {'weight': distances[i][j]}) for j in range(1, 11))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if gene_idx % 10 == 0: \n            print(f'Gene index: {gene_idx}, Mean score: {np.mean(scores):.4f}, Std score: {np.std(scores):.4f}')\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Gene index: 0, Mean score: 0.3074, Std score: 0.0041\nGene index: 10, Mean score: 0.2981, Std score: 0.0104\nGene index: 20, Mean score: 0.2923, Std score: 0.0099\nGene index: 30, Mean score: 0.2927, Std score: 0.0112\nGene index: 40, Mean score: 0.3019, Std score: 0.0194\nGene index: 50, Mean score: 0.3243, Std score: 0.0090\nGene index: 60, Mean score: 0.3148, Std score: 0.0102\nGene index: 70, Mean score: 0.3100, Std score: 0.0104\nGene index: 80, Mean score: 0.3123, Std score: 0.0086\nGene index: 90, Mean score: 0.3155, Std score: 0.0264\nGene index: 100, Mean score: 0.2981, Std score: 0.0206\nGene index: 110, Mean score: 0.2977, Std score: 0.0115\nGene index: 120, Mean score: 0.2962, Std score: 0.0135\nGene index: 130, Mean score: 0.3271, Std score: 0.0077\nGene index: 140, Mean score: 0.3188, Std score: 0.0242\nGene index: 150, Mean score: 0.3224, Std score: 0.0155\nGene index: 160, Mean score: 0.3127, Std score: 0.0142\nGene index: 170, Mean score: 0.3327, Std score: 0.0211\nGene index: 180, Mean score: 0.3218, Std score: 0.0067\nGene index: 190, Mean score: 0.3065, Std score: 0.0254\nGene index: 200, Mean score: 0.3348, Std score: 0.0115\nGene index: 210, Mean score: 0.3123, Std score: 0.0061\nGene index: 220, Mean score: 0.3687, Std score: 0.0144\nGene index: 230, Mean score: 0.3130, Std score: 0.0137\nGene index: 240, Mean score: 0.3115, Std score: 0.0171\nGene index: 250, Mean score: 0.3145, Std score: 0.0108\nGene index: 260, Mean score: 0.3082, Std score: 0.0130\nGene index: 270, Mean score: 0.3233, Std score: 0.0105\nGene index: 280, Mean score: 0.3118, Std score: 0.0098\nGene index: 290, Mean score: 0.3239, Std score: 0.0229\nGene index: 300, Mean score: 0.3419, Std score: 0.0126\nGene index: 310, Mean score: 0.3260, Std score: 0.0127\nGene index: 320, Mean score: 0.3882, Std score: 0.0074\nGene index: 330, Mean score: 0.3441, Std score: 0.0078\nGene index: 340, Mean score: 0.2973, Std score: 0.0163\nGene index: 350, Mean score: 0.3120, Std score: 0.0176\nGene index: 360, Mean score: 0.",
                "lineage": "56001"
            }
        ],
        "561": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = distance.cdist(spatial_coords, spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7926031368502299,
                "model_info": "",
                "lineage": "56101"
            }
        ],
        "562": [],
        "563": [],
        "564": [],
        "565": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n            for model in ridge_models:\n                model.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            voting_regressor = VotingRegressor(estimators=[(f'ridge_{i}', model) for i, model in enumerate(ridge_models)])\n            voting_regressor.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "56501"
            }
        ],
        "566": [],
        "567": [],
        "568": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            spatial_variance = np.var(neighbor_exp)\n            total_variance = np.var(scaled_gene_expression[:, gene_idx])\n            variance_ratio = spatial_variance / total_variance if total_variance > 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "56801"
            }
        ],
        "569": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    logging.info(f\"Model completed. Spatial variable genes identified: {np.sum(spatial_var_score)}\")\n    logging.info(f\"Device: {np.__version__}, Library versions: {', '.join([f'{k}: {v}' for k, v in [('numpy', np.__version__), ('scikit-learn', RidgeCV.__module__.split('.')[0]), ('networkx', nx.__version__)]])}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "56901"
            }
        ],
        "570": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            variance = np.var(neighbor_exp)\n            total_variance = np.var(scaled_gene_expression[train_index, gene_idx])\n            spatial_variance_ratio = variance / total_variance if total_variance > 0 else 0\n            scores.append(spatial_variance_ratio)\n\n        threshold = np.percentile(scores, 75)\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > threshold else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.6989535340437665,
                "model_info": "",
                "lineage": "57001"
            }
        ],
        "571": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    print(f\"Model-specific assumptions: Linearity, Homoscedasticity, No Multicollinearity\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Model-specific assumptions: Linearity, Homoscedasticity, No Multicollinearity",
                "lineage": "57101"
            }
        ],
        "572": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp) / (np.std(scaled_gene_expression[train_index, gene_idx]) + 1e-10))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > np.std(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "57201"
            }
        ],
        "573": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n            if neighbor_exp:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "57301"
            }
        ],
        "574": [],
        "575": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    logging.info(f\"Input Feature Scaling: Mean={scaled_gene_expression.mean()}, Std={scaled_gene_expression.std()}\")\n    logging.info(f\"Trainable vs Frozen Parameters Ratio: {np.sum(ridge.coef_ != 0)}/{ridge.coef_.size}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "57501"
            }
        ],
        "576": [],
        "577": [],
        "578": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    spatial_attention_scores = np.zeros(num_genes)\n    attention_weights = np.random.rand(spatial_coords.shape[0], spatial_coords.shape[0])  # Placeholder for attention mechanism\n    for gene_idx in range(num_genes):\n        attention_exp = np.dot(attention_weights, scaled_gene_expression[:, gene_idx])\n        spatial_attention_scores[gene_idx] = np.std(attention_exp)\n\n    adata.var['pred_spatial_attention_score'] = spatial_attention_scores\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "57801"
            }
        ],
        "579": [],
        "580": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = VotingRegressor(estimators=[(f'ridge_{i}', ridge_models[i]) for i in range(5)])\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "58001"
            }
        ],
        "581": [],
        "582": [],
        "583": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_variance = np.var(scaled_gene_expression[train_index, gene_idx])\n            local_variance = np.var(neighbor_exp)\n            variance_ratio = local_variance / total_variance if total_variance > 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "58301"
            }
        ],
        "584": [],
        "585": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import cKDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tree = cKDTree(spatial_coords)\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_indices = tree.query(spatial_coords[test_index], k=10)[1]\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[neighbor_indices[i], gene_idx]) for i in range(len(test_index))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8250127648926043,
                "model_info": "",
                "lineage": "58501"
            }
        ],
        "586": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:12]\n        weights = np.exp(-distances[nearest_indices])\n        G.add_edges_from((i, j, {'weight': weights[k]}) for k, j in enumerate(nearest_indices))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.82646992481203,
                "model_info": "",
                "lineage": "58601"
            }
        ],
        "587": [],
        "588": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport resource\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene {gene_idx}: Memory usage: {resource.getrusage(resource.RUSAGE_SELF).ru_maxrss} KB\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Gene 0: Memory usage: 572644 KB\nGene 1: Memory usage: 572644 KB\nGene 2: Memory usage: 572644 KB\nGene 3: Memory usage: 572644 KB\nGene 4: Memory usage: 572644 KB\nGene 5: Memory usage: 572644 KB\nGene 6: Memory usage: 572644 KB\nGene 7: Memory usage: 572644 KB\nGene 8: Memory usage: 572644 KB\nGene 9: Memory usage: 572644 KB\nGene 10: Memory usage: 572644 KB\nGene 11: Memory usage: 572644 KB\nGene 12: Memory usage: 572644 KB\nGene 13: Memory usage: 572644 KB\nGene 14: Memory usage: 572644 KB\nGene 15: Memory usage: 572644 KB\nGene 16: Memory usage: 572644 KB\nGene 17: Memory usage: 572644 KB\nGene 18: Memory usage: 572644 KB\nGene 19: Memory usage: 572644 KB\nGene 20: Memory usage: 572644 KB\nGene 21: Memory usage: 572644 KB\nGene 22: Memory usage: 572644 KB\nGene 23: Memory usage: 572644 KB\nGene 24: Memory usage: 572644 KB\nGene 25: Memory usage: 572644 KB\nGene 26: Memory usage: 572644 KB\nGene 27: Memory usage: 572644 KB\nGene 28: Memory usage: 572644 KB\nGene 29: Memory usage: 572644 KB\nGene 30: Memory usage: 572644 KB\nGene 31: Memory usage: 572644 KB\nGene 32: Memory usage: 572644 KB\nGene 33: Memory usage: 572644 KB\nGene 34: Memory usage: 572644 KB\nGene 35: Memory usage: 572644 KB\nGene 36: Memory usage: 572644 KB\nGene 37: Memory usage: 572644 KB\nGene 38: Memory usage: 572644 KB\nGene 39: Memory usage: 572644 KB\nGene 40: Memory usage: 572644 KB\nGene 41: Memory usage: 572644 KB\nGene 42: Memory usage: 572644 KB\nGene 43: Memory usage: 572644 KB\nGene 44: Memory usage: 572644 KB\nGene 45: Memory usage: 572644 KB\nGene 46: Memory usage: 572644 KB\nGene 47: Memory usage: 572644 KB\nGene 48: Memory usage: 572644 KB\nGene 49: Memory usage: 572644 KB\nGene 50: Memory usage: 572644 KB\nGene 51: Memory usage: 572644 KB\nGene 52: Memory usage: 572644 KB\nGene 53: Memory usage: 572644 KB\nGene 54: Memory usage: 572644 KB\nGene 55: Memory usage: 572644 KB\nGene 56: Memory usage: 572644 KB\nGene 57: Memory usage: 572644 KB\nGene 58: Memory usage: 572644 KB\nGene 59: Memory usage: 572644 KB\nGene 60: Memory usage: 572644 ",
                "lineage": "58801"
            }
        ],
        "589": [],
        "590": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_variance = np.var(scaled_gene_expression[train_index, gene_idx])\n            neighbor_variance = np.var(neighbor_exp)\n            variance_ratio = neighbor_variance / total_variance if total_variance != 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "59001"
            }
        ],
        "591": [],
        "592": [],
        "593": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance.cdist(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "59301"
            }
        ],
        "594": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if np.mean(scores) > 0.5:\n            print(f\"Gene {gene_idx}: Spatial variability score calculated as {spatial_var_score[gene_idx]} with mean score {np.mean(scores)}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 602: Spatial variability score calculated as 1.0 with mean score 0.5010584075190946\nGene 652: Spatial variability score calculated as 1.0 with mean score 0.5444757415842715\nGene 752: Spatial variability score calculated as 1.0 with mean score 0.505370126817668\nGene 757: Spatial variability score calculated as 1.0 with mean score 0.503791602646294\nGene 802: Spatial variability score calculated as 1.0 with mean score 0.5526916536591597\nGene 807: Spatial variability score calculated as 1.0 with mean score 0.5111692174270475\nGene 808: Spatial variability score calculated as 1.0 with mean score 0.5599940496406945\nGene 852: Spatial variability score calculated as 1.0 with mean score 0.5801393366554353\nGene 854: Spatial variability score calculated as 1.0 with mean score 0.5050011979594492\nGene 856: Spatial variability score calculated as 1.0 with mean score 0.5057518226284065\nGene 857: Spatial variability score calculated as 1.0 with mean score 0.5067152674403573\nGene 858: Spatial variability score calculated as 1.0 with mean score 0.5148691084660928\nGene 859: Spatial variability score calculated as 1.0 with mean score 0.5095172767543534\nGene 865: Spatial variability score calculated as 1.0 with mean score 0.5051917002640325\nGene 870: Spatial variability score calculated as 1.0 with mean score 0.5370235704290623\nGene 871: Spatial variability score calculated as 1.0 with mean score 0.5242982332306951\nGene 874: Spatial variability score calculated as 1.0 with mean score 0.502868044150713\nGene 902: Spatial variability score calculated as 1.0 with mean score 0.5787751433493762\nGene 905: Spatial variability score calculated as 1.0 with mean score 0.5055735389430487\nGene 907: Spatial variability score calculated as 1.0 with mean score 0.5665489389233151\nGene 908: Spatial variability score calculated as 1.0 with mean score 0.558060962276434\nGene 914: Spatial variability score calculated as 1.0 with mean score 0.5520110681290965\nGene 915: Spatial variability score calculated",
                "lineage": "59401"
            }
        ],
        "595": [],
        "596": [],
        "597": [],
        "598": [],
        "599": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = DBSCAN(eps=1.5, min_samples=5).fit(spatial_coords)\n    labels = clustering.labels_\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            cluster_means = []\n            for cluster in set(labels):\n                if cluster != -1:\n                    cluster_indices = np.where(labels == cluster)[0]\n                    cluster_means.append(np.mean(scaled_gene_expression[cluster_indices, gene_idx]))\n            neighbor_exp = np.array([cluster_means[labels[i]] if labels[i] != -1 else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "59901"
            }
        ],
        "600": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Model assumptions: Linearity assumed; Homoscedasticity checked; No multicollinearity assumed.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Model assumptions: Linearity assumed; Homoscedasticity checked; No multicollinearity assumed.",
                "lineage": "60001"
            }
        ],
        "601": [],
        "602": [],
        "603": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import classification_report\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    y_true = []\n    y_pred = []\n    \n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        y_true.extend([1] * (np.mean(scores) > 0.5) + [0] * (np.mean(scores) <= 0.5))\n        y_pred.extend([1 if spatial_var_score[gene_idx] == 1 else 0])\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(classification_report(y_true, y_pred, target_names=[\"Not Spatially Variable\", \"Spatially Variable\"]))\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "precision    recall  f1-score   support\n\nNot Spatially Variable       1.00      1.00      1.00       980\n    Spatially Variable       1.00      1.00      1.00        70\n\n              accuracy                           1.00      1050\n             macro avg       1.00      1.00      1.00      1050\n          weighted avg       1.00      1.00      1.00      1050",
                "lineage": "60301"
            }
        ],
        "604": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport time\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    inference_latencies = []\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            start_time = time.time()\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            inference_latencies.append(time.time() - start_time)\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Inference Latency Distribution:\", np.array(inference_latencies))\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Inference Latency Distribution: [0.00174069 0.0008595  0.00079846 ... 0.00072432 0.00075269 0.0007453 ]",
                "lineage": "60401"
            }
        ],
        "605": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import VotingRegressor\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n            voting_regressor = VotingRegressor(estimators=[('ridge'+str(i), ridge_models[i]) for i in range(5)])\n            voting_regressor.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "60501"
            }
        ],
        "606": [],
        "607": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    patience_counter = 0\n    early_stopping_criteria = 0.5\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        mean_score = np.mean(scores)\n        spatial_var_score[gene_idx] = 1 if mean_score > early_stopping_criteria else 0\n        if mean_score > early_stopping_criteria:\n            patience_counter = 0\n        else:\n            patience_counter += 1\n\n        print(f\"Gene {gene_idx}: Mean Score = {mean_score:.4f}, Patience Counter = {patience_counter}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Gene 0: Mean Score = 0.3146, Patience Counter = 1\nGene 1: Mean Score = 0.3250, Patience Counter = 2\nGene 2: Mean Score = 0.3053, Patience Counter = 3\nGene 3: Mean Score = 0.3256, Patience Counter = 4\nGene 4: Mean Score = 0.3093, Patience Counter = 5\nGene 5: Mean Score = 0.3127, Patience Counter = 6\nGene 6: Mean Score = 0.3170, Patience Counter = 7\nGene 7: Mean Score = 0.2911, Patience Counter = 8\nGene 8: Mean Score = 0.3158, Patience Counter = 9\nGene 9: Mean Score = 0.3185, Patience Counter = 10\nGene 10: Mean Score = 0.3039, Patience Counter = 11\nGene 11: Mean Score = 0.3042, Patience Counter = 12\nGene 12: Mean Score = 0.3273, Patience Counter = 13\nGene 13: Mean Score = 0.3086, Patience Counter = 14\nGene 14: Mean Score = 0.3320, Patience Counter = 15\nGene 15: Mean Score = 0.3082, Patience Counter = 16\nGene 16: Mean Score = 0.3061, Patience Counter = 17\nGene 17: Mean Score = 0.3289, Patience Counter = 18\nGene 18: Mean Score = 0.3245, Patience Counter = 19\nGene 19: Mean Score = 0.3143, Patience Counter = 20\nGene 20: Mean Score = 0.2982, Patience Counter = 21\nGene 21: Mean Score = 0.3434, Patience Counter = 22\nGene 22: Mean Score = 0.3000, Patience Counter = 23\nGene 23: Mean Score = 0.3170, Patience Counter = 24\nGene 24: Mean Score = 0.3154, Patience Counter = 25\nGene 25: Mean Score = 0.3082, Patience Counter = 26\nGene 26: Mean Score = 0.3214, Patience Counter = 27\nGene 27: Mean Score = 0.3117, Patience Counter = 28\nGene 28: Mean Score = 0.2972, Patience Counter = 29\nGene 29: Mean Score = 0.3092, Patience Counter = 30\nGene 30: Mean Score = 0.2988, Patience Counter = 31\nGene 31: Mean Score = 0.3247, Patience Counter = 32\nGene 32: Mean Score = 0.3152, Patience Counter = 33\nGene 33: Mean Score = 0.3117, Patience Counter = 34\nGene 34: Mean Score = 0.3064, Patience Counter = 35\nGene 35: Mean Score = 0.3211, Patience Counter = 36\nGene 36: Mean Score = 0.3125, Patience Counter = 37\nGene 37: Mean Score = 0.3250, Patience Counter = 38\nGene 38: Mean Score = 0.3226, Patience Coun",
                "lineage": "60701"
            }
        ],
        "608": [],
        "609": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[train_index, gene_idx][np.argsort(np.linalg.norm(spatial_coords[train_index] - spatial_coords[i], axis=1))[:11]]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.82646992481203,
                "model_info": "",
                "lineage": "60901"
            }
        ],
        "610": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            neighbor_exp_z = zscore(neighbor_exp)\n            scores.append(np.std(neighbor_exp_z))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "61001"
            }
        ],
        "611": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distance_matrix = pairwise_distances(spatial_coords)\n    nearest_indices = np.argsort(distance_matrix, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distance_matrix[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7883003114771407,
                "model_info": "",
                "lineage": "61101"
            }
        ],
        "612": [],
        "613": [],
        "614": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    print(f\"Initial dataset statistics: num_cells={spatial_coords.shape[0]}, num_genes={num_genes}, cell_types={adata.obs['annotation'].nunique()}\")\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i][k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Spatial variable gene identification completed: {np.sum(spatial_var_score)} spatially variable genes detected.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Initial dataset statistics: num_cells=1263, num_genes=1050, cell_types=10\nSpatial variable gene identification completed: 68.0 spatially variable genes detected.",
                "lineage": "61401"
            }
        ],
        "615": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.mean(scaled_gene_expression[test_index, gene_idx])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "61501"
            }
        ],
        "616": [],
        "617": [],
        "618": [],
        "619": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass SpatialAttention(nn.Module):\n    def __init__(self, in_features):\n        super(SpatialAttention, self).__init__()\n        self.attention_weights = nn.Parameter(torch.randn(in_features, 1))\n\n    def forward(self, x, spatial_coords):\n        attention_scores = F.softmax(torch.matmul(x, self.attention_weights), dim=0)\n        weighted_expression = x * attention_scores.t()\n        return weighted_expression\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    attention_layer = SpatialAttention(num_genes)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "61901"
            }
        ],
        "620": [],
        "621": [],
        "622": [],
        "623": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Trainable parameters: {num_genes * (spatial_coords.shape[1] + 1)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Trainable parameters: 3150",
                "lineage": "62301"
            }
        ],
        "624": [],
        "625": [],
        "626": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy import stats\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene {gene_idx}: Skewness = {stats.skew(scaled_gene_expression[:, gene_idx])}, Kurtosis = {stats.kurtosis(scaled_gene_expression[:, gene_idx])}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Skewness = -0.06934999036570083, Kurtosis = -1.0703653129781427\nGene 1: Skewness = -0.05662659459607767, Kurtosis = -1.097467840437324\nGene 2: Skewness = 3.3820539984041447, Kurtosis = 9.442699364844204\nGene 3: Skewness = -0.16667257771616964, Kurtosis = -1.080689716199208\nGene 4: Skewness = 3.954409166703637, Kurtosis = 13.639996208217799\nGene 5: Skewness = 3.6420010225690023, Kurtosis = 11.266538434673656\nGene 6: Skewness = 3.7298774139097226, Kurtosis = 11.91540592862201\nGene 7: Skewness = 1.9037211672553531, Kurtosis = 1.6384604398426257\nGene 8: Skewness = 2.22799074080491, Kurtosis = 2.9735803616747187\nGene 9: Skewness = -0.19405130246279037, Kurtosis = -1.1588443421511172\nGene 10: Skewness = -0.12861983978551206, Kurtosis = -1.0457598101139647\nGene 11: Skewness = 3.586174626544283, Kurtosis = 10.862824569388943\nGene 12: Skewness = 4.670194037308653, Kurtosis = 19.812168780971195\nGene 13: Skewness = 2.384051648066405, Kurtosis = 3.6915275753365693\nGene 14: Skewness = 3.3109623677648297, Kurtosis = 8.964779517164587\nGene 15: Skewness = 2.155508416882794, Kurtosis = 2.6550457489398793\nGene 16: Skewness = 4.296607162517031, Kurtosis = 16.46272862816881\nGene 17: Skewness = 2.659118211442606, Kurtosis = 5.077086523599702\nGene 18: Skewness = 3.7000080360709946, Kurtosis = 11.693015263235598\nGene 19: Skewness = 3.2663134712939197, Kurtosis = 8.672307864790668\nGene 20: Skewness = 2.913170951505537, Kurtosis = 6.491524396414167\nGene 21: Skewness = 0.9740866400582106, Kurtosis = -1.0090145401148318\nGene 22: Skewness = 4.776998874773632, Kurtosis = 20.821137663995653\nGene 23: Skewness = -0.1880395647057279, Kurtosis = -1.2757509618866734\nGene 24: Skewness = 1.892784724473743, Kurtosis = 1.5920016847856084\nGene 25: Skewness = 4.296230705394901, Kurtosis = 16.458284950864957\nGene 26: Skewness = 0.1078233724799501, Kurtosis = -1.7244767054447967\nGene 27: Skewness = 3.88652252481007, Kurtosis = 13.106420258543974\nGene 28: Skewness = -0.16623130628710744, Kurtosis = -1",
                "lineage": "62601"
            }
        ],
        "627": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom scipy.spatial import cKDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tree = cKDTree(spatial_coords)\n    \n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[tree.query(spatial_coords[i], k=11)[1], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.822048928968948,
                "model_info": "",
                "lineage": "62701"
            }
        ],
        "628": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_variance = np.var(scaled_gene_expression[train_index, gene_idx])\n            if total_variance > 0:\n                variance_ratio = np.var(neighbor_exp) / total_variance\n                scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "62801"
            }
        ],
        "629": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))  # Placeholder for Moran's I calculation\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5616789059886249,
                "model_info": "",
                "lineage": "62901"
            }
        ],
        "630": [],
        "631": [],
        "632": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.preprocessing import RobustScaler\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = RobustScaler(with_centering=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7204865940511103,
                "model_info": "",
                "lineage": "63201"
            }
        ],
        "633": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    logging.info(\"Starting spatial variable gene identification.\")\n    \n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        logging.info(f\"Gene {gene_idx}: Spatial Variability Score = {spatial_var_score[gene_idx]}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "63301"
            }
        ],
        "634": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.std(scores) > np.std(scaled_gene_expression[:, gene_idx]) else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "63401"
            }
        ],
        "635": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.std(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "63501"
            }
        ],
        "636": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import KernelDensity\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            kde = KernelDensity(kernel='gaussian', bandwidth=1.0).fit(spatial_coords[train_index])\n            log_density = kde.score_samples(spatial_coords[test_index])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[train_index, gene_idx][np.argsort(log_density)[-10:]]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "63601"
            }
        ],
        "637": [],
        "638": [],
        "639": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if len(list(G.neighbors(i))) > 0 else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "63901"
            }
        ],
        "640": [],
        "641": [],
        "642": [],
        "643": [],
        "644": [],
        "645": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene {gene_idx}: Mean Score = {np.mean(scores):.4f}, Std Dev = {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Gene 0: Mean Score = 0.3074, Std Dev = 0.0041\nGene 1: Mean Score = 0.3155, Std Dev = 0.0113\nGene 2: Mean Score = 0.2967, Std Dev = 0.0088\nGene 3: Mean Score = 0.3175, Std Dev = 0.0119\nGene 4: Mean Score = 0.3031, Std Dev = 0.0040\nGene 5: Mean Score = 0.3066, Std Dev = 0.0140\nGene 6: Mean Score = 0.3064, Std Dev = 0.0233\nGene 7: Mean Score = 0.2860, Std Dev = 0.0045\nGene 8: Mean Score = 0.3088, Std Dev = 0.0140\nGene 9: Mean Score = 0.3115, Std Dev = 0.0162\nGene 10: Mean Score = 0.2981, Std Dev = 0.0104\nGene 11: Mean Score = 0.2982, Std Dev = 0.0140\nGene 12: Mean Score = 0.3151, Std Dev = 0.0062\nGene 13: Mean Score = 0.3050, Std Dev = 0.0122\nGene 14: Mean Score = 0.3226, Std Dev = 0.0103\nGene 15: Mean Score = 0.2993, Std Dev = 0.0122\nGene 16: Mean Score = 0.2992, Std Dev = 0.0133\nGene 17: Mean Score = 0.3175, Std Dev = 0.0191\nGene 18: Mean Score = 0.3181, Std Dev = 0.0141\nGene 19: Mean Score = 0.3089, Std Dev = 0.0154\nGene 20: Mean Score = 0.2923, Std Dev = 0.0099\nGene 21: Mean Score = 0.3338, Std Dev = 0.0099\nGene 22: Mean Score = 0.2952, Std Dev = 0.0149\nGene 23: Mean Score = 0.3117, Std Dev = 0.0142\nGene 24: Mean Score = 0.3079, Std Dev = 0.0122\nGene 25: Mean Score = 0.2977, Std Dev = 0.0133\nGene 26: Mean Score = 0.3126, Std Dev = 0.0135\nGene 27: Mean Score = 0.3042, Std Dev = 0.0090\nGene 28: Mean Score = 0.2890, Std Dev = 0.0128\nGene 29: Mean Score = 0.3047, Std Dev = 0.0112\nGene 30: Mean Score = 0.2927, Std Dev = 0.0112\nGene 31: Mean Score = 0.3173, Std Dev = 0.0146\nGene 32: Mean Score = 0.3087, Std Dev = 0.0044\nGene 33: Mean Score = 0.3071, Std Dev = 0.0163\nGene 34: Mean Score = 0.3001, Std Dev = 0.0056\nGene 35: Mean Score = 0.3143, Std Dev = 0.0136\nGene 36: Mean Score = 0.3073, Std Dev = 0.0109\nGene 37: Mean Score = 0.3153, Std Dev = 0.0156\nGene 38: Mean Score = 0.3145, Std Dev = 0.0067\nGene 39: Mean Score = 0.2810, Std Dev = 0.0085\nGene 40: Mean Score = 0.3019, Std Dev = 0.0194\nGene 41: Mean Score = 0.2988, Std Dev = 0.0068\nGene 42: Mean Score = 0.3079, Std De",
                "lineage": "64501"
            }
        ],
        "646": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5445411319292284,
                "model_info": "",
                "lineage": "64601"
            }
        ],
        "647": [],
        "648": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import ttest_ind\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(neighbor_exp)\n\n        p_values = []\n        for i in range(len(scores)):\n            for j in range(i + 1, len(scores)):\n                stat, p = ttest_ind(scores[i], scores[j])\n                p_values.append(p)\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(p_values) < 0.05 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "64801"
            }
        ],
        "649": [],
        "650": [],
        "651": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial.distance import cdist\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = cdist(spatial_coords, spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.std(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "65101"
            }
        ],
        "652": [],
        "653": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport warnings\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        if np.std(scores) > 0.5:\n            warnings.warn(f\"Gene {gene_idx} may have violated assumptions of normality in spatial variance scoring.\")\n        \n        skewness = skew(scaled_gene_expression[:, gene_idx])\n        kurt = kurtosis(scaled_gene_expression[:, gene_idx])\n        print(f\"Gene {gene_idx}: Skewness = {skewness:.2f}, Kurtosis = {kurt:.2f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Skewness = -0.07, Kurtosis = -1.07\nGene 1: Skewness = -0.06, Kurtosis = -1.10\nGene 2: Skewness = 3.38, Kurtosis = 9.44\nGene 3: Skewness = -0.17, Kurtosis = -1.08\nGene 4: Skewness = 3.95, Kurtosis = 13.64\nGene 5: Skewness = 3.64, Kurtosis = 11.27\nGene 6: Skewness = 3.73, Kurtosis = 11.92\nGene 7: Skewness = 1.90, Kurtosis = 1.64\nGene 8: Skewness = 2.23, Kurtosis = 2.97\nGene 9: Skewness = -0.19, Kurtosis = -1.16\nGene 10: Skewness = -0.13, Kurtosis = -1.05\nGene 11: Skewness = 3.59, Kurtosis = 10.86\nGene 12: Skewness = 4.67, Kurtosis = 19.81\nGene 13: Skewness = 2.38, Kurtosis = 3.69\nGene 14: Skewness = 3.31, Kurtosis = 8.96\nGene 15: Skewness = 2.16, Kurtosis = 2.66\nGene 16: Skewness = 4.30, Kurtosis = 16.46\nGene 17: Skewness = 2.66, Kurtosis = 5.08\nGene 18: Skewness = 3.70, Kurtosis = 11.69\nGene 19: Skewness = 3.27, Kurtosis = 8.67\nGene 20: Skewness = 2.91, Kurtosis = 6.49\nGene 21: Skewness = 0.97, Kurtosis = -1.01\nGene 22: Skewness = 4.78, Kurtosis = 20.82\nGene 23: Skewness = -0.19, Kurtosis = -1.28\nGene 24: Skewness = 1.89, Kurtosis = 1.59\nGene 25: Skewness = 4.30, Kurtosis = 16.46\nGene 26: Skewness = 0.11, Kurtosis = -1.72\nGene 27: Skewness = 3.89, Kurtosis = 13.11\nGene 28: Skewness = -0.17, Kurtosis = -1.05\nGene 29: Skewness = 2.27, Kurtosis = 3.16\nGene 30: Skewness = 0.02, Kurtosis = -1.68\nGene 31: Skewness = 1.78, Kurtosis = 1.17\nGene 32: Skewness = 3.79, Kurtosis = 12.37\nGene 33: Skewness = 5.50, Kurtosis = 28.27\nGene 34: Skewness = 4.30, Kurtosis = 16.46\nGene 35: Skewness = 0.95, Kurtosis = -1.05\nGene 36: Skewness = 1.29, Kurtosis = -0.31\nGene 37: Skewness = 2.53, Kurtosis = 4.42\nGene 38: Skewness = 0.99, Kurtosis = -0.99\nGene 39: Skewness = 4.57, Kurtosis = 18.88\nGene 40: Skewness = 4.38, Kurtosis = 17.21\nGene 41: Skewness = 1.48, Kurtosis = 0.19\nGene 42: Skewness = 3.20, Kurtosis = 8.25\nGene 43: Skewness = 0.39, Kurtosis = -1.71\nGene 44: Skewness = 3.51, Kurtosis = 10.29\nGene 45: Skewness = 0.67, Kurtosis = -1.48\nGene 46: Skewness = 3.33, Kurtosis = 9.1",
                "lineage": "65301"
            }
        ],
        "654": [],
        "655": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = pairwise_distances(spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5431050506959504,
                "model_info": "",
                "lineage": "65501"
            }
        ],
        "656": [],
        "657": [],
        "658": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            if len(set(neighbor_exp)) > 1:\n                labels = np.digitize(neighbor_exp, bins=np.linspace(np.min(neighbor_exp), np.max(neighbor_exp), 2)) - 1\n                score = silhouette_score(neighbor_exp.reshape(-1, 1), labels)\n            else:\n                score = 0\n            scores.append(score)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "65801"
            }
        ],
        "659": [],
        "660": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    kmeans = KMeans(n_clusters=10)\n    kmeans.fit(spatial_coords)\n    cluster_labels = kmeans.labels_\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[cluster_labels == label, gene_idx]) for label in np.unique(cluster_labels)])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.722478011922192,
                "model_info": "",
                "lineage": "66001"
            }
        ],
        "661": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    low_confidence_count = 0\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i][k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        mean_score = np.mean(scores)\n        spatial_var_score[gene_idx] = 1 if mean_score > 0.5 else 0\n        if mean_score <= 0.5:\n            low_confidence_count += 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    low_confidence_percentage = (low_confidence_count / num_genes) * 100\n    print(f\"Percentage of low-confidence predictions: {low_confidence_percentage:.2f}%\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.824196673846538,
                "model_info": "Percentage of low-confidence predictions: 92.10%",
                "lineage": "66101"
            }
        ],
        "662": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "66201"
            }
        ],
        "663": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    print(f\"Before scaling - Mean: {np.mean(gene_expression, axis=0)}, Std: {np.std(gene_expression, axis=0)}, Min: {np.min(gene_expression, axis=0)}, Max: {np.max(gene_expression, axis=0)}\")\n    print(f\"After scaling - Mean: {np.mean(scaled_gene_expression, axis=0)}, Std: {np.std(scaled_gene_expression, axis=0)}, Min: {np.min(scaled_gene_expression, axis=0)}, Max: {np.max(scaled_gene_expression, axis=0)}\")\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Before scaling - Mean: [2.43863816 2.53760887 0.09580364 ... 0.4631829  0.05621536 0.91132225], Std: [1.63177923 1.72815252 0.40131194 ... 0.79389895 0.25011274 1.04228421], Min: [0. 0. 0. ... 0. 0. 0.], Max: [10. 10.  5. ...  7.  2.  7.]\nAfter scaling - Mean: [1.69520231 1.70045558 0.27362924 ... 0.69781234 0.23292332 1.08818184], Std: [1. 1. 1. ... 1. 1. 1.], Min: [0. 0. 0. ... 0. 0. 0.], Max: [3.42605715 3.43216112 4.06725948 ... 2.53104615 4.64186341 2.68683865]",
                "lineage": "66301"
            }
        ],
        "664": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import skew, kurtosis\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n    \n    for gene_idx in range(num_genes):\n        print(f\"Gene {gene_idx}:\")\n        print(f\"Before scaling - Mean: {np.mean(gene_expression[:, gene_idx])}, Std: {np.std(gene_expression[:, gene_idx])}, Min: {np.min(gene_expression[:, gene_idx])}, Max: {np.max(gene_expression[:, gene_idx])}\")\n        print(f\"After scaling - Mean: {np.mean(scaled_gene_expression[:, gene_idx])}, Std: {np.std(scaled_gene_expression[:, gene_idx])}, Min: {np.min(scaled_gene_expression[:, gene_idx])}, Max: {np.max(scaled_gene_expression[:, gene_idx])}\")\n        print(f\"Skewness: {skew(scaled_gene_expression[:, gene_idx])}, Kurtosis: {kurtosis(scaled_gene_expression[:, gene_idx])}\")\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Gene 0:\nBefore scaling - Mean: 2.4386381631037213, Std: 1.6317792283976524, Min: 0.0, Max: 10.0\nAfter scaling - Mean: 1.6952023059129513, Std: 1.0, Min: 0.0, Max: 3.4260571530604738\nSkewness: -0.06934999036570083, Kurtosis: -1.0703653129781427\nGene 1:\nBefore scaling - Mean: 2.5376088677751385, Std: 1.728152524256687, Min: 0.0, Max: 10.0\nAfter scaling - Mean: 1.7004555763644795, Std: 1.0000000000000002, Min: 0.0, Max: 3.43216111849007\nSkewness: -0.05662659459607767, Kurtosis: -1.097467840437324\nGene 2:\nBefore scaling - Mean: 0.0958036421219319, Std: 0.40131194125145403, Min: 0.0, Max: 5.0\nAfter scaling - Mean: 0.273629238688866, Std: 1.0, Min: 0.0, Max: 4.067259477540387\nSkewness: 3.3820539984041447, Kurtosis: 9.442699364844204\nGene 3:\nBefore scaling - Mean: 1.8598574821852731, Std: 1.5514901718166636, Min: 0.0, Max: 10.0\nAfter scaling - Mean: 1.5511387763173057, Std: 1.0, Min: 0.0, Max: 3.223845967681749\nSkewness: -0.16667257771616964, Kurtosis: -1.080689716199208\nGene 4:\nBefore scaling - Mean: 0.06571654790182106, Std: 0.29718330185983566, Min: 0.0, Max: 3.0\nAfter scaling - Mean: 0.23852958183695022, Std: 1.0000000000000002, Min: 0.0, Max: 4.552333542548695\nSkewness: 3.954409166703637, Kurtosis: 13.639996208217799\nGene 5:\nBefore scaling - Mean: 0.07205067300079177, Std: 0.3010188410084407, Min: 0.0, Max: 3.0\nAfter scaling - Mean: 0.25654269677782016, Std: 1.0, Min: 0.0, Max: 4.28330571131873\nSkewness: 3.6420010225690023, Kurtosis: 11.266538434673656\nGene 6:\nBefore scaling - Mean: 0.07521773555027712, Std: 0.32310635378046126, Min: 0.0, Max: 3.0\nAfter scaling - Mean: 0.2512362071396511, Std: 1.0000000000000002, Min: 0.0, Max: 4.358833932000383\nSkewness: 3.7298774139097226, Kurtosis: 11.91540592862201\nGene 7:\nBefore scaling - Mean: 0.2209026128266033, Std: 0.6043967769533434, Min: 0.0, Max: 6.0\nAfter scaling - Mean: 0.42951127581546794, Std: 0.9999999999999998, Min: 0.0, Max: 2.98599593241833\nSkewness: 1.9037211672553531, Kurtosis: 1.6384604398426257\nGene 8:\nBefore s",
                "lineage": "66401"
            }
        ],
        "665": [],
        "666": [],
        "667": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    distance_matrix = pairwise_distances(spatial_coords)\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distance_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': distance_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5609630885940822,
                "model_info": "",
                "lineage": "66701"
            }
        ],
        "668": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene Index: {gene_idx}, Mean Score: {np.mean(scores)}, Spatial Var Score: {spatial_var_score[gene_idx]}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene Index: 0, Mean Score: 0.3076987827178844, Spatial Var Score: 0.0\nGene Index: 1, Mean Score: 0.3133506897429231, Spatial Var Score: 0.0\nGene Index: 2, Mean Score: 0.2974183275280776, Spatial Var Score: 0.0\nGene Index: 3, Mean Score: 0.31657257675803196, Spatial Var Score: 0.0\nGene Index: 4, Mean Score: 0.3027171557893794, Spatial Var Score: 0.0\nGene Index: 5, Mean Score: 0.3069114096213271, Spatial Var Score: 0.0\nGene Index: 6, Mean Score: 0.3064608397740318, Spatial Var Score: 0.0\nGene Index: 7, Mean Score: 0.2856795244469658, Spatial Var Score: 0.0\nGene Index: 8, Mean Score: 0.30772132368288807, Spatial Var Score: 0.0\nGene Index: 9, Mean Score: 0.3114973073955138, Spatial Var Score: 0.0\nGene Index: 10, Mean Score: 0.29804102625208373, Spatial Var Score: 0.0\nGene Index: 11, Mean Score: 0.29755943385380723, Spatial Var Score: 0.0\nGene Index: 12, Mean Score: 0.31499830151931996, Spatial Var Score: 0.0\nGene Index: 13, Mean Score: 0.3041609315078687, Spatial Var Score: 0.0\nGene Index: 14, Mean Score: 0.32138730328265425, Spatial Var Score: 0.0\nGene Index: 15, Mean Score: 0.29850619757299524, Spatial Var Score: 0.0\nGene Index: 16, Mean Score: 0.29913875360036746, Spatial Var Score: 0.0\nGene Index: 17, Mean Score: 0.31609812235164486, Spatial Var Score: 0.0\nGene Index: 18, Mean Score: 0.31754560312303776, Spatial Var Score: 0.0\nGene Index: 19, Mean Score: 0.3075235435670835, Spatial Var Score: 0.0\nGene Index: 20, Mean Score: 0.2936692710532388, Spatial Var Score: 0.0\nGene Index: 21, Mean Score: 0.33373787145497713, Spatial Var Score: 0.0\nGene Index: 22, Mean Score: 0.2961935455105696, Spatial Var Score: 0.0\nGene Index: 23, Mean Score: 0.31137071358237894, Spatial Var Score: 0.0\nGene Index: 24, Mean Score: 0.3075354844032545, Spatial Var Score: 0.0\nGene Index: 25, Mean Score: 0.2972899685091281, Spatial Var Score: 0.0\nGene Index: 26, Mean Score: 0.31271532855612644, Spatial Var Score: 0.0\nGene Index: 27, Mean Score: 0.3010819085593851, Spatial Var Score: 0.0\nGene Inde",
                "lineage": "66801"
            }
        ],
        "669": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    adata.obs['spatial_density'] = np.array([len(list(G.neighbors(i))) for i in range(spatial_coords.shape[0])])\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "66901"
            }
        ],
        "670": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance_matrix(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': np.exp(-dist_matrix[i, j])}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp) if len(neighbor_exp) > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "67001"
            }
        ],
        "671": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': np.exp(-distances[j])}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n            if neighbor_exp:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "67101"
            }
        ],
        "672": [],
        "673": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    distances = pairwise_distances(spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    \n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    evaluation_metrics = []\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        evaluation_metrics.append({'gene_idx': gene_idx, 'mean_score': np.mean(scores), 'std_score': np.std(scores)})\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Evaluation Metrics:\", evaluation_metrics)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8223100038602013,
                "model_info": "Evaluation Metrics: [{'gene_idx': 0, 'mean_score': 0.30796438781141894, 'std_score': 0.005533453508620885}, {'gene_idx': 1, 'mean_score': 0.31091359905610955, 'std_score': 0.015015333363063715}, {'gene_idx': 2, 'mean_score': 0.2936763050052721, 'std_score': 0.007284322340100085}, {'gene_idx': 3, 'mean_score': 0.3172482947578655, 'std_score': 0.010740817104693897}, {'gene_idx': 4, 'mean_score': 0.3017316527174704, 'std_score': 0.004185839809169487}, {'gene_idx': 5, 'mean_score': 0.3027088115936093, 'std_score': 0.011625904766863022}, {'gene_idx': 6, 'mean_score': 0.3061310550107551, 'std_score': 0.022984183418322587}, {'gene_idx': 7, 'mean_score': 0.2850379144390844, 'std_score': 0.004641862148426922}, {'gene_idx': 8, 'mean_score': 0.3053511976355977, 'std_score': 0.014477524770182751}, {'gene_idx': 9, 'mean_score': 0.31047154854926207, 'std_score': 0.012491968668635611}, {'gene_idx': 10, 'mean_score': 0.29861414711555817, 'std_score': 0.010165076133831304}, {'gene_idx': 11, 'mean_score': 0.29574069671370795, 'std_score': 0.012313365045997343}, {'gene_idx': 12, 'mean_score': 0.31375588655104164, 'std_score': 0.009449396112118086}, {'gene_idx': 13, 'mean_score': 0.3011035833218282, 'std_score': 0.012537751015687292}, {'gene_idx': 14, 'mean_score': 0.3230662360690363, 'std_score': 0.01129731420392898}, {'gene_idx': 15, 'mean_score': 0.301144825866041, 'std_score': 0.012672060526768992}, {'gene_idx': 16, 'mean_score': 0.29595801672325833, 'std_score': 0.013983703280026459}, {'gene_idx': 17, 'mean_score': 0.3129361001465075, 'std_score': 0.0172110632866578}, {'gene_idx': 18, 'mean_score': 0.3155061910743131, 'std_score': 0.013191853136871616}, {'gene_idx': 19, 'mean_score': 0.30623040606923346, 'std_score': 0.014336253232440553}, {'gene_idx': 20, 'mean_score': 0.29371349352093334, 'std_score': 0.012960954588532097}, {'gene_idx': 21, 'mean_score': 0.3338856272043335, 'std_score': 0.00757282320706439}, {'gene_idx': 22, 'mean_score': 0.29907607104633976, 'std_score': 0.0126",
                "lineage": "67301"
            }
        ],
        "674": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        print(f\"Gene index {gene_idx}: Mean score = {np.mean(scores):.4f}, Std = {np.std(scores):.4f}\")\n\n        if np.any(np.isnan(scaled_gene_expression[train_index, gene_idx])):\n            print(f\"Warning: NaN values detected in gene index {gene_idx}.\")\n        if np.any(np.abs(np.diff(scaled_gene_expression[train_index, gene_idx])) > 1e5):\n            print(f\"Warning: Potential violation of linearity assumption for gene index {gene_idx}.\")\n        if np.any(np.isinf(scaled_gene_expression[train_index, gene_idx])):\n            print(f\"Warning: Infinite values detected in gene index {gene_idx}.\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene index 0: Mean score = 0.3077, Std = 0.0033\nGene index 1: Mean score = 0.3134, Std = 0.0122\nGene index 2: Mean score = 0.2974, Std = 0.0087\nGene index 3: Mean score = 0.3166, Std = 0.0114\nGene index 4: Mean score = 0.3027, Std = 0.0030\nGene index 5: Mean score = 0.3069, Std = 0.0137\nGene index 6: Mean score = 0.3065, Std = 0.0243\nGene index 7: Mean score = 0.2857, Std = 0.0043\nGene index 8: Mean score = 0.3077, Std = 0.0126\nGene index 9: Mean score = 0.3115, Std = 0.0156\nGene index 10: Mean score = 0.2980, Std = 0.0121\nGene index 11: Mean score = 0.2976, Std = 0.0116\nGene index 12: Mean score = 0.3150, Std = 0.0061\nGene index 13: Mean score = 0.3042, Std = 0.0119\nGene index 14: Mean score = 0.3214, Std = 0.0113\nGene index 15: Mean score = 0.2985, Std = 0.0124\nGene index 16: Mean score = 0.2991, Std = 0.0132\nGene index 17: Mean score = 0.3161, Std = 0.0189\nGene index 18: Mean score = 0.3175, Std = 0.0140\nGene index 19: Mean score = 0.3075, Std = 0.0131\nGene index 20: Mean score = 0.2937, Std = 0.0102\nGene index 21: Mean score = 0.3337, Std = 0.0090\nGene index 22: Mean score = 0.2962, Std = 0.0150\nGene index 23: Mean score = 0.3114, Std = 0.0135\nGene index 24: Mean score = 0.3075, Std = 0.0114\nGene index 25: Mean score = 0.2973, Std = 0.0124\nGene index 26: Mean score = 0.3127, Std = 0.0143\nGene index 27: Mean score = 0.3011, Std = 0.0109\nGene index 28: Mean score = 0.2885, Std = 0.0113\nGene index 29: Mean score = 0.3047, Std = 0.0115\nGene index 30: Mean score = 0.2933, Std = 0.0112\nGene index 31: Mean score = 0.3164, Std = 0.0146\nGene index 32: Mean score = 0.3081, Std = 0.0058\nGene index 33: Mean score = 0.3067, Std = 0.0163\nGene index 34: Mean score = 0.2998, Std = 0.0051\nGene index 35: Mean score = 0.3135, Std = 0.0128\nGene index 36: Mean score = 0.3065, Std = 0.0113\nGene index 37: Mean score = 0.3159, Std = 0.0148\nGene index 38: Mean score = 0.3146, Std = 0.0078\nGene index 39: Mean score = 0.2796, Std = 0.0101\nGene index 40: Mean score = 0.3035, Std = 0.0182\nG",
                "lineage": "67401"
            }
        ],
        "675": [],
        "676": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    correlated_features = np.corrcoef(scaled_gene_expression, rowvar=False)\n    threshold = 0.9\n    highly_correlated_pairs = np.argwhere(np.abs(correlated_features) > threshold)\n    if highly_correlated_pairs.size > 0:\n        print(\"Highly correlated features:\", highly_correlated_pairs)\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Highly correlated features: [[   0    0]\n [   1    1]\n [   2    2]\n ...\n [1047 1047]\n [1048 1048]\n [1049 1049]]",
                "lineage": "67601"
            }
        ],
        "677": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        if np.mean(scores) <= 0.5:\n            print(f\"Warning: Model assumption violated for gene index {gene_idx}. Mean score: {np.mean(scores)}\")\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Warning: Model assumption violated for gene index 0. Mean score: 0.3076987827178844\nWarning: Model assumption violated for gene index 1. Mean score: 0.3133506897429231\nWarning: Model assumption violated for gene index 2. Mean score: 0.2974183275280776\nWarning: Model assumption violated for gene index 3. Mean score: 0.31657257675803196\nWarning: Model assumption violated for gene index 4. Mean score: 0.3027171557893794\nWarning: Model assumption violated for gene index 5. Mean score: 0.3069114096213271\nWarning: Model assumption violated for gene index 6. Mean score: 0.3064608397740318\nWarning: Model assumption violated for gene index 7. Mean score: 0.2856795244469658\nWarning: Model assumption violated for gene index 8. Mean score: 0.30772132368288807\nWarning: Model assumption violated for gene index 9. Mean score: 0.3114973073955138\nWarning: Model assumption violated for gene index 10. Mean score: 0.29804102625208373\nWarning: Model assumption violated for gene index 11. Mean score: 0.29755943385380723\nWarning: Model assumption violated for gene index 12. Mean score: 0.31499830151931996\nWarning: Model assumption violated for gene index 13. Mean score: 0.3041609315078687\nWarning: Model assumption violated for gene index 14. Mean score: 0.32138730328265425\nWarning: Model assumption violated for gene index 15. Mean score: 0.29850619757299524\nWarning: Model assumption violated for gene index 16. Mean score: 0.29913875360036746\nWarning: Model assumption violated for gene index 17. Mean score: 0.31609812235164486\nWarning: Model assumption violated for gene index 18. Mean score: 0.31754560312303776\nWarning: Model assumption violated for gene index 19. Mean score: 0.3075235435670835\nWarning: Model assumption violated for gene index 20. Mean score: 0.2936692710532388\nWarning: Model assumption violated for gene index 21. Mean score: 0.33373787145497713\nWarning: Model assumption violated for gene index 22. Mean score: 0.2961935455105696\nWarning: Model assumption violated for gene ",
                "lineage": "67701"
            }
        ],
        "678": [],
        "679": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_variance = np.var(scaled_gene_expression[:, gene_idx])\n            local_variance = np.var(neighbor_exp)\n            if total_variance > 0:\n                variance_ratio = local_variance / total_variance\n            else:\n                variance_ratio = 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "67901"
            }
        ],
        "680": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n            scores.append(np.std(neighbor_exp) if neighbor_exp else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "68001"
            }
        ],
        "681": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.ndimage import gaussian_filter\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            smoothed_expression = gaussian_filter(scaled_gene_expression[:, gene_idx], sigma=1)\n            neighbor_exp = np.array([np.mean(smoothed_expression[list(G.neighbors(i))]) for i in test_index if len(list(G.neighbors(i))) > 0])\n            scores.append(np.std(neighbor_exp) if len(neighbor_exp) > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7648643562638239,
                "model_info": "",
                "lineage": "68101"
            }
        ],
        "682": [],
        "683": [],
        "684": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial.distance import cdist\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distance_matrix = cdist(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distance_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': distance_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5616789059886249,
                "model_info": "",
                "lineage": "68401"
            }
        ],
        "685": [],
        "686": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    if np.any(np.isnan(scaled_gene_expression)):\n        print(\"Warning: NaN values detected in scaled gene expression data.\")\n    if np.any(np.isinf(scaled_gene_expression)):\n        print(\"Warning: Infinite values detected in scaled gene expression data.\")\n    if np.any(np.abs(spatial_coords) > 1e3):\n        print(\"Warning: Spatial coordinates exceed expected range.\")\n    \n    if scaled_gene_expression.shape[0] < 100:\n        print(\"Warning: Insufficient training data volume for reliable model performance.\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "68601"
            }
        ],
        "687": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': 1 / (distances[j] + 1e-10)}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean([scaled_gene_expression[n, gene_idx] for n in G.neighbors(i) if n in train_index]) if len(list(G.neighbors(i))) > 0 else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8063672218418828,
                "model_info": "",
                "lineage": "68701"
            }
        ],
        "688": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=min(50, num_genes))\n    reduced_expression = pca.fit_transform(scaled_gene_expression)\n\n    kmeans = KMeans(n_clusters=10)\n    cluster_labels = kmeans.fit_predict(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(min(num_genes, reduced_expression.shape[1])):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], reduced_expression[train_index, :])\n            neighbor_exp = np.array([np.mean(reduced_expression[cluster_labels == cluster, gene_idx]) for cluster in np.unique(cluster_labels) if np.any(cluster_labels == cluster)])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7145090206185567,
                "model_info": "",
                "lineage": "68801"
            }
        ],
        "689": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i][k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    print(\"Dataset Statistics: Genes:\", num_genes, \"Cells:\", spatial_coords.shape[0])\n    print(\"Spatial Variable Genes Count:\", np.sum(spatial_var_score))\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.824196673846538,
                "model_info": "Dataset Statistics: Genes: 1050 Cells: 1263\nSpatial Variable Genes Count: 83.0",
                "lineage": "68901"
            }
        ],
        "690": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    logging.info(f\"Top features partial dependence estimates: {np.argsort(spatial_var_score)[-10:]}\")\n    \n    if np.any(np.isnan(scaled_gene_expression)):\n        logging.warning(\"Model assumptions may be violated: NaN values detected in scaled gene expression.\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "69001"
            }
        ],
        "691": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.mixture import GaussianMixture\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            gmm = GaussianMixture(n_components=2).fit(scaled_gene_expression[train_index, gene_idx].reshape(-1, 1))\n            neighbor_exp = gmm.score_samples(scaled_gene_expression[test_index, gene_idx].reshape(-1, 1))\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.2087807900870333,
                "model_info": "",
                "lineage": "69101"
            }
        ],
        "692": [],
        "693": [],
        "694": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport psutil\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene index: {gene_idx}, Memory Usage: {psutil.virtual_memory().percent}%\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene index: 0, Memory Usage: 3.3%\nGene index: 1, Memory Usage: 3.3%\nGene index: 2, Memory Usage: 3.3%\nGene index: 3, Memory Usage: 3.3%\nGene index: 4, Memory Usage: 3.3%\nGene index: 5, Memory Usage: 3.3%\nGene index: 6, Memory Usage: 3.3%\nGene index: 7, Memory Usage: 3.3%\nGene index: 8, Memory Usage: 3.3%\nGene index: 9, Memory Usage: 3.3%\nGene index: 10, Memory Usage: 3.3%\nGene index: 11, Memory Usage: 3.3%\nGene index: 12, Memory Usage: 3.3%\nGene index: 13, Memory Usage: 3.3%\nGene index: 14, Memory Usage: 3.3%\nGene index: 15, Memory Usage: 3.3%\nGene index: 16, Memory Usage: 3.3%\nGene index: 17, Memory Usage: 3.3%\nGene index: 18, Memory Usage: 3.3%\nGene index: 19, Memory Usage: 3.3%\nGene index: 20, Memory Usage: 3.3%\nGene index: 21, Memory Usage: 3.3%\nGene index: 22, Memory Usage: 3.3%\nGene index: 23, Memory Usage: 3.3%\nGene index: 24, Memory Usage: 3.3%\nGene index: 25, Memory Usage: 3.3%\nGene index: 26, Memory Usage: 3.3%\nGene index: 27, Memory Usage: 3.3%\nGene index: 28, Memory Usage: 3.3%\nGene index: 29, Memory Usage: 3.3%\nGene index: 30, Memory Usage: 3.3%\nGene index: 31, Memory Usage: 3.3%\nGene index: 32, Memory Usage: 3.3%\nGene index: 33, Memory Usage: 3.3%\nGene index: 34, Memory Usage: 3.3%\nGene index: 35, Memory Usage: 3.3%\nGene index: 36, Memory Usage: 3.3%\nGene index: 37, Memory Usage: 3.3%\nGene index: 38, Memory Usage: 3.3%\nGene index: 39, Memory Usage: 3.3%\nGene index: 40, Memory Usage: 3.3%\nGene index: 41, Memory Usage: 3.3%\nGene index: 42, Memory Usage: 3.3%\nGene index: 43, Memory Usage: 3.3%\nGene index: 44, Memory Usage: 3.3%\nGene index: 45, Memory Usage: 3.3%\nGene index: 46, Memory Usage: 3.3%\nGene index: 47, Memory Usage: 3.3%\nGene index: 48, Memory Usage: 3.3%\nGene index: 49, Memory Usage: 3.3%\nGene index: 50, Memory Usage: 3.3%\nGene index: 51, Memory Usage: 3.3%\nGene index: 52, Memory Usage: 3.3%\nGene index: 53, Memory Usage: 3.3%\nGene index: 54, Memory Usage: 3.3%\nGene index: 55, Memory Usage: 3.3%\nGene index: 56, Memory Usage: 3.3%\nGene index: 57,",
                "lineage": "69401"
            }
        ],
        "695": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = distance.cdist(spatial_coords, spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.corrcoef(neighbor_exp, scaled_gene_expression[test_index, gene_idx])[0, 1])\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7379834452473785,
                "model_info": "",
                "lineage": "69501"
            }
        ],
        "696": [],
        "697": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': 1 / (distances[j] + 1e-10)}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if G.neighbors(i)])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "69701"
            }
        ],
        "698": [],
        "699": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    if np.any(np.isnan(scaled_gene_expression)):\n        print(\"Warning: NaN values detected in gene expression data.\")\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "69901"
            }
        ],
        "700": [],
        "701": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_variance = np.var(scaled_gene_expression[train_index, gene_idx])\n            if total_variance > 0:\n                variance_ratio = np.var(neighbor_exp) / total_variance\n            else:\n                variance_ratio = 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "70101"
            }
        ],
        "702": [],
        "703": [],
        "704": [],
        "705": [],
        "706": [],
        "707": [],
        "708": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import confusion_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    true_labels = np.zeros(num_genes)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        true_labels[gene_idx] = 1 if np.std(scaled_gene_expression[:, gene_idx]) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(confusion_matrix(true_labels, spatial_var_score))\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "[[  0   0]\n [980  70]]",
                "lineage": "70801"
            }
        ],
        "709": [],
        "710": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    spatial_density = np.array([np.sum(np.linalg.norm(spatial_coords - spatial_coords[i], axis=1) < 1) for i in range(spatial_coords.shape[0])])\n    adata.obs['spatial_density'] = spatial_density\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "71001"
            }
        ],
        "711": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': 1/distances[j] + 1e-10}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "71101"
            }
        ],
        "712": [],
        "713": [],
        "714": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport time\n\ndef tuso_model(adata):\n    start_time = time.time()\n    \n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    low_confidence_count = 0\n    total_genes = num_genes\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if spatial_var_score[gene_idx] == 0:\n            low_confidence_count += 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    elapsed_time = time.time() - start_time\n\n    print(f\"Elapsed Time: {elapsed_time:.2f}s, Low Confidence Predictions: {low_confidence_count}/{total_genes}\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826101443768997,
                "model_info": "Elapsed Time: 11.32s, Low Confidence Predictions: 974/1050",
                "lineage": "71401"
            }
        ],
        "715": [],
        "716": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=0.95)\n    reduced_coords = pca.fit_transform(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(reduced_coords.shape[0]))\n    for i in range(reduced_coords.shape[0]):\n        distances = np.linalg.norm(reduced_coords[i] - reduced_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(reduced_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(reduced_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826992784992785,
                "model_info": "",
                "lineage": "71601"
            }
        ],
        "717": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    spatial_density = np.zeros(spatial_coords.shape[0])\n    for i in range(spatial_coords.shape[0]):\n        spatial_density[i] = np.sum(np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1) < 1)\n\n    adata.obs['spatial_density'] = spatial_density\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "71701"
            }
        ],
        "718": [],
        "719": [],
        "720": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\nimport psutil\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene index: {gene_idx}, Memory usage: {psutil.Process().memory_info().rss / (1024 ** 2):.2f} MB\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Gene index: 0, Memory usage: 551.59 MB\nGene index: 1, Memory usage: 551.59 MB\nGene index: 2, Memory usage: 551.59 MB\nGene index: 3, Memory usage: 551.59 MB\nGene index: 4, Memory usage: 551.59 MB\nGene index: 5, Memory usage: 551.59 MB\nGene index: 6, Memory usage: 551.59 MB\nGene index: 7, Memory usage: 551.59 MB\nGene index: 8, Memory usage: 551.59 MB\nGene index: 9, Memory usage: 551.59 MB\nGene index: 10, Memory usage: 551.59 MB\nGene index: 11, Memory usage: 551.59 MB\nGene index: 12, Memory usage: 551.59 MB\nGene index: 13, Memory usage: 551.59 MB\nGene index: 14, Memory usage: 551.59 MB\nGene index: 15, Memory usage: 551.59 MB\nGene index: 16, Memory usage: 551.59 MB\nGene index: 17, Memory usage: 551.59 MB\nGene index: 18, Memory usage: 551.59 MB\nGene index: 19, Memory usage: 551.59 MB\nGene index: 20, Memory usage: 551.59 MB\nGene index: 21, Memory usage: 551.59 MB\nGene index: 22, Memory usage: 551.59 MB\nGene index: 23, Memory usage: 551.59 MB\nGene index: 24, Memory usage: 551.59 MB\nGene index: 25, Memory usage: 551.59 MB\nGene index: 26, Memory usage: 551.59 MB\nGene index: 27, Memory usage: 551.59 MB\nGene index: 28, Memory usage: 551.59 MB\nGene index: 29, Memory usage: 551.59 MB\nGene index: 30, Memory usage: 551.59 MB\nGene index: 31, Memory usage: 551.59 MB\nGene index: 32, Memory usage: 551.59 MB\nGene index: 33, Memory usage: 551.59 MB\nGene index: 34, Memory usage: 551.59 MB\nGene index: 35, Memory usage: 551.59 MB\nGene index: 36, Memory usage: 551.59 MB\nGene index: 37, Memory usage: 551.59 MB\nGene index: 38, Memory usage: 551.59 MB\nGene index: 39, Memory usage: 551.59 MB\nGene index: 40, Memory usage: 551.59 MB\nGene index: 41, Memory usage: 551.59 MB\nGene index: 42, Memory usage: 551.59 MB\nGene index: 43, Memory usage: 551.59 MB\nGene index: 44, Memory usage: 551.59 MB\nGene index: 45, Memory usage: 551.59 MB\nGene index: 46, Memory usage: 551.59 MB\nGene index: 47, Memory usage: 551.59 MB\nGene index: 48, Memory usage: 551.59 MB\nGene index: 49, Memory usage: 551.59 MB\nGene index",
                "lineage": "72001"
            }
        ],
        "721": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    print(f\"Best hyper-parameter configuration: {ridge.alpha_}\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Best hyper-parameter configuration: 1000.0",
                "lineage": "72101"
            }
        ],
        "722": [],
        "723": [],
        "724": [],
        "725": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': 1/(distances[j] + 1e-9)}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp) if neighbor_exp.size > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "72501"
            }
        ],
        "726": [],
        "727": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    print(f\"Dataset statistics: {gene_expression.shape[0]} cells, {num_genes} genes.\")\n    \n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8245406426234717,
                "model_info": "Dataset statistics: 1263 cells, 1050 genes.",
                "lineage": "72701"
            }
        ],
        "728": [],
        "729": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.mixture import GaussianMixture\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            gmm = GaussianMixture(n_components=2)\n            gmm.fit(scaled_gene_expression[train_index, gene_idx].reshape(-1, 1))\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "72901"
            }
        ],
        "730": [],
        "731": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"].astype('category').cat.codes):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Assumptions about label distribution: Class balance - {np.bincount(adata.obs['annotation'].astype('category').cat.codes)}, Stratification - {np.unique(adata.obs['annotation'], return_counts=True)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Assumptions about label distribution: Class balance - [117  84  69 476  36  31 193  41  64 152], Stratification - (array(['CNS', 'amnioserosa', 'carcass', 'epidermis', 'fat body',\n       'foregut', 'midgut', 'muscle', 'salivary gland', 'trachea'],\n      dtype=object), array([117,  84,  69, 476,  36,  31, 193,  41,  64, 152]))",
                "lineage": "73101"
            }
        ],
        "732": [],
        "733": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_variance = np.var(scaled_gene_expression[train_index, gene_idx])\n            spatial_variance = np.var(neighbor_exp)\n            variance_ratio = spatial_variance / total_variance if total_variance > 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "73301"
            }
        ],
        "734": [],
        "735": [],
        "736": [],
        "737": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import DBSCAN\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = DBSCAN(eps=1.5, min_samples=5).fit(spatial_coords)\n    cluster_labels = clustering.labels_\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                cluster_neighbors = np.where(cluster_labels == cluster_labels[i])[0]\n                if len(cluster_neighbors) > 0:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[cluster_neighbors, gene_idx]))\n            scores.append(np.std(neighbor_exp) if neighbor_exp else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "73701"
            }
        ],
        "738": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            distances, nearest_indices = nbrs.kneighbors(spatial_coords[test_index])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[nearest_indices[i][1:], gene_idx]) for i in range(len(test_index))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        \n        if gene_idx % (num_genes // 10) == 0 or gene_idx == num_genes - 1:\n            print(f\"Gene {gene_idx + 1}/{num_genes}: Mean Score = {np.mean(scores):.4f}, Std Score = {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Gene 1/1050: Mean Score = 0.3146, Std Score = 0.0064\nGene 106/1050: Mean Score = 0.3055, Std Score = 0.0128\nGene 211/1050: Mean Score = 0.3175, Std Score = 0.0041\nGene 316/1050: Mean Score = 0.3561, Std Score = 0.0213\nGene 421/1050: Mean Score = 0.4134, Std Score = 0.0219\nGene 526/1050: Mean Score = 0.3667, Std Score = 0.0166\nGene 631/1050: Mean Score = 0.4263, Std Score = 0.0229\nGene 736/1050: Mean Score = 0.4656, Std Score = 0.0237\nGene 841/1050: Mean Score = 0.3489, Std Score = 0.0135\nGene 946/1050: Mean Score = 0.4650, Std Score = 0.0131\nGene 1050/1050: Mean Score = 0.4742, Std Score = 0.0169",
                "lineage": "73801"
            }
        ],
        "739": [],
        "740": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance.cdist(spatial_coords, spatial_coords)\n    nearest_indices = np.argsort(dist_matrix, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5616789059886249,
                "model_info": "",
                "lineage": "74001"
            }
        ],
        "741": [],
        "742": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.ensemble import VotingRegressor\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge_models = [RidgeCV(alphas=np.logspace(-3, 3, 7)) for _ in range(5)]\n            voting_regressor = VotingRegressor(estimators=[('ridge' + str(i), ridge_models[i]) for i in range(5)])\n            voting_regressor.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "74201"
            }
        ],
        "743": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.mixture import GaussianMixture\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = [scaled_gene_expression[list(G.neighbors(i)), gene_idx] for i in test_index]\n            neighbor_exp = np.concatenate(neighbor_exp) if neighbor_exp else np.array([])\n            if neighbor_exp.size > 0:\n                gmm = GaussianMixture(n_components=2).fit(neighbor_exp.reshape(-1, 1))\n                scores.append(np.std(gmm.predict(neighbor_exp.reshape(-1, 1))))\n            else:\n                scores.append(0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "74301"
            }
        ],
        "744": [],
        "745": [],
        "746": [],
        "747": [],
        "748": [],
        "749": [],
        "750": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.mixture import GaussianMixture\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            gmm = GaussianMixture(n_components=2).fit(neighbor_exp.reshape(-1, 1))\n            scores.append(np.std(gmm.predict(neighbor_exp.reshape(-1, 1))))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "75001"
            }
        ],
        "751": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene {gene_idx+1}/{num_genes}: Spatial Var Score = {spatial_var_score[gene_idx]}, Mean Score = {np.mean(scores)}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Gene 1/1050: Spatial Var Score = 0.0, Mean Score = 0.3074257262500327\nGene 2/1050: Spatial Var Score = 0.0, Mean Score = 0.31549541592329\nGene 3/1050: Spatial Var Score = 0.0, Mean Score = 0.2967363532325261\nGene 4/1050: Spatial Var Score = 0.0, Mean Score = 0.31749287063934306\nGene 5/1050: Spatial Var Score = 0.0, Mean Score = 0.3030607754016251\nGene 6/1050: Spatial Var Score = 0.0, Mean Score = 0.30658370365223175\nGene 7/1050: Spatial Var Score = 0.0, Mean Score = 0.30640971913364573\nGene 8/1050: Spatial Var Score = 0.0, Mean Score = 0.28599341232720477\nGene 9/1050: Spatial Var Score = 0.0, Mean Score = 0.30875466357786363\nGene 10/1050: Spatial Var Score = 0.0, Mean Score = 0.3114618215610831\nGene 11/1050: Spatial Var Score = 0.0, Mean Score = 0.29805043379502594\nGene 12/1050: Spatial Var Score = 0.0, Mean Score = 0.2981869953458521\nGene 13/1050: Spatial Var Score = 0.0, Mean Score = 0.3150880692309549\nGene 14/1050: Spatial Var Score = 0.0, Mean Score = 0.305025103348934\nGene 15/1050: Spatial Var Score = 0.0, Mean Score = 0.3226217693120272\nGene 16/1050: Spatial Var Score = 0.0, Mean Score = 0.29933624858504915\nGene 17/1050: Spatial Var Score = 0.0, Mean Score = 0.2991839552301786\nGene 18/1050: Spatial Var Score = 0.0, Mean Score = 0.3175268622912027\nGene 19/1050: Spatial Var Score = 0.0, Mean Score = 0.3181351270420879\nGene 20/1050: Spatial Var Score = 0.0, Mean Score = 0.3089325898917261\nGene 21/1050: Spatial Var Score = 0.0, Mean Score = 0.2922795002762489\nGene 22/1050: Spatial Var Score = 0.0, Mean Score = 0.3337907149137157\nGene 23/1050: Spatial Var Score = 0.0, Mean Score = 0.2952498535985746\nGene 24/1050: Spatial Var Score = 0.0, Mean Score = 0.3117289042070447\nGene 25/1050: Spatial Var Score = 0.0, Mean Score = 0.3079187589237621\nGene 26/1050: Spatial Var Score = 0.0, Mean Score = 0.29771757403709864\nGene 27/1050: Spatial Var Score = 0.0, Mean Score = 0.31259673830883195\nGene 28/1050: Spatial Var Score = 0.0, Mean Score = 0.30417454243050135\nGene 29/1050: ",
                "lineage": "75101"
            }
        ],
        "752": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5616789059886249,
                "model_info": "",
                "lineage": "75201"
            }
        ],
        "753": [],
        "754": [],
        "755": [],
        "756": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_exp = np.mean(scaled_gene_expression[train_index, gene_idx])\n            variance_ratio = np.var(neighbor_exp) / (np.var(neighbor_exp) + np.var(scaled_gene_expression[train_index, gene_idx]))\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "75601"
            }
        ],
        "757": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    logging.info(\"Using device: %s\", 'CPU')\n    logging.info(\"Library versions - numpy: %s, networkx: %s\", np.__version__, nx.__version__)\n\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n            logging.info(\"Gene %d, Fold mean score: %f\", gene_idx, np.mean(scores))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "75701"
            }
        ],
        "758": [],
        "759": [],
        "760": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Early-stopping criteria satisfaction: {np.mean(scores) > 0.5}, patience counter: {len(scores)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8220823589401833,
                "model_info": "Early-stopping criteria satisfaction: False, patience counter: 5",
                "lineage": "76001"
            }
        ],
        "761": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    calibration_errors = []\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        calibration_errors.append(np.abs(np.mean(scores) - 0.5))\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Calibration error metrics (mean absolute deviation from 0.5): {np.mean(calibration_errors)}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Calibration error metrics (mean absolute deviation from 0.5): 0.12463502031356749",
                "lineage": "76101"
            }
        ],
        "762": [],
        "763": [],
        "764": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        standardized_score = zscore(scores)\n        spatial_var_score[gene_idx] = 1 if np.mean(standardized_score) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.44132722366426147,
                "model_info": "",
                "lineage": "76401"
            }
        ],
        "765": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distances[i])[1:11]\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            if len(neighbor_exp) > 1:\n                corrcoef = np.corrcoef(neighbor_exp)\n                if corrcoef.size > 1:\n                    scores.append(corrcoef[0, 1])\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "76501"
            }
        ],
        "766": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            clustering = DBSCAN(eps=0.5, min_samples=5).fit(spatial_coords[test_index])\n            unique_labels = set(clustering.labels_)\n            neighbor_exp = []\n            for label in unique_labels:\n                if label != -1:\n                    cluster_indices = test_index[clustering.labels_ == label]\n                    neighbor_exp.append(np.mean(scaled_gene_expression[cluster_indices, gene_idx]))\n            scores.append(np.std(neighbor_exp) if neighbor_exp else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "76601"
            }
        ],
        "767": [],
        "768": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import precision_recall_curve\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        true_labels = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.extend(neighbor_exp)\n            true_labels.extend([1 if np.mean(neighbor_exp) > 0.5 else 0] * len(test_index))\n\n        if len(true_labels) > 0 and len(scores) > 0:\n            precision, recall, _ = precision_recall_curve(true_labels, scores)\n            spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5445411319292284,
                "model_info": "",
                "lineage": "76801"
            }
        ],
        "769": [],
        "770": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import precision_recall_curve\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        y_true = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n            y_true.append(1 if np.mean(scores) > 0.5 else 0)\n\n        y_scores = [np.mean(scores) for _ in range(len(y_true))]\n        precision, recall, _ = precision_recall_curve(y_true, y_scores)\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "77001"
            }
        ],
        "771": [],
        "772": [],
        "773": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial.distance import cdist\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distance_matrix = cdist(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distance_matrix[i])[1:11]\n        G.add_edges_from((i, j) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5616789059886249,
                "model_info": "",
                "lineage": "77301"
            }
        ],
        "774": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = pairwise_distances(spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distances[i])[1:11]\n        G.add_edges_from((i, j, {'weight': distances[i][j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8223100038602013,
                "model_info": "",
                "lineage": "77401"
            }
        ],
        "775": [],
        "776": [],
        "777": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import confusion_matrix\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    true_labels = adata.obs[\"true_spatial_var_label\"] if \"true_spatial_var_label\" in adata.obs else np.zeros(spatial_coords.shape[0])\n    pred_labels = np.zeros(spatial_coords.shape[0])\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        pred_labels[gene_idx] = spatial_var_score[gene_idx]\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    pred_labels = pred_labels[:len(true_labels)]\n    cm = confusion_matrix(true_labels, pred_labels)\n    print(\"Confusion Matrix:\\n\", cm)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.824196673846538,
                "model_info": "Confusion Matrix:\n [[1180   83]\n [   0    0]]",
                "lineage": "77701"
            }
        ],
        "778": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        y_true = []\n        y_scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n            y_true.extend([1 if np.mean(scores) > 0.5 else 0] * len(test_index))\n            y_scores.extend(scores)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    adata.uns['roc_auc'] = roc_auc_score(y_true, y_scores)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "77801"
            }
        ],
        "779": [],
        "780": [],
        "781": [],
        "782": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            if len(neighbor_exp) > 0:\n                scores.append(np.std(neighbor_exp))\n            else:\n                scores.append(0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "78201"
            }
        ],
        "783": [],
        "784": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    spatial_density = np.zeros(spatial_coords.shape[0])\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        spatial_density[i] = np.sum(distances < 1)  # Adjust threshold as needed\n\n    adata.obs['spatial_density'] = spatial_density\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "78401"
            }
        ],
        "785": [],
        "786": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    noise = np.random.normal(0, 0.1, scaled_gene_expression.shape)\n    scaled_gene_expression += noise\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "78601"
            }
        ],
        "787": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "78701"
            }
        ],
        "788": [],
        "789": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    log_transformer = FunctionTransformer(np.log1p, validate=True)\n    scaled_gene_expression = log_transformer.fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "78901"
            }
        ],
        "790": [],
        "791": [],
        "792": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene {gene_idx}: Mean Score {np.mean(scores):.4f}, Std Dev of Neighbor Exp {np.std(neighbor_exp):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8245406426234717,
                "model_info": "Gene 0: Mean Score 0.3071, Std Dev of Neighbor Exp 0.3110\nGene 1: Mean Score 0.3156, Std Dev of Neighbor Exp 0.3218\nGene 2: Mean Score 0.2965, Std Dev of Neighbor Exp 0.3022\nGene 3: Mean Score 0.3173, Std Dev of Neighbor Exp 0.3035\nGene 4: Mean Score 0.3017, Std Dev of Neighbor Exp 0.3033\nGene 5: Mean Score 0.3067, Std Dev of Neighbor Exp 0.2888\nGene 6: Mean Score 0.3059, Std Dev of Neighbor Exp 0.2794\nGene 7: Mean Score 0.2862, Std Dev of Neighbor Exp 0.2901\nGene 8: Mean Score 0.3082, Std Dev of Neighbor Exp 0.2928\nGene 9: Mean Score 0.3108, Std Dev of Neighbor Exp 0.3060\nGene 10: Mean Score 0.2982, Std Dev of Neighbor Exp 0.3090\nGene 11: Mean Score 0.2978, Std Dev of Neighbor Exp 0.2750\nGene 12: Mean Score 0.3149, Std Dev of Neighbor Exp 0.3233\nGene 13: Mean Score 0.3050, Std Dev of Neighbor Exp 0.3273\nGene 14: Mean Score 0.3226, Std Dev of Neighbor Exp 0.3051\nGene 15: Mean Score 0.2986, Std Dev of Neighbor Exp 0.2936\nGene 16: Mean Score 0.2992, Std Dev of Neighbor Exp 0.3038\nGene 17: Mean Score 0.3168, Std Dev of Neighbor Exp 0.3061\nGene 18: Mean Score 0.3177, Std Dev of Neighbor Exp 0.3368\nGene 19: Mean Score 0.3079, Std Dev of Neighbor Exp 0.3114\nGene 20: Mean Score 0.2918, Std Dev of Neighbor Exp 0.2980\nGene 21: Mean Score 0.3344, Std Dev of Neighbor Exp 0.3291\nGene 22: Mean Score 0.2944, Std Dev of Neighbor Exp 0.3018\nGene 23: Mean Score 0.3119, Std Dev of Neighbor Exp 0.3172\nGene 24: Mean Score 0.3074, Std Dev of Neighbor Exp 0.3106\nGene 25: Mean Score 0.2976, Std Dev of Neighbor Exp 0.3004\nGene 26: Mean Score 0.3128, Std Dev of Neighbor Exp 0.3297\nGene 27: Mean Score 0.3031, Std Dev of Neighbor Exp 0.3157\nGene 28: Mean Score 0.2891, Std Dev of Neighbor Exp 0.2927\nGene 29: Mean Score 0.3039, Std Dev of Neighbor Exp 0.2907\nGene 30: Mean Score 0.2926, Std Dev of Neighbor Exp 0.2978\nGene 31: Mean Score 0.3173, Std Dev of Neighbor Exp 0.3273\nGene 32: Mean Score 0.3076, Std Dev of Neighbor Exp 0.3136\nGene 33: Mean Score 0.3063, Std Dev of Neighbor Exp 0.2915\nGene",
                "lineage": "79201"
            }
        ],
        "793": [],
        "794": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if gene_idx % 10 == 0: \n            print(f\"Processed gene {gene_idx}/{num_genes}, current score: {spatial_var_score[gene_idx]}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Processed gene 0/1050, current score: 0.0\nProcessed gene 10/1050, current score: 0.0\nProcessed gene 20/1050, current score: 0.0\nProcessed gene 30/1050, current score: 0.0\nProcessed gene 40/1050, current score: 0.0\nProcessed gene 50/1050, current score: 0.0\nProcessed gene 60/1050, current score: 0.0\nProcessed gene 70/1050, current score: 0.0\nProcessed gene 80/1050, current score: 0.0\nProcessed gene 90/1050, current score: 0.0\nProcessed gene 100/1050, current score: 0.0\nProcessed gene 110/1050, current score: 0.0\nProcessed gene 120/1050, current score: 0.0\nProcessed gene 130/1050, current score: 0.0\nProcessed gene 140/1050, current score: 0.0\nProcessed gene 150/1050, current score: 0.0\nProcessed gene 160/1050, current score: 0.0\nProcessed gene 170/1050, current score: 0.0\nProcessed gene 180/1050, current score: 0.0\nProcessed gene 190/1050, current score: 0.0\nProcessed gene 200/1050, current score: 0.0\nProcessed gene 210/1050, current score: 0.0\nProcessed gene 220/1050, current score: 0.0\nProcessed gene 230/1050, current score: 0.0\nProcessed gene 240/1050, current score: 0.0\nProcessed gene 250/1050, current score: 0.0\nProcessed gene 260/1050, current score: 0.0\nProcessed gene 270/1050, current score: 0.0\nProcessed gene 280/1050, current score: 0.0\nProcessed gene 290/1050, current score: 0.0\nProcessed gene 300/1050, current score: 0.0\nProcessed gene 310/1050, current score: 0.0\nProcessed gene 320/1050, current score: 0.0\nProcessed gene 330/1050, current score: 0.0\nProcessed gene 340/1050, current score: 0.0\nProcessed gene 350/1050, current score: 0.0\nProcessed gene 360/1050, current score: 0.0\nProcessed gene 370/1050, current score: 0.0\nProcessed gene 380/1050, current score: 0.0\nProcessed gene 390/1050, current score: 0.0\nProcessed gene 400/1050, current score: 0.0\nProcessed gene 410/1050, current score: 0.0\nProcessed gene 420/1050, current score: 0.0\nProcessed gene 430/1050, current score: 0.0\nProcessed gene 440/1050, current score: 0.0\nProcessed gene 450/1050, curren",
                "lineage": "79401"
            }
        ],
        "795": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = pairwise_distances(spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distances[i])[1:11]\n        G.add_edges_from((i, j) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if len(list(G.neighbors(i))) > 0 else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "79501"
            }
        ],
        "796": [],
        "797": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, k]}) for k, j in enumerate(indices[i][1:]))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n            print(f\"Gene {gene_idx}, Epoch {len(scores)}, Loss: {np.mean(scores):.4f}, Validation Score: {np.std(neighbor_exp):.4f}\")\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Gene 0, Epoch 1, Loss: 0.3069, Validation Score: 0.3069\nGene 0, Epoch 2, Loss: 0.3094, Validation Score: 0.3120\nGene 0, Epoch 3, Loss: 0.3081, Validation Score: 0.3054\nGene 0, Epoch 4, Loss: 0.3063, Validation Score: 0.3011\nGene 0, Epoch 5, Loss: 0.3074, Validation Score: 0.3118\nGene 1, Epoch 1, Loss: 0.3265, Validation Score: 0.3265\nGene 1, Epoch 2, Loss: 0.3103, Validation Score: 0.2941\nGene 1, Epoch 3, Loss: 0.3135, Validation Score: 0.3198\nGene 1, Epoch 4, Loss: 0.3140, Validation Score: 0.3155\nGene 1, Epoch 5, Loss: 0.3155, Validation Score: 0.3215\nGene 2, Epoch 1, Loss: 0.2895, Validation Score: 0.2895\nGene 2, Epoch 2, Loss: 0.2995, Validation Score: 0.3095\nGene 2, Epoch 3, Loss: 0.2988, Validation Score: 0.2972\nGene 2, Epoch 4, Loss: 0.2953, Validation Score: 0.2849\nGene 2, Epoch 5, Loss: 0.2967, Validation Score: 0.3025\nGene 3, Epoch 1, Loss: 0.3043, Validation Score: 0.3043\nGene 3, Epoch 2, Loss: 0.3196, Validation Score: 0.3349\nGene 3, Epoch 3, Loss: 0.3202, Validation Score: 0.3214\nGene 3, Epoch 4, Loss: 0.3209, Validation Score: 0.3228\nGene 3, Epoch 5, Loss: 0.3175, Validation Score: 0.3039\nGene 4, Epoch 1, Loss: 0.3105, Validation Score: 0.3105\nGene 4, Epoch 2, Loss: 0.3054, Validation Score: 0.3003\nGene 4, Epoch 3, Loss: 0.3035, Validation Score: 0.2996\nGene 4, Epoch 4, Loss: 0.3028, Validation Score: 0.3009\nGene 4, Epoch 5, Loss: 0.3031, Validation Score: 0.3041\nGene 5, Epoch 1, Loss: 0.3013, Validation Score: 0.3013\nGene 5, Epoch 2, Loss: 0.3163, Validation Score: 0.3313\nGene 5, Epoch 3, Loss: 0.3125, Validation Score: 0.3048\nGene 5, Epoch 4, Loss: 0.3112, Validation Score: 0.3072\nGene 5, Epoch 5, Loss: 0.3066, Validation Score: 0.2882\nGene 6, Epoch 1, Loss: 0.3139, Validation Score: 0.3139\nGene 6, Epoch 2, Loss: 0.3103, Validation Score: 0.3067\nGene 6, Epoch 3, Loss: 0.3220, Validation Score: 0.3455\nGene 6, Epoch 4, Loss: 0.3131, Validation Score: 0.2865\nGene 6, Epoch 5, Loss: 0.3064, Validation Score: 0.2795\nGene 7, Epoch 1, Loss: 0.2813, Validatio",
                "lineage": "79701"
            }
        ],
        "798": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            if len(neighbor_exp) > 1:\n                scores.append(silhouette_score(scaled_gene_expression[test_index], neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "79801"
            }
        ],
        "799": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = pairwise_distances(spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distances[i])[1:11]\n        G.add_edges_from((i, j, {'weight': 1 / (distances[i][j] + 1e-10)}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8223100038602013,
                "model_info": "",
                "lineage": "79901"
            }
        ],
        "800": [],
        "801": [],
        "802": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        \n        if np.mean(scores) <= 0.5:\n            print(f\"Warning: Gene index {gene_idx} has low variability score.\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Warning: Gene index 0 has low variability score.\nWarning: Gene index 1 has low variability score.\nWarning: Gene index 2 has low variability score.\nWarning: Gene index 3 has low variability score.\nWarning: Gene index 4 has low variability score.\nWarning: Gene index 5 has low variability score.\nWarning: Gene index 6 has low variability score.\nWarning: Gene index 7 has low variability score.\nWarning: Gene index 8 has low variability score.\nWarning: Gene index 9 has low variability score.\nWarning: Gene index 10 has low variability score.\nWarning: Gene index 11 has low variability score.\nWarning: Gene index 12 has low variability score.\nWarning: Gene index 13 has low variability score.\nWarning: Gene index 14 has low variability score.\nWarning: Gene index 15 has low variability score.\nWarning: Gene index 16 has low variability score.\nWarning: Gene index 17 has low variability score.\nWarning: Gene index 18 has low variability score.\nWarning: Gene index 19 has low variability score.\nWarning: Gene index 20 has low variability score.\nWarning: Gene index 21 has low variability score.\nWarning: Gene index 22 has low variability score.\nWarning: Gene index 23 has low variability score.\nWarning: Gene index 24 has low variability score.\nWarning: Gene index 25 has low variability score.\nWarning: Gene index 26 has low variability score.\nWarning: Gene index 27 has low variability score.\nWarning: Gene index 28 has low variability score.\nWarning: Gene index 29 has low variability score.\nWarning: Gene index 30 has low variability score.\nWarning: Gene index 31 has low variability score.\nWarning: Gene index 32 has low variability score.\nWarning: Gene index 33 has low variability score.\nWarning: Gene index 34 has low variability score.\nWarning: Gene index 35 has low variability score.\nWarning: Gene index 36 has low variability score.\nWarning: Gene index 37 has low variability score.\nWarning: Gene index 38 has low variability score.\nWarning: Gene index 39 has low variability score.\nWarning: G",
                "lineage": "80201"
            }
        ],
        "803": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            total_variance = np.var(scaled_gene_expression[:, gene_idx])\n            local_variance = np.var(neighbor_exp)\n            variance_ratio = local_variance / total_variance if total_variance > 0 else 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "80301"
            }
        ],
        "804": [],
        "805": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler, QuantileTransformer\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = quantile_transformer.fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "80501"
            }
        ],
        "806": [],
        "807": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    print(f\"Model diagnostics: Mean spatial variance score: {np.mean(spatial_var_score)}, Top features: {np.argsort(spatial_var_score)[-5:]}\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Model diagnostics: Mean spatial variance score: 0.06666666666666667, Top features: [963 958 957 956 955]",
                "lineage": "80701"
            }
        ],
        "808": [],
        "809": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial.distance import cdist\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = cdist(spatial_coords, spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5616789059886249,
                "model_info": "",
                "lineage": "80901"
            }
        ],
        "810": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        if np.std(scores) < 0.1:\n            print(f\"Warning: Low variability detected for gene index {gene_idx}. Consider reviewing data quality.\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Warning: Low variability detected for gene index 0. Consider reviewing data quality.\nWarning: Low variability detected for gene index 1. Consider reviewing data quality.\nWarning: Low variability detected for gene index 2. Consider reviewing data quality.\nWarning: Low variability detected for gene index 3. Consider reviewing data quality.\nWarning: Low variability detected for gene index 4. Consider reviewing data quality.\nWarning: Low variability detected for gene index 5. Consider reviewing data quality.\nWarning: Low variability detected for gene index 6. Consider reviewing data quality.\nWarning: Low variability detected for gene index 7. Consider reviewing data quality.\nWarning: Low variability detected for gene index 8. Consider reviewing data quality.\nWarning: Low variability detected for gene index 9. Consider reviewing data quality.\nWarning: Low variability detected for gene index 10. Consider reviewing data quality.\nWarning: Low variability detected for gene index 11. Consider reviewing data quality.\nWarning: Low variability detected for gene index 12. Consider reviewing data quality.\nWarning: Low variability detected for gene index 13. Consider reviewing data quality.\nWarning: Low variability detected for gene index 14. Consider reviewing data quality.\nWarning: Low variability detected for gene index 15. Consider reviewing data quality.\nWarning: Low variability detected for gene index 16. Consider reviewing data quality.\nWarning: Low variability detected for gene index 17. Consider reviewing data quality.\nWarning: Low variability detected for gene index 18. Consider reviewing data quality.\nWarning: Low variability detected for gene index 19. Consider reviewing data quality.\nWarning: Low variability detected for gene index 20. Consider reviewing data quality.\nWarning: Low variability detected for gene index 21. Consider reviewing data quality.\nWarning: Low variability detected for gene index 22. Consider reviewing data quality.\nWarning: Low variability detecte",
                "lineage": "81001"
            }
        ],
        "811": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            spatial_var_score[gene_idx] = 1 if np.std(neighbor_exp) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826101443768997,
                "model_info": "",
                "lineage": "81101"
            }
        ],
        "812": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            spatial_var = np.var(neighbor_exp)\n            total_var = np.var(scaled_gene_expression[train_index, gene_idx])\n            scores.append(spatial_var / total_var if total_var > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "81201"
            }
        ],
        "813": [],
        "814": [],
        "815": [],
        "816": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='auto').fit(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    low_confidence_count = 0\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            distances, nearest_indices = nbrs.kneighbors(spatial_coords[test_index])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[nearest_indices[j], gene_idx]) for j in range(len(test_index))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if spatial_var_score[gene_idx] == 0:\n            low_confidence_count += 1\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Low-confidence predictions: {low_confidence_count}/{num_genes} ({(low_confidence_count/num_genes)*100:.2f}%)\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826101443768997,
                "model_info": "Low-confidence predictions: 974/1050 (92.76%)",
                "lineage": "81601"
            }
        ],
        "817": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    density_scores = np.zeros(spatial_coords.shape[0])\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        density_scores[i] = np.sum(distances < 1.0)\n\n    adata.obs['spatial_density'] = density_scores\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "81701"
            }
        ],
        "818": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    print(f\"Dataset Statistics: {num_genes} genes, {spatial_coords.shape[0]} cells.\")\n    print(f\"Gene Expression Shape: {gene_expression.shape}.\")\n    \n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Dataset Statistics: 1050 genes, 1263 cells.\nGene Expression Shape: (1263, 1050).",
                "lineage": "81801"
            }
        ],
        "819": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            distances = np.linalg.norm(spatial_coords[test_index][:, np.newaxis] - spatial_coords[train_index], axis=2)\n            nearest_indices = np.argsort(distances, axis=1)[:, :10]\n            neighbor_exp = np.mean(scaled_gene_expression[train_index][nearest_indices], axis=1)\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "81901"
            }
        ],
        "820": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    validation_metrics = []\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        mean_score = np.mean(scores)\n        spatial_var_score[gene_idx] = 1 if mean_score > 0.5 else 0\n        validation_metrics.append(mean_score)\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Validation Metrics: {validation_metrics}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Validation Metrics: [0.3076987827178844, 0.3133506897429231, 0.2974183275280776, 0.31657257675803196, 0.3027171557893794, 0.3069114096213271, 0.3064608397740318, 0.2856795244469658, 0.30772132368288807, 0.3114973073955138, 0.29804102625208373, 0.29755943385380723, 0.31499830151931996, 0.3041609315078687, 0.32138730328265425, 0.29850619757299524, 0.29913875360036746, 0.31609812235164486, 0.31754560312303776, 0.3075235435670835, 0.2936692710532388, 0.33373787145497713, 0.2961935455105696, 0.31137071358237894, 0.3075354844032545, 0.2972899685091281, 0.31271532855612644, 0.3010819085593851, 0.28845401602503734, 0.30472474964218393, 0.29326599495450884, 0.3163616474051299, 0.30805200606709604, 0.30674985112473074, 0.29984106489108275, 0.3135456854610876, 0.3064855806844076, 0.3158747354383558, 0.31463437603577477, 0.2795839756766324, 0.30351980685991753, 0.29853373532615723, 0.3084899190682638, 0.29201847949753434, 0.30259543285678264, 0.305728324625351, 0.32953231618306467, 0.29739544244177124, 0.3131019645908998, 0.3192356355193242, 0.32407288940552925, 0.30321087262841995, 0.3099909654966013, 0.29991352308865177, 0.30193886412607884, 0.2923530903447927, 0.3124373568357134, 0.2823233579076574, 0.3305584970306602, 0.29527535240831093, 0.313660564430896, 0.3080564278431758, 0.29123966533545753, 0.29768063815719487, 0.3001541953970364, 0.29085009176761567, 0.30339279237953076, 0.32112479771940117, 0.29546471313879996, 0.29809010943173775, 0.3092663130744742, 0.3003233155832441, 0.30850291759738313, 0.31979411280746106, 0.28656857456940316, 0.3133456266894121, 0.2920370275548657, 0.31017176198248997, 0.30408546546218185, 0.3139919622452546, 0.3104505439412534, 0.2895664217108494, 0.2901627008069033, 0.3223273621346897, 0.3046983799419981, 0.3128257024302947, 0.32748795837661127, 0.29747622038363364, 0.2805725167527993, 0.3164539796945906, 0.3163682917990721, 0.3128172672132704, 0.3315782290562073, 0.2976801973484918, 0.31381751436717753, 0.31278156107781463, 0.299617813037",
                "lineage": "82001"
            }
        ],
        "821": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.cluster import KMeans\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    kmeans = KMeans(n_clusters=5)\n    spatial_clusters = kmeans.fit_predict(spatial_coords)\n\n    for i in range(spatial_coords.shape[0]):\n        cluster_indices = np.where(spatial_clusters == spatial_clusters[i])[0]\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords[cluster_indices], axis=1)\n        nearest_indices = cluster_indices[np.argsort(distances)[1:11]]\n        G.add_edges_from((i, j, {'weight': distances[np.where(cluster_indices == j)[0][0]]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8161526843922495,
                "model_info": "",
                "lineage": "82101"
            }
        ],
        "822": [],
        "823": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        neighbor_exp = np.zeros(spatial_coords.shape[0])\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp[test_index] = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n\n        spatial_var_score[gene_idx] = 1 if np.std(neighbor_exp) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8305246465018403,
                "model_info": "",
                "lineage": "82301"
            }
        ],
        "824": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n            if neighbor_exp:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "82401"
            }
        ],
        "825": [],
        "826": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = pairwise_distances(spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distances[i])[1:11]\n        G.add_edges_from((i, j, {'weight': distances[i][j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5609630885940822,
                "model_info": "",
                "lineage": "82601"
            }
        ],
        "827": [],
        "828": [],
        "829": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    jitter = np.random.normal(0, 0.1, spatial_coords.shape)\n    spatial_coords_jittered = spatial_coords + jitter\n\n    G_jittered = nx.Graph()\n    G_jittered.add_nodes_from(range(spatial_coords_jittered.shape[0]))\n    for i in range(spatial_coords_jittered.shape[0]):\n        distances = np.linalg.norm(spatial_coords_jittered[i] - spatial_coords_jittered, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G_jittered.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords_jittered, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords_jittered[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G_jittered.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8305246465018403,
                "model_info": "",
                "lineage": "82901"
            }
        ],
        "830": [],
        "831": [],
        "832": [],
        "833": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    print(f\"Model Hyperparameters: RidgeCV alphas: {np.logspace(-3, 3, 7)}\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Model Hyperparameters: RidgeCV alphas: [1.e-03 1.e-02 1.e-01 1.e+00 1.e+01 1.e+02 1.e+03]",
                "lineage": "83301"
            }
        ],
        "834": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11).fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    print(\"Key Assumptions: Independence of observations, Normality of residuals, Feature distributions suitable for Ridge regression.\")\n    \n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Key Assumptions: Independence of observations, Normality of residuals, Feature distributions suitable for Ridge regression.",
                "lineage": "83401"
            }
        ],
        "835": [],
        "836": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n            logging.info(f'Gene {gene_idx}, Fold scores: {scores[-1]}, Gradient norm: {np.linalg.norm(ridge.coef_)}')\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "83601"
            }
        ],
        "837": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            if len(neighbor_exp) > 1:\n                labels = np.array([1] * len(train_index) + [0] * len(test_index))\n                combined_exp = np.concatenate([scaled_gene_expression[train_index, gene_idx], neighbor_exp])\n                scores.append(silhouette_score(combined_exp.reshape(-1, 1), labels))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "83701"
            }
        ],
        "838": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            spatial_variance = np.var(neighbor_exp)\n            total_variance = np.var(scaled_gene_expression[:, gene_idx])\n            if total_variance > 0:\n                variance_ratio = spatial_variance / total_variance\n            else:\n                variance_ratio = 0\n            scores.append(variance_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.75 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "83801"
            }
        ],
        "839": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[test_index[np.where(adata.obs[\"annotation\"][test_index] == label)], gene_idx]) for label in np.unique(adata.obs[\"annotation\"])])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7577202763319213,
                "model_info": "",
                "lineage": "83901"
            }
        ],
        "840": [],
        "841": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp) / np.std(scaled_gene_expression[train_index, gene_idx]))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "84101"
            }
        ],
        "842": [],
        "843": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\nimport networkx as nx\n\ndef tuso_model(adata):\n    print(\"Starting model with configuration: StandardScaler, RidgeCV, QuantileTransformer\")\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    print(\"Gene expression scaled. Number of genes:\", num_genes)\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, indices[i][j], {'weight': distances[i][j]}) for j in range(1, 11))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Model completed. Spatially variable genes identified.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8234215519375754,
                "model_info": "Starting model with configuration: StandardScaler, RidgeCV, QuantileTransformer\nGene expression scaled. Number of genes: 1050\nModel completed. Spatially variable genes identified.",
                "lineage": "84301"
            }
        ],
        "844": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n                else:\n                    neighbor_exp.append(0)\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "84401"
            }
        ],
        "845": [],
        "846": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    low_confidence_count = 0\n    total_count = 0\n    misclassified_examples = []\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        \n        if spatial_var_score[gene_idx] == 0:\n            low_confidence_count += 1\n            total_count += 1\n            misclassified_examples.append((gene_idx, np.mean(scores)))\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    if total_count > 0:\n        print(f'Percentage of low-confidence predictions: {low_confidence_count / total_count * 100:.2f}%')\n        for example in misclassified_examples:\n            print(f'Misclassified Gene {example[0]} with score {example[1]:.4f}')\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Percentage of low-confidence predictions: 100.00%\nMisclassified Gene 0 with score 0.3077\nMisclassified Gene 1 with score 0.3134\nMisclassified Gene 2 with score 0.2974\nMisclassified Gene 3 with score 0.3166\nMisclassified Gene 4 with score 0.3027\nMisclassified Gene 5 with score 0.3069\nMisclassified Gene 6 with score 0.3065\nMisclassified Gene 7 with score 0.2857\nMisclassified Gene 8 with score 0.3077\nMisclassified Gene 9 with score 0.3115\nMisclassified Gene 10 with score 0.2980\nMisclassified Gene 11 with score 0.2976\nMisclassified Gene 12 with score 0.3150\nMisclassified Gene 13 with score 0.3042\nMisclassified Gene 14 with score 0.3214\nMisclassified Gene 15 with score 0.2985\nMisclassified Gene 16 with score 0.2991\nMisclassified Gene 17 with score 0.3161\nMisclassified Gene 18 with score 0.3175\nMisclassified Gene 19 with score 0.3075\nMisclassified Gene 20 with score 0.2937\nMisclassified Gene 21 with score 0.3337\nMisclassified Gene 22 with score 0.2962\nMisclassified Gene 23 with score 0.3114\nMisclassified Gene 24 with score 0.3075\nMisclassified Gene 25 with score 0.2973\nMisclassified Gene 26 with score 0.3127\nMisclassified Gene 27 with score 0.3011\nMisclassified Gene 28 with score 0.2885\nMisclassified Gene 29 with score 0.3047\nMisclassified Gene 30 with score 0.2933\nMisclassified Gene 31 with score 0.3164\nMisclassified Gene 32 with score 0.3081\nMisclassified Gene 33 with score 0.3067\nMisclassified Gene 34 with score 0.2998\nMisclassified Gene 35 with score 0.3135\nMisclassified Gene 36 with score 0.3065\nMisclassified Gene 37 with score 0.3159\nMisclassified Gene 38 with score 0.3146\nMisclassified Gene 39 with score 0.2796\nMisclassified Gene 40 with score 0.3035\nMisclassified Gene 41 with score 0.2985\nMisclassified Gene 42 with score 0.3085\nMisclassified Gene 43 with score 0.2920\nMisclassified Gene 44 with score 0.3026\nMisclassified Gene 45 with score 0.3057\nMisclassified Gene 46 with score 0.3295\nMisclassified Gene 47 with score 0.2974\nMisclassified Gene 48 with score 0.3131\n",
                "lineage": "84601"
            }
        ],
        "847": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='auto').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    performance_snapshots = []\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        if gene_idx % 10 == 0:\n            performance_snapshots.append((gene_idx, spatial_var_score[gene_idx]))\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(\"Performance Snapshots:\", performance_snapshots)\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "Performance Snapshots: [(0, 0.0), (10, 0.0), (20, 0.0), (30, 0.0), (40, 0.0), (50, 0.0), (60, 0.0), (70, 0.0), (80, 0.0), (90, 0.0), (100, 0.0), (110, 0.0), (120, 0.0), (130, 0.0), (140, 0.0), (150, 0.0), (160, 0.0), (170, 0.0), (180, 0.0), (190, 0.0), (200, 0.0), (210, 0.0), (220, 0.0), (230, 0.0), (240, 0.0), (250, 0.0), (260, 0.0), (270, 0.0), (280, 0.0), (290, 0.0), (300, 0.0), (310, 0.0), (320, 0.0), (330, 0.0), (340, 0.0), (350, 0.0), (360, 0.0), (370, 0.0), (380, 0.0), (390, 0.0), (400, 0.0), (410, 0.0), (420, 0.0), (430, 0.0), (440, 0.0), (450, 0.0), (460, 0.0), (470, 0.0), (480, 0.0), (490, 0.0), (500, 0.0), (510, 0.0), (520, 0.0), (530, 0.0), (540, 0.0), (550, 0.0), (560, 0.0), (570, 0.0), (580, 0.0), (590, 0.0), (600, 0.0), (610, 0.0), (620, 0.0), (630, 0.0), (640, 0.0), (650, 0.0), (660, 0.0), (670, 0.0), (680, 0.0), (690, 0.0), (700, 0.0), (710, 0.0), (720, 0.0), (730, 0.0), (740, 0.0), (750, 0.0), (760, 0.0), (770, 0.0), (780, 0.0), (790, 0.0), (800, 0.0), (810, 0.0), (820, 0.0), (830, 0.0), (840, 0.0), (850, 0.0), (860, 0.0), (870, 1.0), (880, 0.0), (890, 0.0), (900, 0.0), (910, 0.0), (920, 1.0), (930, 1.0), (940, 0.0), (950, 0.0), (960, 0.0), (970, 1.0), (980, 1.0), (990, 0.0), (1000, 0.0), (1010, 0.0), (1020, 0.0), (1030, 1.0), (1040, 0.0)]",
                "lineage": "84701"
            }
        ],
        "848": [],
        "849": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import cKDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tree = cKDTree(spatial_coords)\n    k = 10\n    neighbors = tree.query(spatial_coords, k=k+1)[1][:, 1:]\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j) for j in neighbors[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        if np.mean(scores) <= 0.5:\n            print(f\"Warning: Gene index {gene_idx} has a low spatial variability score.\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8223100038602013,
                "model_info": "Warning: Gene index 0 has a low spatial variability score.\nWarning: Gene index 1 has a low spatial variability score.\nWarning: Gene index 2 has a low spatial variability score.\nWarning: Gene index 3 has a low spatial variability score.\nWarning: Gene index 4 has a low spatial variability score.\nWarning: Gene index 5 has a low spatial variability score.\nWarning: Gene index 6 has a low spatial variability score.\nWarning: Gene index 7 has a low spatial variability score.\nWarning: Gene index 8 has a low spatial variability score.\nWarning: Gene index 9 has a low spatial variability score.\nWarning: Gene index 10 has a low spatial variability score.\nWarning: Gene index 11 has a low spatial variability score.\nWarning: Gene index 12 has a low spatial variability score.\nWarning: Gene index 13 has a low spatial variability score.\nWarning: Gene index 14 has a low spatial variability score.\nWarning: Gene index 15 has a low spatial variability score.\nWarning: Gene index 16 has a low spatial variability score.\nWarning: Gene index 17 has a low spatial variability score.\nWarning: Gene index 18 has a low spatial variability score.\nWarning: Gene index 19 has a low spatial variability score.\nWarning: Gene index 20 has a low spatial variability score.\nWarning: Gene index 21 has a low spatial variability score.\nWarning: Gene index 22 has a low spatial variability score.\nWarning: Gene index 23 has a low spatial variability score.\nWarning: Gene index 24 has a low spatial variability score.\nWarning: Gene index 25 has a low spatial variability score.\nWarning: Gene index 26 has a low spatial variability score.\nWarning: Gene index 27 has a low spatial variability score.\nWarning: Gene index 28 has a low spatial variability score.\nWarning: Gene index 29 has a low spatial variability score.\nWarning: Gene index 30 has a low spatial variability score.\nWarning: Gene index 31 has a low spatial variability score.\nWarning: Gene index 32 has a low spatial variability score.\nWarning: Gene index 33 has a l",
                "lineage": "84901"
            }
        ],
        "850": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial import distance\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    dist_matrix = distance.cdist(spatial_coords, spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(dist_matrix[i])[1:11]\n        G.add_edges_from((i, j, {'weight': dist_matrix[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5445411319292284,
                "model_info": "",
                "lineage": "85001"
            }
        ],
        "851": [],
        "852": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        threshold = np.std(scaled_gene_expression[:, gene_idx])\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > threshold else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "85201"
            }
        ],
        "853": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.cluster import SpectralClustering\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = SpectralClustering(n_clusters=5, affinity='nearest_neighbors', n_neighbors=10)\n    labels = clustering.fit_predict(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        weights = np.exp(-distances[nearest_indices])\n        G.add_edges_from((i, j, {'weight': weights[k]}) for k, j in enumerate(nearest_indices))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8316484267413112,
                "model_info": "",
                "lineage": "85301"
            }
        ],
        "854": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[train_index, gene_idx][np.linalg.norm(spatial_coords[train_index] - spatial_coords[i], axis=1) < 1]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "85401"
            }
        ],
        "855": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        weights = np.exp(-distances[nearest_indices])\n        G.add_edges_from((i, j, {'weight': weights[k]}) for k, j in enumerate(nearest_indices))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if list(G.neighbors(i))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "85501"
            }
        ],
        "856": [],
        "857": [],
        "858": [],
        "859": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.cluster import AgglomerativeClustering\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = AgglomerativeClustering(n_clusters=10)\n    cluster_labels = clustering.fit_predict(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[cluster_labels == cluster_label, gene_idx]) \n                                      for cluster_label in np.unique(cluster_labels) \n                                      if cluster_label in cluster_labels[test_index]])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7303214106856684,
                "model_info": "",
                "lineage": "85901"
            }
        ],
        "860": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    jittered_coords = spatial_coords + np.random.normal(0, 0.1, spatial_coords.shape)\n    G_jittered = nx.Graph()\n    G_jittered.add_nodes_from(range(jittered_coords.shape[0]))\n    for i in range(jittered_coords.shape[0]):\n        distances = np.linalg.norm(jittered_coords[i] - jittered_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G_jittered.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    for gene_idx in range(num_genes):\n        scores_jittered = []\n        for train_index, test_index in skf.split(jittered_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(jittered_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp_jittered = np.array([np.mean(scaled_gene_expression[list(G_jittered.neighbors(i)), gene_idx]) for i in test_index])\n            scores_jittered.append(np.std(neighbor_exp_jittered))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores_jittered) > 0.5 else spatial_var_score[gene_idx]\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8294082352101431,
                "model_info": "",
                "lineage": "86001"
            }
        ],
        "861": [],
        "862": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    print(\"Before scaling - Mean:\", np.mean(gene_expression, axis=0), \"Std:\", np.std(gene_expression, axis=0), \"Min:\", np.min(gene_expression, axis=0), \"Max:\", np.max(gene_expression, axis=0))\n    print(\"After scaling - Mean:\", np.mean(scaled_gene_expression, axis=0), \"Std:\", np.std(scaled_gene_expression, axis=0), \"Min:\", np.min(scaled_gene_expression, axis=0), \"Max:\", np.max(scaled_gene_expression, axis=0))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Before scaling - Mean: [2.43863816 2.53760887 0.09580364 ... 0.4631829  0.05621536 0.91132225] Std: [1.63177923 1.72815252 0.40131194 ... 0.79389895 0.25011274 1.04228421] Min: [0. 0. 0. ... 0. 0. 0.] Max: [10. 10.  5. ...  7.  2.  7.]\nAfter scaling - Mean: [1.69520231 1.70045558 0.27362924 ... 0.69781234 0.23292332 1.08818184] Std: [1. 1. 1. ... 1. 1. 1.] Min: [0. 0. 0. ... 0. 0. 0.] Max: [3.42605715 3.43216112 4.06725948 ... 2.53104615 4.64186341 2.68683865]",
                "lineage": "86201"
            }
        ],
        "863": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        \n        print(f\"Gene {gene_idx}: Mean Score = {np.mean(scores):.4f}, Std Dev = {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Mean Score = 0.3077, Std Dev = 0.0033\nGene 1: Mean Score = 0.3134, Std Dev = 0.0122\nGene 2: Mean Score = 0.2974, Std Dev = 0.0087\nGene 3: Mean Score = 0.3166, Std Dev = 0.0114\nGene 4: Mean Score = 0.3027, Std Dev = 0.0030\nGene 5: Mean Score = 0.3069, Std Dev = 0.0137\nGene 6: Mean Score = 0.3065, Std Dev = 0.0243\nGene 7: Mean Score = 0.2857, Std Dev = 0.0043\nGene 8: Mean Score = 0.3077, Std Dev = 0.0126\nGene 9: Mean Score = 0.3115, Std Dev = 0.0156\nGene 10: Mean Score = 0.2980, Std Dev = 0.0121\nGene 11: Mean Score = 0.2976, Std Dev = 0.0116\nGene 12: Mean Score = 0.3150, Std Dev = 0.0061\nGene 13: Mean Score = 0.3042, Std Dev = 0.0119\nGene 14: Mean Score = 0.3214, Std Dev = 0.0113\nGene 15: Mean Score = 0.2985, Std Dev = 0.0124\nGene 16: Mean Score = 0.2991, Std Dev = 0.0132\nGene 17: Mean Score = 0.3161, Std Dev = 0.0189\nGene 18: Mean Score = 0.3175, Std Dev = 0.0140\nGene 19: Mean Score = 0.3075, Std Dev = 0.0131\nGene 20: Mean Score = 0.2937, Std Dev = 0.0102\nGene 21: Mean Score = 0.3337, Std Dev = 0.0090\nGene 22: Mean Score = 0.2962, Std Dev = 0.0150\nGene 23: Mean Score = 0.3114, Std Dev = 0.0135\nGene 24: Mean Score = 0.3075, Std Dev = 0.0114\nGene 25: Mean Score = 0.2973, Std Dev = 0.0124\nGene 26: Mean Score = 0.3127, Std Dev = 0.0143\nGene 27: Mean Score = 0.3011, Std Dev = 0.0109\nGene 28: Mean Score = 0.2885, Std Dev = 0.0113\nGene 29: Mean Score = 0.3047, Std Dev = 0.0115\nGene 30: Mean Score = 0.2933, Std Dev = 0.0112\nGene 31: Mean Score = 0.3164, Std Dev = 0.0146\nGene 32: Mean Score = 0.3081, Std Dev = 0.0058\nGene 33: Mean Score = 0.3067, Std Dev = 0.0163\nGene 34: Mean Score = 0.2998, Std Dev = 0.0051\nGene 35: Mean Score = 0.3135, Std Dev = 0.0128\nGene 36: Mean Score = 0.3065, Std Dev = 0.0113\nGene 37: Mean Score = 0.3159, Std Dev = 0.0148\nGene 38: Mean Score = 0.3146, Std Dev = 0.0078\nGene 39: Mean Score = 0.2796, Std Dev = 0.0101\nGene 40: Mean Score = 0.3035, Std Dev = 0.0182\nGene 41: Mean Score = 0.2985, Std Dev = 0.0059\nGene 42: Mean Score = 0.3085, Std De",
                "lineage": "86301"
            }
        ],
        "864": [],
        "865": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = DBSCAN(eps=1.0, min_samples=5).fit(spatial_coords)\n    labels = clustering.labels_\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[np.where(labels == labels[i]), gene_idx]) for i in test_index if labels[i] != -1])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5741570322966428,
                "model_info": "",
                "lineage": "86501"
            }
        ],
        "866": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        print(f\"Gene {gene_idx}: Mean Score = {np.mean(scores):.4f}, Std Dev Score = {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0: Mean Score = 0.3077, Std Dev Score = 0.0033\nGene 1: Mean Score = 0.3134, Std Dev Score = 0.0122\nGene 2: Mean Score = 0.2974, Std Dev Score = 0.0087\nGene 3: Mean Score = 0.3166, Std Dev Score = 0.0114\nGene 4: Mean Score = 0.3027, Std Dev Score = 0.0030\nGene 5: Mean Score = 0.3069, Std Dev Score = 0.0137\nGene 6: Mean Score = 0.3065, Std Dev Score = 0.0243\nGene 7: Mean Score = 0.2857, Std Dev Score = 0.0043\nGene 8: Mean Score = 0.3077, Std Dev Score = 0.0126\nGene 9: Mean Score = 0.3115, Std Dev Score = 0.0156\nGene 10: Mean Score = 0.2980, Std Dev Score = 0.0121\nGene 11: Mean Score = 0.2976, Std Dev Score = 0.0116\nGene 12: Mean Score = 0.3150, Std Dev Score = 0.0061\nGene 13: Mean Score = 0.3042, Std Dev Score = 0.0119\nGene 14: Mean Score = 0.3214, Std Dev Score = 0.0113\nGene 15: Mean Score = 0.2985, Std Dev Score = 0.0124\nGene 16: Mean Score = 0.2991, Std Dev Score = 0.0132\nGene 17: Mean Score = 0.3161, Std Dev Score = 0.0189\nGene 18: Mean Score = 0.3175, Std Dev Score = 0.0140\nGene 19: Mean Score = 0.3075, Std Dev Score = 0.0131\nGene 20: Mean Score = 0.2937, Std Dev Score = 0.0102\nGene 21: Mean Score = 0.3337, Std Dev Score = 0.0090\nGene 22: Mean Score = 0.2962, Std Dev Score = 0.0150\nGene 23: Mean Score = 0.3114, Std Dev Score = 0.0135\nGene 24: Mean Score = 0.3075, Std Dev Score = 0.0114\nGene 25: Mean Score = 0.2973, Std Dev Score = 0.0124\nGene 26: Mean Score = 0.3127, Std Dev Score = 0.0143\nGene 27: Mean Score = 0.3011, Std Dev Score = 0.0109\nGene 28: Mean Score = 0.2885, Std Dev Score = 0.0113\nGene 29: Mean Score = 0.3047, Std Dev Score = 0.0115\nGene 30: Mean Score = 0.2933, Std Dev Score = 0.0112\nGene 31: Mean Score = 0.3164, Std Dev Score = 0.0146\nGene 32: Mean Score = 0.3081, Std Dev Score = 0.0058\nGene 33: Mean Score = 0.3067, Std Dev Score = 0.0163\nGene 34: Mean Score = 0.2998, Std Dev Score = 0.0051\nGene 35: Mean Score = 0.3135, Std Dev Score = 0.0128\nGene 36: Mean Score = 0.3065, Std Dev Score = 0.0113\nGene 37: Mean Score = 0.3159, Std Dev Score = 0.0",
                "lineage": "86601"
            }
        ],
        "867": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        distances[distances == 0] = 1e-10\n        inverse_distances = 1 / distances\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': inverse_distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[neighbors, gene_idx]))\n            if neighbor_exp:\n                scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "86701"
            }
        ],
        "868": [],
        "869": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Checkpoint Summary: {np.sum(spatial_var_score)} genes identified as spatially variable.\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Checkpoint Summary: 70.0 genes identified as spatially variable.",
                "lineage": "86901"
            }
        ],
        "870": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nn = NearestNeighbors(n_neighbors=10, algorithm='ball_tree')\n    nn.fit(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            distances, indices = nn.kneighbors(spatial_coords[test_index])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i], gene_idx]) for i in range(len(test_index))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8250127648926043,
                "model_info": "",
                "lineage": "87001"
            }
        ],
        "871": [],
        "872": [],
        "873": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.decomposition import PCA\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    pca = PCA(n_components=2)\n    reduced_spatial_coords = pca.fit_transform(spatial_coords)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(reduced_spatial_coords.shape[0]))\n    for i in range(reduced_spatial_coords.shape[0]):\n        distances = np.linalg.norm(reduced_spatial_coords[i] - reduced_spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(reduced_spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(reduced_spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826992784992785,
                "model_info": "",
                "lineage": "87301"
            }
        ],
        "874": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = pairwise_distances(spatial_coords)\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = np.argsort(distances[i])[1:11]\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8223100038602013,
                "model_info": "",
                "lineage": "87401"
            }
        ],
        "875": [],
        "876": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    logging.info(\"Number of genes: %d\", num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        logging.info(\"Gene %d: Score = %.4f\", gene_idx, np.mean(scores))\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "87601"
            }
        ],
        "877": [],
        "878": [],
        "879": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.std(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "87901"
            }
        ],
        "880": [],
        "881": [],
        "882": [],
        "883": [],
        "884": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\nfrom scipy.spatial import distance_matrix\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    dist_matrix = pairwise_distances(spatial_coords)\n    spatial_neighbors = np.argsort(dist_matrix, axis=1)[:, 1:11]\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[spatial_neighbors[i], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826101443768997,
                "model_info": "",
                "lineage": "88401"
            }
        ],
        "885": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import precision_recall_curve\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        true_labels = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            score = np.std(neighbor_exp)\n            scores.append(score)\n            true_labels.append(1 if score > 0.5 else 0)\n\n        precision, recall, _ = precision_recall_curve(true_labels, scores)\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "88501"
            }
        ],
        "886": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        weights = np.exp(-distances[nearest_indices])\n        G.add_edges_from((i, j, {'weight': weights[k]}) for k, j in enumerate(nearest_indices))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean([scaled_gene_expression[n, gene_idx] for n in G.neighbors(i) if n in train_index]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8063672218418828,
                "model_info": "",
                "lineage": "88601"
            }
        ],
        "887": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': 1 / (distances[j] + 1e-8)}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean([scaled_gene_expression[n, gene_idx] for n in G.neighbors(i) if n in train_index]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8063672218418828,
                "model_info": "",
                "lineage": "88701"
            }
        ],
        "888": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import skew, kurtosis\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    skewness = np.array([skew(scaled_gene_expression[:, gene_idx]) for gene_idx in range(num_genes)])\n    kurtosis_values = np.array([kurtosis(scaled_gene_expression[:, gene_idx]) for gene_idx in range(num_genes)])\n    print(\"Skewness:\", skewness)\n    print(\"Kurtosis:\", kurtosis_values)\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Skewness: [-0.06934999 -0.05662659  3.382054   ...  0.76300078  4.06066095\n  0.00418563]\nKurtosis: [-1.07036531 -1.09746784  9.44269936 ... -1.35485594 14.49047636\n -1.66691527]",
                "lineage": "88801"
            }
        ],
        "889": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=11, algorithm='ball_tree').fit(spatial_coords)\n    distances, indices = nbrs.kneighbors(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i][1:], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        \n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n        print(f'Gene {gene_idx}: Mean Score = {np.mean(scores):.4f}, Std Dev = {np.std(scores):.4f}')\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8271968053044003,
                "model_info": "Gene 0: Mean Score = 0.3143, Std Dev = 0.0066\nGene 1: Mean Score = 0.3252, Std Dev = 0.0130\nGene 2: Mean Score = 0.3046, Std Dev = 0.0084\nGene 3: Mean Score = 0.3256, Std Dev = 0.0124\nGene 4: Mean Score = 0.3088, Std Dev = 0.0065\nGene 5: Mean Score = 0.3127, Std Dev = 0.0169\nGene 6: Mean Score = 0.3166, Std Dev = 0.0225\nGene 7: Mean Score = 0.2910, Std Dev = 0.0045\nGene 8: Mean Score = 0.3153, Std Dev = 0.0144\nGene 9: Mean Score = 0.3177, Std Dev = 0.0178\nGene 10: Mean Score = 0.3035, Std Dev = 0.0088\nGene 11: Mean Score = 0.3045, Std Dev = 0.0156\nGene 12: Mean Score = 0.3273, Std Dev = 0.0021\nGene 13: Mean Score = 0.3095, Std Dev = 0.0140\nGene 14: Mean Score = 0.3323, Std Dev = 0.0132\nGene 15: Mean Score = 0.3081, Std Dev = 0.0135\nGene 16: Mean Score = 0.3068, Std Dev = 0.0157\nGene 17: Mean Score = 0.3287, Std Dev = 0.0177\nGene 18: Mean Score = 0.3241, Std Dev = 0.0140\nGene 19: Mean Score = 0.3139, Std Dev = 0.0130\nGene 20: Mean Score = 0.2971, Std Dev = 0.0139\nGene 21: Mean Score = 0.3440, Std Dev = 0.0110\nGene 22: Mean Score = 0.2991, Std Dev = 0.0146\nGene 23: Mean Score = 0.3177, Std Dev = 0.0129\nGene 24: Mean Score = 0.3150, Std Dev = 0.0154\nGene 25: Mean Score = 0.3082, Std Dev = 0.0140\nGene 26: Mean Score = 0.3226, Std Dev = 0.0121\nGene 27: Mean Score = 0.3107, Std Dev = 0.0075\nGene 28: Mean Score = 0.2978, Std Dev = 0.0135\nGene 29: Mean Score = 0.3087, Std Dev = 0.0118\nGene 30: Mean Score = 0.2992, Std Dev = 0.0127\nGene 31: Mean Score = 0.3248, Std Dev = 0.0152\nGene 32: Mean Score = 0.3148, Std Dev = 0.0077\nGene 33: Mean Score = 0.3108, Std Dev = 0.0162\nGene 34: Mean Score = 0.3058, Std Dev = 0.0061\nGene 35: Mean Score = 0.3213, Std Dev = 0.0119\nGene 36: Mean Score = 0.3129, Std Dev = 0.0115\nGene 37: Mean Score = 0.3247, Std Dev = 0.0169\nGene 38: Mean Score = 0.3225, Std Dev = 0.0075\nGene 39: Mean Score = 0.2922, Std Dev = 0.0120\nGene 40: Mean Score = 0.3114, Std Dev = 0.0201\nGene 41: Mean Score = 0.3088, Std Dev = 0.0028\nGene 42: Mean Score = 0.3142, Std De",
                "lineage": "88901"
            }
        ],
        "890": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        weights = 1 / (distances[nearest_indices] + 1e-10)\n        G.add_edges_from((i, j, {'weight': weight}) for j, weight in zip(nearest_indices, weights))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "89001"
            }
        ],
        "891": [],
        "892": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Validation metrics for each gene: {spatial_var_score}\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Validation metrics for each gene: [0. 0. 0. ... 0. 0. 0.]",
                "lineage": "89201"
            }
        ],
        "893": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport time\n\ndef tuso_model(adata):\n    start_time = time.time()\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n    \n    if gene_expression.shape[0] < 100:\n        print(\"Warning: Insufficient training data volume for reliable model performance.\")\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    patience_counter = 0\n    early_stopping_threshold = 0.5\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > early_stopping_threshold else 0\n        if np.mean(scores) <= early_stopping_threshold:\n            patience_counter += 1\n        else:\n            patience_counter = 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    print(f\"Early stopping patience counter: {patience_counter}, time taken: {time.time() - start_time:.2f} seconds\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Early stopping patience counter: 4, time taken: 13.47 seconds",
                "lineage": "89301"
            }
        ],
        "894": [],
        "895": [],
        "896": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport time\nimport psutil\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            start_time = time.time()\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            elapsed_time = time.time() - start_time\n            memory_usage = psutil.Process().memory_info().rss / (1024 ** 2)\n            print(f\"Gene {gene_idx}, Batch Time: {elapsed_time:.4f}s, Memory Usage: {memory_usage:.2f}MB\")\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0, Batch Time: 0.0020s, Memory Usage: 554.89MB\nGene 0, Batch Time: 0.0009s, Memory Usage: 554.89MB\nGene 0, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 0, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 0, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 1, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 1, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 1, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 1, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 1, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 2, Batch Time: 0.0008s, Memory Usage: 554.89MB\nGene 2, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 2, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 2, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 2, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 3, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 3, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 3, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 3, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 3, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 4, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 4, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 4, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 4, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 4, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 5, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 5, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 5, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 5, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 5, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 6, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 6, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 6, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 6, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 6, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 7, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 7, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 7, Batch Time: 0.0008s, Memory Usage: 554.91MB\nGene 7, Batch Time: 0.00",
                "lineage": "89601"
            }
        ],
        "897": [],
        "898": [],
        "899": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n    \n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n    \n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    adata.obs[\"annotation\"] = adata.obs[\"annotation\"].astype(str)\n    class_counts = adata.obs[\"annotation\"].value_counts()\n    logging.info(f\"Class distribution: {class_counts / class_counts.sum()}\")\n\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        logging.info(f\"Gene {gene_idx}: Score = {spatial_var_score[gene_idx]}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "89901"
            }
        ],
        "900": [],
        "901": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='auto').fit(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            distances, indices = nbrs.kneighbors(spatial_coords[test_index])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i], gene_idx]) for i in range(len(test_index))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826101443768997,
                "model_info": "",
                "lineage": "90101"
            }
        ],
        "902": [],
        "903": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import f1_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        y_true = []\n        y_pred = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            score = np.std(neighbor_exp)\n            scores.append(score)\n\n            y_true.extend([1 if score > 0.5 else 0])\n            y_pred.extend([1 if score > 0.5 else 0])\n\n        spatial_var_score[gene_idx] = 1 if f1_score(y_true, y_pred) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7939479074873959,
                "model_info": "",
                "lineage": "90301"
            }
        ],
        "904": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport pandas as pd\nfrom sklearn.neighbors import KDTree\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    tree = KDTree(spatial_coords)\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        nearest_indices = tree.query(spatial_coords[i].reshape(1, -1), k=11, return_distance=False)[0][1:]\n        G.add_edges_from((i, j) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    missing_values_count = np.isnan(gene_expression).sum(axis=0)\n    print(f'Missing values per gene: {missing_values_count}')\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8223100038602013,
                "model_info": "Missing values per gene: [0 0 0 ... 0 0 0]",
                "lineage": "90401"
            }
        ],
        "905": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        print(f\"Gene {gene_idx}, Mean Score: {np.mean(scores):.4f}, Std Score: {np.std(scores):.4f}\")\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    \n    correlated_features = np.corrcoef(scaled_gene_expression, rowvar=False)\n    threshold = 0.8\n    highly_correlated_pairs = np.argwhere(np.abs(correlated_features) > threshold)\n    for i, j in highly_correlated_pairs:\n        if i < j:\n            print(f\"Highly correlated features: Gene {i} and Gene {j} with correlation {correlated_features[i, j]:.2f}\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Gene 0, Mean Score: 0.3077, Std Score: 0.0033\nGene 1, Mean Score: 0.3134, Std Score: 0.0122\nGene 2, Mean Score: 0.2974, Std Score: 0.0087\nGene 3, Mean Score: 0.3166, Std Score: 0.0114\nGene 4, Mean Score: 0.3027, Std Score: 0.0030\nGene 5, Mean Score: 0.3069, Std Score: 0.0137\nGene 6, Mean Score: 0.3065, Std Score: 0.0243\nGene 7, Mean Score: 0.2857, Std Score: 0.0043\nGene 8, Mean Score: 0.3077, Std Score: 0.0126\nGene 9, Mean Score: 0.3115, Std Score: 0.0156\nGene 10, Mean Score: 0.2980, Std Score: 0.0121\nGene 11, Mean Score: 0.2976, Std Score: 0.0116\nGene 12, Mean Score: 0.3150, Std Score: 0.0061\nGene 13, Mean Score: 0.3042, Std Score: 0.0119\nGene 14, Mean Score: 0.3214, Std Score: 0.0113\nGene 15, Mean Score: 0.2985, Std Score: 0.0124\nGene 16, Mean Score: 0.2991, Std Score: 0.0132\nGene 17, Mean Score: 0.3161, Std Score: 0.0189\nGene 18, Mean Score: 0.3175, Std Score: 0.0140\nGene 19, Mean Score: 0.3075, Std Score: 0.0131\nGene 20, Mean Score: 0.2937, Std Score: 0.0102\nGene 21, Mean Score: 0.3337, Std Score: 0.0090\nGene 22, Mean Score: 0.2962, Std Score: 0.0150\nGene 23, Mean Score: 0.3114, Std Score: 0.0135\nGene 24, Mean Score: 0.3075, Std Score: 0.0114\nGene 25, Mean Score: 0.2973, Std Score: 0.0124\nGene 26, Mean Score: 0.3127, Std Score: 0.0143\nGene 27, Mean Score: 0.3011, Std Score: 0.0109\nGene 28, Mean Score: 0.2885, Std Score: 0.0113\nGene 29, Mean Score: 0.3047, Std Score: 0.0115\nGene 30, Mean Score: 0.2933, Std Score: 0.0112\nGene 31, Mean Score: 0.3164, Std Score: 0.0146\nGene 32, Mean Score: 0.3081, Std Score: 0.0058\nGene 33, Mean Score: 0.3067, Std Score: 0.0163\nGene 34, Mean Score: 0.2998, Std Score: 0.0051\nGene 35, Mean Score: 0.3135, Std Score: 0.0128\nGene 36, Mean Score: 0.3065, Std Score: 0.0113\nGene 37, Mean Score: 0.3159, Std Score: 0.0148\nGene 38, Mean Score: 0.3146, Std Score: 0.0078\nGene 39, Mean Score: 0.2796, Std Score: 0.0101\nGene 40, Mean Score: 0.3035, Std Score: 0.0182\nGene 41, Mean Score: 0.2985, Std Score: 0.0059\nGene 42, Mean Score: 0.3085, Std Sco",
                "lineage": "90501"
            }
        ],
        "906": [],
        "907": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    if len(adata.obs[\"annotation\"].value_counts()) < 2:\n        print(\"Warning: Insufficient class balance in training data.\")\n    \n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n\n    trainable_params = ridge.coef_.size\n    frozen_params = 0\n    print(f\"Trainable params: {trainable_params}, Frozen params: {frozen_params}, Ratio: {trainable_params/(trainable_params + frozen_params):.2f}\")\n\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "Trainable params: 2, Frozen params: 0, Ratio: 1.00",
                "lineage": "90701"
            }
        ],
        "908": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[train_index, gene_idx][np.linalg.norm(spatial_coords[train_index] - spatial_coords[i], axis=1) < 1.0]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "90801"
            }
        ],
        "909": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import pairwise_distances\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = pairwise_distances(spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.8223100038602013,
                "model_info": "",
                "lineage": "90901"
            }
        ],
        "910": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.stats import zscore\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.std(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "91001"
            }
        ],
        "911": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.metrics import silhouette_score\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                neighbors = list(G.neighbors(i))\n                if neighbors:\n                    neighbor_exp.append(scaled_gene_expression[neighbors, gene_idx])\n            if len(neighbor_exp) > 1:\n                neighbor_exp = np.concatenate(neighbor_exp)\n                labels = np.zeros(neighbor_exp.shape[0])\n                scores.append(silhouette_score(neighbor_exp.reshape(-1, 1), labels) if len(set(labels)) > 1 else 0)\n            else:\n                scores.append(0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "91101"
            }
        ],
        "912": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "91201"
            }
        ],
        "913": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    spatial_var_score = np.zeros(num_genes)\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n        logging.info(f\"Gene {gene_idx}: Mean Score = {np.mean(scores)}, Std Dev = {np.std(scores)}\")\n        logging.info(f\"Gradient Norm for Gene {gene_idx}: {np.linalg.norm(ridge.coef_)}\")\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "91301"
            }
        ],
        "914": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': 1 / (distances[j] + 1e-5)}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) if list(G.neighbors(i)) else 0 for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "91401"
            }
        ],
        "915": [],
        "916": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            var_ratio = np.var(neighbor_exp) / np.var(scaled_gene_expression[train_index, gene_idx])\n            scores.append(var_ratio)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "91601"
            }
        ],
        "917": [],
        "918": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom scipy.spatial.distance import cdist\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = cdist(spatial_coords, spatial_coords)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, j, {'weight': distances[i, j]}) for j in nearest_indices[i])\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.5616789059886249,
                "model_info": "",
                "lineage": "91801"
            }
        ],
        "919": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    distances = np.linalg.norm(spatial_coords[:, np.newaxis] - spatial_coords, axis=2)\n    nearest_indices = np.argsort(distances, axis=1)[:, 1:11]\n    for i in range(spatial_coords.shape[0]):\n        G.add_edges_from((i, nearest_indices[i, j], {'weight': distances[i, nearest_indices[i, j]]}) for j in range(10))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "91901"
            }
        ],
        "920": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.std(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.mean(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.1601731601731602,
                "model_info": "",
                "lineage": "92001"
            }
        ],
        "921": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.ensemble import VotingRegressor\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge1 = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge2 = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            voting_regressor = VotingRegressor(estimators=[('ridge1', ridge1), ('ridge2', ridge2)])\n            voting_regressor.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "92101"
            }
        ],
        "922": [],
        "923": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    robust_scaler = RobustScaler()\n    scaled_gene_expression = robust_scaler.fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7178448420598733,
                "model_info": "",
                "lineage": "92301"
            }
        ],
        "924": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.neighbors import NearestNeighbors\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    nbrs = NearestNeighbors(n_neighbors=10, algorithm='auto').fit(spatial_coords)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            distances, indices = nbrs.kneighbors(spatial_coords[test_index])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[indices[i], gene_idx]) for i in range(len(test_index))])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.826101443768997,
                "model_info": "",
                "lineage": "92401"
            }
        ],
        "925": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nimport logging\n\ndef tuso_model(adata):\n    logging.basicConfig(level=logging.INFO)\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    logging.info(f\"Trainable Parameters: {ridge.coef_.size}, Frozen Parameters: 0\")\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "92501"
            }
        ],
        "926": [],
        "927": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index if len(list(G.neighbors(i))) > 0])\n            scores.append(np.std(neighbor_exp) if len(neighbor_exp) > 0 else 0)\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.832779761904762,
                "model_info": "",
                "lineage": "92701"
            }
        ],
        "928": [],
        "929": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7926031368502299,
                "model_info": "",
                "lineage": "92901"
            }
        ],
        "930": [],
        "931": [],
        "932": [],
        "933": [],
        "934": [],
        "935": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\nfrom sklearn.cluster import DBSCAN\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    clustering = DBSCAN(eps=0.5, min_samples=5).fit(spatial_coords)\n    labels = clustering.labels_\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = []\n            for i in test_index:\n                cluster_indices = np.where(labels == labels[i])[0]\n                if len(cluster_indices) > 0:\n                    neighbor_exp.append(np.mean(scaled_gene_expression[cluster_indices, gene_idx]))\n                else:\n                    neighbor_exp.append(0)\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "93501"
            }
        ],
        "936": [],
        "937": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.model_selection import StratifiedKFold\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    quantile_transformer = QuantileTransformer()\n    scaled_gene_expression = StandardScaler(with_mean=False).fit_transform(quantile_transformer.fit_transform(gene_expression))\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[train_index[np.linalg.norm(spatial_coords[train_index] - spatial_coords[i], axis=1) < 1], gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "",
                "lineage": "93701"
            }
        ],
        "938": [
            {
                "code": "import numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.model_selection import StratifiedKFold\nimport networkx as nx\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n\n    spatial_var_score = np.zeros(num_genes)\n\n    robust_scaler = RobustScaler()\n    scaled_gene_expression = robust_scaler.fit_transform(gene_expression)\n\n    G = nx.Graph()\n    G.add_nodes_from(range(spatial_coords.shape[0]))\n    for i in range(spatial_coords.shape[0]):\n        distances = np.linalg.norm(spatial_coords[i] - spatial_coords, axis=1)\n        nearest_indices = np.argsort(distances)[1:11]\n        G.add_edges_from((i, j, {'weight': distances[j]}) for j in nearest_indices)\n\n    skf = StratifiedKFold(n_splits=5, shuffle=True)\n    for gene_idx in range(num_genes):\n        scores = []\n        for train_index, test_index in skf.split(spatial_coords, adata.obs[\"annotation\"]):\n            ridge = RidgeCV(alphas=np.logspace(-3, 3, 7))\n            ridge.fit(spatial_coords[train_index], scaled_gene_expression[train_index, gene_idx])\n            neighbor_exp = np.array([np.mean(scaled_gene_expression[list(G.neighbors(i)), gene_idx]) for i in test_index])\n            scores.append(np.std(neighbor_exp))\n\n        spatial_var_score[gene_idx] = 1 if np.mean(scores) > 0.5 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XXXXXXXXXXXXXXXXXX.py",
                "accuracy": 0.7178448420598733,
                "model_info": "",
                "lineage": "93801"
            }
        ]
    },
    "1": {
        "2": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import QuantileTransformer\n\ndef tuso_model(adata):\n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        qt = QuantileTransformer(output_distribution='normal')\n        normalized_gene_data = qt.fit_transform(gene_data.reshape(-1, 1)).flatten()\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(normalized_gene_data.reshape(-1, 1))\n        \n        kmeans = KMeans(n_clusters=2, random_state=0).fit(spatial_coords)\n        labels = kmeans.labels_\n        \n        mean_exp_cluster_0 = np.mean(scaled_gene_data[labels == 0])\n        mean_exp_cluster_1 = np.mean(scaled_gene_data[labels == 1])\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XX.py",
                "accuracy": 0.7568397076319935,
                "model_info": "",
                "lineage": "211"
            }
        ],
        "3": [],
        "4": [
            {
                "code": "import numpy as np\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\n\ndef tuso_model(adata):\n    print(f\"Number of genes: {adata.X.shape[1]}\")\n    print(f\"Number of cells: {adata.X.shape[0]}\")\n    print(f\"Spatial coordinates shape: {adata.obsm['spatial'].shape}\")\n    print(f\"Cell type annotations: {adata.obs['annotation'].unique()}\")\n    \n    spatial_coords = adata.obsm[\"spatial\"]\n    gene_expression = adata.X.toarray() if hasattr(adata.X, \"toarray\") else adata.X\n    num_genes = gene_expression.shape[1]\n    \n    spatial_var_score = np.zeros(num_genes)\n\n    for gene_idx in range(num_genes):\n        gene_data = gene_expression[:, gene_idx]\n        log_gene_data = np.log1p(gene_data)\n        scaler = StandardScaler(with_mean=False)\n        scaled_gene_data = scaler.fit_transform(log_gene_data.reshape(-1, 1))\n        \n        kmeans = KMeans(n_clusters=2, random_state=0).fit(spatial_coords)\n        labels = kmeans.labels_\n        \n        mean_exp_cluster_0 = np.mean(scaled_gene_data[labels == 0])\n        mean_exp_cluster_1 = np.mean(scaled_gene_data[labels == 1])\n        \n        if abs(mean_exp_cluster_0 - mean_exp_cluster_1) > 0.5:\n            spatial_var_score[gene_idx] = 1\n    \n    adata.var['pred_spatial_var_score'] = spatial_var_score\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round16_BSP_big_small_patch_XX.py",
                "accuracy": 0.7633034864406633,
                "model_info": "Number of genes: 1050\nNumber of cells: 1263\nSpatial coordinates shape: (1263, 2)\nCell type annotations: ['epidermis', 'carcass', 'trachea', 'CNS', 'muscle', 'salivary gland', 'midgut', 'foregut', 'fat body', 'amnioserosa']\nCategories (10, object): ['CNS', 'amnioserosa', 'carcass', 'epidermis', ..., 'midgut', 'muscle',\n                          'salivary gland', 'trachea']",
                "lineage": "411"
            }
        ]
    },
    "2": {
        "2": [],
        "3": [
            {
                "code": "import numpy as np\nfrom scipy.stats import mannwhitneyu\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\n\ndef tuso_model(adata):\n    if adata.n_obs < 100:\n        print(\"Warning: Insufficient training data volume.\")\n    \n    spatial_var_scores = np.zeros(adata.n_vars)\n    gene_expression = adata.X.A if hasattr(adata.X, 'A') else adata.X\n    spatial_coords = adata.obsm[\"spatial\"]\n    \n    print(f\"Dataset statistics: {adata.n_obs} cells, {adata.n_vars} genes.\")\n    \n    scaler = StandardScaler()\n    scaled_expression = scaler.fit_transform(gene_expression)\n\n    vt = VarianceThreshold(threshold=0.1)\n    filtered_expression = vt.fit_transform(scaled_expression)\n\n    for i in range(filtered_expression.shape[1]):\n        y = filtered_expression[:, i]\n        X = np.hstack((spatial_coords, np.ones((spatial_coords.shape[0], 1))))\n        model = RidgeCV(alphas=np.logspace(-3, 3, 7))\n        model.fit(X, y)\n        spatial_var_scores[i] = 1 if model.alpha_ < 1 else 0\n\n    adata.var['pred_spatial_var_score'] = spatial_var_scores\n    return adata",
                "file": "/projects/zhanglab/users/alistair/tusoml/svg_tusoml_round18_distribution_free_teXXX.py",
                "accuracy": 0.7231416957026713,
                "model_info": "Dataset statistics: 1263 cells, 1050 genes.",
                "lineage": "321"
            }
        ]
    },
    "3": {
        "2": []
    }
}